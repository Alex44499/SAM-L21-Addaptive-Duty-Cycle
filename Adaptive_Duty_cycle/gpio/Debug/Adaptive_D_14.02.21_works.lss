
Adaptive_D_14.02.21_works.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004820  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00004820  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          00000028  20000004  00004824  00020004  2**2
                  ALLOC
  4 .stack        00002004  2000002c  0000484c  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017a20  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001846  00000000  00000000  00037aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001672  00000000  00000000  000392eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000400  00000000  00000000  0003a95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  0003ad5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000033d0  00000000  00000000  0003b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f72  00000000  00000000  0003e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009ce85  00000000  00000000  0004441f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001098  00000000  00000000  000e12a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 20 00 20 2d 1c 00 00 c1 1c 00 00 c1 1c 00 00     0 . -...........
	...
      2c:	c1 1c 00 00 00 00 00 00 00 00 00 00 c1 1c 00 00     ................
      3c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      4c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      5c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      6c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      7c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      8c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      9c:	c1 1c 00 00 c1 1c 00 00 c1 1c 00 00 c1 1c 00 00     ................
      ac:	c1 1c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00004820 	.word	0x00004820

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00004820 	.word	0x00004820
     10c:	00004820 	.word	0x00004820
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000020 	.word	0x20000020
     160:	20000000 	.word	0x20000000
     164:	20000024 	.word	0x20000024

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000020 	.word	0x20000020
     1a0:	20000024 	.word	0x20000024
     1a4:	20000000 	.word	0x20000000

000001a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2200      	movs	r2, #0
     1b4:	701a      	strb	r2, [r3, #0]
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
	...

000001c0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1c0:	b580      	push	{r7, lr}
     1c2:	b082      	sub	sp, #8
     1c4:	af00      	add	r7, sp, #0
     1c6:	0002      	movs	r2, r0
     1c8:	6039      	str	r1, [r7, #0]
     1ca:	1dfb      	adds	r3, r7, #7
     1cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b04      	cmp	r3, #4
     1d4:	d827      	bhi.n	226 <system_apb_clock_set_mask+0x66>
     1d6:	009a      	lsls	r2, r3, #2
     1d8:	4b16      	ldr	r3, [pc, #88]	; (234 <system_apb_clock_set_mask+0x74>)
     1da:	18d3      	adds	r3, r2, r3
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     1e0:	4b15      	ldr	r3, [pc, #84]	; (238 <system_apb_clock_set_mask+0x78>)
     1e2:	4a15      	ldr	r2, [pc, #84]	; (238 <system_apb_clock_set_mask+0x78>)
     1e4:	6951      	ldr	r1, [r2, #20]
     1e6:	683a      	ldr	r2, [r7, #0]
     1e8:	430a      	orrs	r2, r1
     1ea:	615a      	str	r2, [r3, #20]
			break;
     1ec:	e01d      	b.n	22a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     1ee:	4b12      	ldr	r3, [pc, #72]	; (238 <system_apb_clock_set_mask+0x78>)
     1f0:	4a11      	ldr	r2, [pc, #68]	; (238 <system_apb_clock_set_mask+0x78>)
     1f2:	6991      	ldr	r1, [r2, #24]
     1f4:	683a      	ldr	r2, [r7, #0]
     1f6:	430a      	orrs	r2, r1
     1f8:	619a      	str	r2, [r3, #24]
			break;
     1fa:	e016      	b.n	22a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1fc:	4b0e      	ldr	r3, [pc, #56]	; (238 <system_apb_clock_set_mask+0x78>)
     1fe:	4a0e      	ldr	r2, [pc, #56]	; (238 <system_apb_clock_set_mask+0x78>)
     200:	69d1      	ldr	r1, [r2, #28]
     202:	683a      	ldr	r2, [r7, #0]
     204:	430a      	orrs	r2, r1
     206:	61da      	str	r2, [r3, #28]
			break;
     208:	e00f      	b.n	22a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     20a:	4b0b      	ldr	r3, [pc, #44]	; (238 <system_apb_clock_set_mask+0x78>)
     20c:	4a0a      	ldr	r2, [pc, #40]	; (238 <system_apb_clock_set_mask+0x78>)
     20e:	6a11      	ldr	r1, [r2, #32]
     210:	683a      	ldr	r2, [r7, #0]
     212:	430a      	orrs	r2, r1
     214:	621a      	str	r2, [r3, #32]
			break;
     216:	e008      	b.n	22a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     218:	4b07      	ldr	r3, [pc, #28]	; (238 <system_apb_clock_set_mask+0x78>)
     21a:	4a07      	ldr	r2, [pc, #28]	; (238 <system_apb_clock_set_mask+0x78>)
     21c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     21e:	683a      	ldr	r2, [r7, #0]
     220:	430a      	orrs	r2, r1
     222:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     224:	e001      	b.n	22a <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     226:	2317      	movs	r3, #23
     228:	e000      	b.n	22c <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     22a:	2300      	movs	r3, #0
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b002      	add	sp, #8
     232:	bd80      	pop	{r7, pc}
     234:	00004520 	.word	0x00004520
     238:	40000400 	.word	0x40000400

0000023c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2280      	movs	r2, #128	; 0x80
     248:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2201      	movs	r2, #1
     254:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     256:	687b      	ldr	r3, [r7, #4]
     258:	2200      	movs	r2, #0
     25a:	70da      	strb	r2, [r3, #3]
}
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     264:	b580      	push	{r7, lr}
     266:	b082      	sub	sp, #8
     268:	af00      	add	r7, sp, #0
     26a:	0002      	movs	r2, r0
     26c:	1dfb      	adds	r3, r7, #7
     26e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     270:	1dfb      	adds	r3, r7, #7
     272:	781b      	ldrb	r3, [r3, #0]
     274:	2b00      	cmp	r3, #0
     276:	d002      	beq.n	27e <system_voltage_reference_enable+0x1a>
     278:	2b01      	cmp	r3, #1
     27a:	d007      	beq.n	28c <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     27c:	e00d      	b.n	29a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     27e:	4b08      	ldr	r3, [pc, #32]	; (2a0 <system_voltage_reference_enable+0x3c>)
     280:	4a07      	ldr	r2, [pc, #28]	; (2a0 <system_voltage_reference_enable+0x3c>)
     282:	69d2      	ldr	r2, [r2, #28]
     284:	2102      	movs	r1, #2
     286:	430a      	orrs	r2, r1
     288:	61da      	str	r2, [r3, #28]
			break;
     28a:	e006      	b.n	29a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <system_voltage_reference_enable+0x3c>)
     28e:	4a04      	ldr	r2, [pc, #16]	; (2a0 <system_voltage_reference_enable+0x3c>)
     290:	69d2      	ldr	r2, [r2, #28]
     292:	2104      	movs	r1, #4
     294:	430a      	orrs	r2, r1
     296:	61da      	str	r2, [r3, #28]
			break;
     298:	46c0      	nop			; (mov r8, r8)
	}
}
     29a:	46bd      	mov	sp, r7
     29c:	b002      	add	sp, #8
     29e:	bd80      	pop	{r7, pc}
     2a0:	40001400 	.word	0x40001400

000002a4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	681b      	ldr	r3, [r3, #0]
     2b0:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     2b2:	68fb      	ldr	r3, [r7, #12]
     2b4:	8c1b      	ldrh	r3, [r3, #32]
     2b6:	b29b      	uxth	r3, r3
     2b8:	2b00      	cmp	r3, #0
     2ba:	d001      	beq.n	2c0 <adc_is_syncing+0x1c>
		return true;
     2bc:	2301      	movs	r3, #1
     2be:	e000      	b.n	2c2 <adc_is_syncing+0x1e>
	}

	return false;
     2c0:	2300      	movs	r3, #0
}
     2c2:	0018      	movs	r0, r3
     2c4:	46bd      	mov	sp, r7
     2c6:	b004      	add	sp, #16
     2c8:	bd80      	pop	{r7, pc}
	...

000002cc <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     2d4:	4b0e      	ldr	r3, [pc, #56]	; (310 <_adc_get_inst_index+0x44>)
     2d6:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     2d8:	2300      	movs	r3, #0
     2da:	60fb      	str	r3, [r7, #12]
     2dc:	e010      	b.n	300 <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	009b      	lsls	r3, r3, #2
     2e2:	2210      	movs	r2, #16
     2e4:	4694      	mov	ip, r2
     2e6:	44bc      	add	ip, r7
     2e8:	4463      	add	r3, ip
     2ea:	3b08      	subs	r3, #8
     2ec:	681a      	ldr	r2, [r3, #0]
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	429a      	cmp	r2, r3
     2f2:	d102      	bne.n	2fa <_adc_get_inst_index+0x2e>
			return i;
     2f4:	68fb      	ldr	r3, [r7, #12]
     2f6:	b2db      	uxtb	r3, r3
     2f8:	e006      	b.n	308 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	3301      	adds	r3, #1
     2fe:	60fb      	str	r3, [r7, #12]
     300:	68fb      	ldr	r3, [r7, #12]
     302:	2b00      	cmp	r3, #0
     304:	d0eb      	beq.n	2de <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     306:	2300      	movs	r3, #0
}
     308:	0018      	movs	r0, r3
     30a:	46bd      	mov	sp, r7
     30c:	b004      	add	sp, #16
     30e:	bd80      	pop	{r7, pc}
     310:	43000c00 	.word	0x43000c00

00000314 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     314:	b580      	push	{r7, lr}
     316:	b082      	sub	sp, #8
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	2200      	movs	r2, #0
     320:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     322:	687b      	ldr	r3, [r7, #4]
     324:	2200      	movs	r2, #0
     326:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2200      	movs	r2, #0
     32c:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     32e:	687b      	ldr	r3, [r7, #4]
     330:	2200      	movs	r2, #0
     332:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     334:	687b      	ldr	r3, [r7, #4]
     336:	2200      	movs	r2, #0
     338:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	2200      	movs	r2, #0
     33e:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     340:	687b      	ldr	r3, [r7, #4]
     342:	2200      	movs	r2, #0
     344:	61da      	str	r2, [r3, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     346:	687b      	ldr	r3, [r7, #4]
     348:	2201      	movs	r2, #1
     34a:	711a      	strb	r2, [r3, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	22c0      	movs	r2, #192	; 0xc0
     350:	0152      	lsls	r2, r2, #5
     352:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     354:	687b      	ldr	r3, [r7, #4]
     356:	2200      	movs	r2, #0
     358:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	2200      	movs	r2, #0
     35e:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     360:	687b      	ldr	r3, [r7, #4]
     362:	2200      	movs	r2, #0
     364:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     366:	687b      	ldr	r3, [r7, #4]
     368:	2200      	movs	r2, #0
     36a:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2200      	movs	r2, #0
     370:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     372:	687b      	ldr	r3, [r7, #4]
     374:	222a      	movs	r2, #42	; 0x2a
     376:	2100      	movs	r1, #0
     378:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	2200      	movs	r2, #0
     37e:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     380:	687b      	ldr	r3, [r7, #4]
     382:	2200      	movs	r2, #0
     384:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     386:	687b      	ldr	r3, [r7, #4]
     388:	2200      	movs	r2, #0
     38a:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	2200      	movs	r2, #0
     390:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     392:	687b      	ldr	r3, [r7, #4]
     394:	2200      	movs	r2, #0
     396:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2224      	movs	r2, #36	; 0x24
     39c:	2100      	movs	r1, #0
     39e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2200      	movs	r2, #0
     3a4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	2200      	movs	r2, #0
     3aa:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	2200      	movs	r2, #0
     3b0:	755a      	strb	r2, [r3, #21]
}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	46bd      	mov	sp, r7
     3b6:	b002      	add	sp, #8
     3b8:	bd80      	pop	{r7, pc}
	...

000003bc <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     3bc:	b580      	push	{r7, lr}
     3be:	b09c      	sub	sp, #112	; 0x70
     3c0:	af00      	add	r7, sp, #0
     3c2:	0002      	movs	r2, r0
     3c4:	6039      	str	r1, [r7, #0]
     3c6:	1dfb      	adds	r3, r7, #7
     3c8:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35)
	const uint32_t pinmapping[] = {
     3ca:	230c      	movs	r3, #12
     3cc:	18fa      	adds	r2, r7, r3
     3ce:	4b16      	ldr	r3, [pc, #88]	; (428 <_adc_configure_ain_pin+0x6c>)
     3d0:	0010      	movs	r0, r2
     3d2:	0019      	movs	r1, r3
     3d4:	2360      	movs	r3, #96	; 0x60
     3d6:	001a      	movs	r2, r3
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <_adc_configure_ain_pin+0x70>)
     3da:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     3dc:	4b14      	ldr	r3, [pc, #80]	; (430 <_adc_configure_ain_pin+0x74>)
     3de:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (pin <= _adc_extchannel_msb[index]) {
     3e0:	2213      	movs	r2, #19
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	429a      	cmp	r2, r3
     3e6:	d31a      	bcc.n	41e <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e8:	230c      	movs	r3, #12
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	683a      	ldr	r2, [r7, #0]
     3ee:	0092      	lsls	r2, r2, #2
     3f0:	58d3      	ldr	r3, [r2, r3]
     3f2:	66fb      	str	r3, [r7, #108]	; 0x6c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     3f4:	2308      	movs	r3, #8
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	0018      	movs	r0, r3
     3fa:	4b0e      	ldr	r3, [pc, #56]	; (434 <_adc_configure_ain_pin+0x78>)
     3fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	2200      	movs	r2, #0
     404:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	2201      	movs	r2, #1
     40c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     410:	b2db      	uxtb	r3, r3
     412:	2208      	movs	r2, #8
     414:	18ba      	adds	r2, r7, r2
     416:	0011      	movs	r1, r2
     418:	0018      	movs	r0, r3
     41a:	4b07      	ldr	r3, [pc, #28]	; (438 <_adc_configure_ain_pin+0x7c>)
     41c:	4798      	blx	r3
	}
}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	46bd      	mov	sp, r7
     422:	b01c      	add	sp, #112	; 0x70
     424:	bd80      	pop	{r7, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	00004534 	.word	0x00004534
     42c:	0000450d 	.word	0x0000450d
     430:	0000ffff 	.word	0x0000ffff
     434:	0000023d 	.word	0x0000023d
     438:	00001135 	.word	0x00001135

0000043c <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     43c:	b580      	push	{r7, lr}
     43e:	b08a      	sub	sp, #40	; 0x28
     440:	af00      	add	r7, sp, #0
     442:	60b9      	str	r1, [r7, #8]
     444:	607a      	str	r2, [r7, #4]
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	1c02      	adds	r2, r0, #0
     44c:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     44e:	2327      	movs	r3, #39	; 0x27
     450:	18fb      	adds	r3, r7, r3
     452:	2200      	movs	r2, #0
     454:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     456:	2310      	movs	r3, #16
     458:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     45a:	231f      	movs	r3, #31
     45c:	18fb      	adds	r3, r7, r3
     45e:	2200      	movs	r2, #0
     460:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     462:	68bb      	ldr	r3, [r7, #8]
     464:	681b      	ldr	r3, [r3, #0]
     466:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     468:	2314      	movs	r3, #20
     46a:	18fb      	adds	r3, r7, r3
     46c:	0018      	movs	r0, r3
     46e:	4bc5      	ldr	r3, [pc, #788]	; (784 <_adc_set_config+0x348>)
     470:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     472:	687b      	ldr	r3, [r7, #4]
     474:	781a      	ldrb	r2, [r3, #0]
     476:	2314      	movs	r3, #20
     478:	18fb      	adds	r3, r7, r3
     47a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     47c:	221e      	movs	r2, #30
     47e:	2314      	movs	r3, #20
     480:	18fb      	adds	r3, r7, r3
     482:	0019      	movs	r1, r3
     484:	0010      	movs	r0, r2
     486:	4bc0      	ldr	r3, [pc, #768]	; (788 <_adc_set_config+0x34c>)
     488:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     48a:	231e      	movs	r3, #30
     48c:	0018      	movs	r0, r3
     48e:	4bbf      	ldr	r3, [pc, #764]	; (78c <_adc_set_config+0x350>)
     490:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     492:	687b      	ldr	r3, [r7, #4]
     494:	791b      	ldrb	r3, [r3, #4]
     496:	001a      	movs	r2, r3
     498:	230f      	movs	r3, #15
     49a:	18fb      	adds	r3, r7, r3
     49c:	781b      	ldrb	r3, [r3, #0]
     49e:	0011      	movs	r1, r2
     4a0:	0018      	movs	r0, r3
     4a2:	4bbb      	ldr	r3, [pc, #748]	; (790 <_adc_set_config+0x354>)
     4a4:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	88db      	ldrh	r3, [r3, #6]
     4aa:	001a      	movs	r2, r3
     4ac:	230f      	movs	r3, #15
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	0011      	movs	r1, r2
     4b4:	0018      	movs	r0, r3
     4b6:	4bb6      	ldr	r3, [pc, #728]	; (790 <_adc_set_config+0x354>)
     4b8:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     4ba:	231e      	movs	r3, #30
     4bc:	18fb      	adds	r3, r7, r3
     4be:	2200      	movs	r2, #0
     4c0:	701a      	strb	r2, [r3, #0]
     4c2:	e01a      	b.n	4fa <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	691b      	ldr	r3, [r3, #16]
     4c8:	221e      	movs	r2, #30
     4ca:	18ba      	adds	r2, r7, r2
     4cc:	7812      	ldrb	r2, [r2, #0]
     4ce:	2101      	movs	r1, #1
     4d0:	4091      	lsls	r1, r2
     4d2:	000a      	movs	r2, r1
     4d4:	4013      	ands	r3, r2
     4d6:	d009      	beq.n	4ec <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     4d8:	231e      	movs	r3, #30
     4da:	18fb      	adds	r3, r7, r3
     4dc:	781a      	ldrb	r2, [r3, #0]
     4de:	230f      	movs	r3, #15
     4e0:	18fb      	adds	r3, r7, r3
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	0011      	movs	r1, r2
     4e6:	0018      	movs	r0, r3
     4e8:	4ba9      	ldr	r3, [pc, #676]	; (790 <_adc_set_config+0x354>)
     4ea:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     4ec:	231e      	movs	r3, #30
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	781a      	ldrb	r2, [r3, #0]
     4f2:	231e      	movs	r3, #30
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	3201      	adds	r2, #1
     4f8:	701a      	strb	r2, [r3, #0]
     4fa:	231e      	movs	r3, #30
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	2213      	movs	r2, #19
     502:	4293      	cmp	r3, r2
     504:	d9de      	bls.n	4c4 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     506:	687b      	ldr	r3, [r7, #4]
     508:	7b5b      	ldrb	r3, [r3, #13]
     50a:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     50c:	b25a      	sxtb	r2, r3
     50e:	687b      	ldr	r3, [r7, #4]
     510:	7b9b      	ldrb	r3, [r3, #14]
     512:	01db      	lsls	r3, r3, #7
     514:	b25b      	sxtb	r3, r3
     516:	4313      	orrs	r3, r2
     518:	b25b      	sxtb	r3, r3
     51a:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     51c:	69bb      	ldr	r3, [r7, #24]
     51e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     520:	687b      	ldr	r3, [r7, #4]
     522:	7d1b      	ldrb	r3, [r3, #20]
     524:	01db      	lsls	r3, r3, #7
			| (config->reference);
     526:	b25a      	sxtb	r2, r3
     528:	687b      	ldr	r3, [r7, #4]
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	b25b      	sxtb	r3, r3
     52e:	4313      	orrs	r3, r2
     530:	b25b      	sxtb	r3, r3
     532:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     534:	69bb      	ldr	r3, [r7, #24]
     536:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     538:	687b      	ldr	r3, [r7, #4]
     53a:	78db      	ldrb	r3, [r3, #3]
     53c:	2b34      	cmp	r3, #52	; 0x34
     53e:	d846      	bhi.n	5ce <_adc_set_config+0x192>
     540:	009a      	lsls	r2, r3, #2
     542:	4b94      	ldr	r3, [pc, #592]	; (794 <_adc_set_config+0x358>)
     544:	18d3      	adds	r3, r2, r3
     546:	681b      	ldr	r3, [r3, #0]
     548:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     54a:	2327      	movs	r3, #39	; 0x27
     54c:	18fb      	adds	r3, r7, r3
     54e:	687a      	ldr	r2, [r7, #4]
     550:	7a52      	ldrb	r2, [r2, #9]
     552:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     554:	231f      	movs	r3, #31
     556:	18fb      	adds	r3, r7, r3
     558:	687a      	ldr	r2, [r7, #4]
     55a:	7a12      	ldrb	r2, [r2, #8]
     55c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     55e:	2310      	movs	r3, #16
     560:	623b      	str	r3, [r7, #32]
		break;
     562:	e036      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     564:	2327      	movs	r3, #39	; 0x27
     566:	18fb      	adds	r3, r7, r3
     568:	2201      	movs	r2, #1
     56a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     56c:	231f      	movs	r3, #31
     56e:	18fb      	adds	r3, r7, r3
     570:	2202      	movs	r2, #2
     572:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     574:	2310      	movs	r3, #16
     576:	623b      	str	r3, [r7, #32]
		break;
     578:	e02b      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     57a:	2327      	movs	r3, #39	; 0x27
     57c:	18fb      	adds	r3, r7, r3
     57e:	2202      	movs	r2, #2
     580:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     582:	231f      	movs	r3, #31
     584:	18fb      	adds	r3, r7, r3
     586:	2204      	movs	r2, #4
     588:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     58a:	2310      	movs	r3, #16
     58c:	623b      	str	r3, [r7, #32]
		break;
     58e:	e020      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     590:	2327      	movs	r3, #39	; 0x27
     592:	18fb      	adds	r3, r7, r3
     594:	2201      	movs	r2, #1
     596:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     598:	231f      	movs	r3, #31
     59a:	18fb      	adds	r3, r7, r3
     59c:	2206      	movs	r2, #6
     59e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5a0:	2310      	movs	r3, #16
     5a2:	623b      	str	r3, [r7, #32]
		break;
     5a4:	e015      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     5a6:	2327      	movs	r3, #39	; 0x27
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2200      	movs	r2, #0
     5ac:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     5ae:	231f      	movs	r3, #31
     5b0:	18fb      	adds	r3, r7, r3
     5b2:	2208      	movs	r2, #8
     5b4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5b6:	2310      	movs	r3, #16
     5b8:	623b      	str	r3, [r7, #32]
		break;
     5ba:	e00a      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     5bc:	2330      	movs	r3, #48	; 0x30
     5be:	623b      	str	r3, [r7, #32]
		break;
     5c0:	e007      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     5c2:	2320      	movs	r3, #32
     5c4:	623b      	str	r3, [r7, #32]
		break;
     5c6:	e004      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     5c8:	2300      	movs	r3, #0
     5ca:	623b      	str	r3, [r7, #32]
		break;
     5cc:	e001      	b.n	5d2 <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5ce:	2317      	movs	r3, #23
     5d0:	e1a7      	b.n	922 <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     5d2:	2327      	movs	r3, #39	; 0x27
     5d4:	18fb      	adds	r3, r7, r3
     5d6:	781b      	ldrb	r3, [r3, #0]
     5d8:	011b      	lsls	r3, r3, #4
     5da:	b2db      	uxtb	r3, r3
     5dc:	2270      	movs	r2, #112	; 0x70
     5de:	4013      	ands	r3, r2
     5e0:	b2da      	uxtb	r2, r3
     5e2:	231f      	movs	r3, #31
     5e4:	18fb      	adds	r3, r7, r3
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	4313      	orrs	r3, r2
     5ea:	b2da      	uxtb	r2, r3
     5ec:	69bb      	ldr	r3, [r7, #24]
     5ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	68bb      	ldr	r3, [r7, #8]
     5f4:	0018      	movs	r0, r3
     5f6:	4b68      	ldr	r3, [pc, #416]	; (798 <_adc_set_config+0x35c>)
     5f8:	4798      	blx	r3
     5fa:	1e03      	subs	r3, r0, #0
     5fc:	d1f9      	bne.n	5f2 <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	7d5b      	ldrb	r3, [r3, #21]
     602:	2b3f      	cmp	r3, #63	; 0x3f
     604:	d901      	bls.n	60a <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     606:	2317      	movs	r3, #23
     608:	e18b      	b.n	922 <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	7d5b      	ldrb	r3, [r3, #21]
     60e:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     610:	687b      	ldr	r3, [r7, #4]
     612:	7bdb      	ldrb	r3, [r3, #15]
     614:	01db      	lsls	r3, r3, #7
     616:	b25b      	sxtb	r3, r3
     618:	4313      	orrs	r3, r2
     61a:	b25b      	sxtb	r3, r3
     61c:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     61e:	69bb      	ldr	r3, [r7, #24]
     620:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     622:	46c0      	nop			; (mov r8, r8)
     624:	68bb      	ldr	r3, [r7, #8]
     626:	0018      	movs	r0, r3
     628:	4b5b      	ldr	r3, [pc, #364]	; (798 <_adc_set_config+0x35c>)
     62a:	4798      	blx	r3
     62c:	1e03      	subs	r3, r0, #0
     62e:	d1f9      	bne.n	624 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     630:	687b      	ldr	r3, [r7, #4]
     632:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     634:	69bb      	ldr	r3, [r7, #24]
     636:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     638:	687b      	ldr	r3, [r7, #4]
     63a:	2224      	movs	r2, #36	; 0x24
     63c:	5c9b      	ldrb	r3, [r3, r2]
     63e:	b29b      	uxth	r3, r3
     640:	00db      	lsls	r3, r3, #3
     642:	b29a      	uxth	r2, r3
			resolution |
     644:	6a3b      	ldr	r3, [r7, #32]
     646:	b29b      	uxth	r3, r3
     648:	4313      	orrs	r3, r2
     64a:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	7b1b      	ldrb	r3, [r3, #12]
     650:	b29b      	uxth	r3, r3
     652:	009b      	lsls	r3, r3, #2
     654:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     656:	4313      	orrs	r3, r2
     658:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	7a9b      	ldrb	r3, [r3, #10]
     65e:	b29b      	uxth	r3, r3
     660:	18db      	adds	r3, r3, r3
     662:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     664:	4313      	orrs	r3, r2
     666:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	7adb      	ldrb	r3, [r3, #11]
     66c:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     66e:	4313      	orrs	r3, r2
     670:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     672:	69bb      	ldr	r3, [r7, #24]
     674:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	68bb      	ldr	r3, [r7, #8]
     67a:	0018      	movs	r0, r3
     67c:	4b46      	ldr	r3, [pc, #280]	; (798 <_adc_set_config+0x35c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     684:	687b      	ldr	r3, [r7, #4]
     686:	8b1b      	ldrh	r3, [r3, #24]
     688:	2b00      	cmp	r3, #0
     68a:	d100      	bne.n	68e <_adc_set_config+0x252>
     68c:	e0bf      	b.n	80e <_adc_set_config+0x3d2>
		switch (resolution) {
     68e:	6a3b      	ldr	r3, [r7, #32]
     690:	2b10      	cmp	r3, #16
     692:	d100      	bne.n	696 <_adc_set_config+0x25a>
     694:	e08e      	b.n	7b4 <_adc_set_config+0x378>
     696:	d802      	bhi.n	69e <_adc_set_config+0x262>
     698:	2b00      	cmp	r3, #0
     69a:	d04d      	beq.n	738 <_adc_set_config+0x2fc>
     69c:	e0b7      	b.n	80e <_adc_set_config+0x3d2>
     69e:	2b20      	cmp	r3, #32
     6a0:	d023      	beq.n	6ea <_adc_set_config+0x2ae>
     6a2:	2b30      	cmp	r3, #48	; 0x30
     6a4:	d000      	beq.n	6a8 <_adc_set_config+0x26c>
     6a6:	e0b2      	b.n	80e <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	7adb      	ldrb	r3, [r3, #11]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d011      	beq.n	6d4 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6b4:	2b7f      	cmp	r3, #127	; 0x7f
     6b6:	dc0b      	bgt.n	6d0 <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     6bc:	3380      	adds	r3, #128	; 0x80
     6be:	db07      	blt.n	6d0 <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     6c4:	2b7f      	cmp	r3, #127	; 0x7f
     6c6:	dc03      	bgt.n	6d0 <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     6cc:	3380      	adds	r3, #128	; 0x80
     6ce:	da01      	bge.n	6d4 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6d0:	2317      	movs	r3, #23
     6d2:	e126      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	69db      	ldr	r3, [r3, #28]
     6d8:	2bff      	cmp	r3, #255	; 0xff
     6da:	dc04      	bgt.n	6e6 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     6e0:	2bff      	cmp	r3, #255	; 0xff
     6e2:	dc00      	bgt.n	6e6 <_adc_set_config+0x2aa>
     6e4:	e08c      	b.n	800 <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6e6:	2317      	movs	r3, #23
     6e8:	e11b      	b.n	922 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	7adb      	ldrb	r3, [r3, #11]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d015      	beq.n	71e <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6f6:	4a29      	ldr	r2, [pc, #164]	; (79c <_adc_set_config+0x360>)
     6f8:	4293      	cmp	r3, r2
     6fa:	dc0e      	bgt.n	71a <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     700:	4a27      	ldr	r2, [pc, #156]	; (7a0 <_adc_set_config+0x364>)
     702:	4293      	cmp	r3, r2
     704:	db09      	blt.n	71a <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     706:	687b      	ldr	r3, [r7, #4]
     708:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     70a:	4a24      	ldr	r2, [pc, #144]	; (79c <_adc_set_config+0x360>)
     70c:	4293      	cmp	r3, r2
     70e:	dc04      	bgt.n	71a <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     710:	687b      	ldr	r3, [r7, #4]
     712:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     714:	4a22      	ldr	r2, [pc, #136]	; (7a0 <_adc_set_config+0x364>)
     716:	4293      	cmp	r3, r2
     718:	da01      	bge.n	71e <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     71a:	2317      	movs	r3, #23
     71c:	e101      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     71e:	687b      	ldr	r3, [r7, #4]
     720:	69db      	ldr	r3, [r3, #28]
     722:	4a20      	ldr	r2, [pc, #128]	; (7a4 <_adc_set_config+0x368>)
     724:	4293      	cmp	r3, r2
     726:	dc05      	bgt.n	734 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     728:	687b      	ldr	r3, [r7, #4]
     72a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     72c:	4a1d      	ldr	r2, [pc, #116]	; (7a4 <_adc_set_config+0x368>)
     72e:	4293      	cmp	r3, r2
     730:	dc00      	bgt.n	734 <_adc_set_config+0x2f8>
     732:	e067      	b.n	804 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     734:	2317      	movs	r3, #23
     736:	e0f4      	b.n	922 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     738:	687b      	ldr	r3, [r7, #4]
     73a:	7adb      	ldrb	r3, [r3, #11]
     73c:	2b00      	cmp	r3, #0
     73e:	d015      	beq.n	76c <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     740:	687b      	ldr	r3, [r7, #4]
     742:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     744:	4a18      	ldr	r2, [pc, #96]	; (7a8 <_adc_set_config+0x36c>)
     746:	4293      	cmp	r3, r2
     748:	dc0e      	bgt.n	768 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     74e:	4a17      	ldr	r2, [pc, #92]	; (7ac <_adc_set_config+0x370>)
     750:	4293      	cmp	r3, r2
     752:	db09      	blt.n	768 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     754:	687b      	ldr	r3, [r7, #4]
     756:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     758:	4a13      	ldr	r2, [pc, #76]	; (7a8 <_adc_set_config+0x36c>)
     75a:	4293      	cmp	r3, r2
     75c:	dc04      	bgt.n	768 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     75e:	687b      	ldr	r3, [r7, #4]
     760:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     762:	4a12      	ldr	r2, [pc, #72]	; (7ac <_adc_set_config+0x370>)
     764:	4293      	cmp	r3, r2
     766:	da01      	bge.n	76c <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     768:	2317      	movs	r3, #23
     76a:	e0da      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	69db      	ldr	r3, [r3, #28]
     770:	4a0f      	ldr	r2, [pc, #60]	; (7b0 <_adc_set_config+0x374>)
     772:	4293      	cmp	r3, r2
     774:	dc04      	bgt.n	780 <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     776:	687b      	ldr	r3, [r7, #4]
     778:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     77a:	4a0d      	ldr	r2, [pc, #52]	; (7b0 <_adc_set_config+0x374>)
     77c:	4293      	cmp	r3, r2
     77e:	dd43      	ble.n	808 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     780:	2317      	movs	r3, #23
     782:	e0ce      	b.n	922 <_adc_set_config+0x4e6>
     784:	000001a9 	.word	0x000001a9
     788:	00000ed5 	.word	0x00000ed5
     78c:	00000f15 	.word	0x00000f15
     790:	000003bd 	.word	0x000003bd
     794:	00004594 	.word	0x00004594
     798:	000002a5 	.word	0x000002a5
     79c:	000001ff 	.word	0x000001ff
     7a0:	fffffe00 	.word	0xfffffe00
     7a4:	000003ff 	.word	0x000003ff
     7a8:	000007ff 	.word	0x000007ff
     7ac:	fffff800 	.word	0xfffff800
     7b0:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	7adb      	ldrb	r3, [r3, #11]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d015      	beq.n	7e8 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     7c0:	4a5a      	ldr	r2, [pc, #360]	; (92c <_adc_set_config+0x4f0>)
     7c2:	4293      	cmp	r3, r2
     7c4:	dc0e      	bgt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     7ca:	4a59      	ldr	r2, [pc, #356]	; (930 <_adc_set_config+0x4f4>)
     7cc:	4293      	cmp	r3, r2
     7ce:	db09      	blt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     7d4:	4a55      	ldr	r2, [pc, #340]	; (92c <_adc_set_config+0x4f0>)
     7d6:	4293      	cmp	r3, r2
     7d8:	dc04      	bgt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     7de:	4a54      	ldr	r2, [pc, #336]	; (930 <_adc_set_config+0x4f4>)
     7e0:	4293      	cmp	r3, r2
     7e2:	da01      	bge.n	7e8 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7e4:	2317      	movs	r3, #23
     7e6:	e09c      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	69db      	ldr	r3, [r3, #28]
     7ec:	4a51      	ldr	r2, [pc, #324]	; (934 <_adc_set_config+0x4f8>)
     7ee:	4293      	cmp	r3, r2
     7f0:	dc04      	bgt.n	7fc <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     7f6:	4a4f      	ldr	r2, [pc, #316]	; (934 <_adc_set_config+0x4f8>)
     7f8:	4293      	cmp	r3, r2
     7fa:	dd07      	ble.n	80c <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7fc:	2317      	movs	r3, #23
     7fe:	e090      	b.n	922 <_adc_set_config+0x4e6>
			break;
     800:	46c0      	nop			; (mov r8, r8)
     802:	e004      	b.n	80e <_adc_set_config+0x3d2>
			break;
     804:	46c0      	nop			; (mov r8, r8)
     806:	e002      	b.n	80e <_adc_set_config+0x3d2>
			break;
     808:	46c0      	nop			; (mov r8, r8)
     80a:	e000      	b.n	80e <_adc_set_config+0x3d2>
			}
			break;
     80c:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     80e:	69bb      	ldr	r3, [r7, #24]
     810:	895b      	ldrh	r3, [r3, #10]
     812:	b29a      	uxth	r2, r3
     814:	687b      	ldr	r3, [r7, #4]
     816:	8b1b      	ldrh	r3, [r3, #24]
     818:	4313      	orrs	r3, r2
     81a:	b29a      	uxth	r2, r3
     81c:	69bb      	ldr	r3, [r7, #24]
     81e:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     820:	46c0      	nop			; (mov r8, r8)
     822:	68bb      	ldr	r3, [r7, #8]
     824:	0018      	movs	r0, r3
     826:	4b44      	ldr	r3, [pc, #272]	; (938 <_adc_set_config+0x4fc>)
     828:	4798      	blx	r3
     82a:	1e03      	subs	r3, r0, #0
     82c:	d1f9      	bne.n	822 <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     82e:	687b      	ldr	r3, [r7, #4]
     830:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     832:	b29a      	uxth	r2, r3
     834:	69bb      	ldr	r3, [r7, #24]
     836:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     838:	46c0      	nop			; (mov r8, r8)
     83a:	68bb      	ldr	r3, [r7, #8]
     83c:	0018      	movs	r0, r3
     83e:	4b3e      	ldr	r3, [pc, #248]	; (938 <_adc_set_config+0x4fc>)
     840:	4798      	blx	r3
     842:	1e03      	subs	r3, r0, #0
     844:	d1f9      	bne.n	83a <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     846:	687b      	ldr	r3, [r7, #4]
     848:	6a1b      	ldr	r3, [r3, #32]
     84a:	b29a      	uxth	r2, r3
     84c:	69bb      	ldr	r3, [r7, #24]
     84e:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     850:	46c0      	nop			; (mov r8, r8)
     852:	68bb      	ldr	r3, [r7, #8]
     854:	0018      	movs	r0, r3
     856:	4b38      	ldr	r3, [pc, #224]	; (938 <_adc_set_config+0x4fc>)
     858:	4798      	blx	r3
     85a:	1e03      	subs	r3, r0, #0
     85c:	d1f9      	bne.n	852 <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     85e:	687b      	ldr	r3, [r7, #4]
     860:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     862:	687b      	ldr	r3, [r7, #4]
     864:	791b      	ldrb	r3, [r3, #4]
     866:	b29b      	uxth	r3, r3
			config->negative_input |
     868:	4313      	orrs	r3, r2
     86a:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     870:	46c0      	nop			; (mov r8, r8)
     872:	68bb      	ldr	r3, [r7, #8]
     874:	0018      	movs	r0, r3
     876:	4b30      	ldr	r3, [pc, #192]	; (938 <_adc_set_config+0x4fc>)
     878:	4798      	blx	r3
     87a:	1e03      	subs	r3, r0, #0
     87c:	d1f9      	bne.n	872 <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	222a      	movs	r2, #42	; 0x2a
     882:	5c9a      	ldrb	r2, [r3, r2]
     884:	69bb      	ldr	r3, [r7, #24]
     886:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     888:	69bb      	ldr	r3, [r7, #24]
     88a:	2207      	movs	r2, #7
     88c:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     88e:	687b      	ldr	r3, [r7, #4]
     890:	2224      	movs	r2, #36	; 0x24
     892:	5c9b      	ldrb	r3, [r3, r2]
     894:	2b00      	cmp	r3, #0
     896:	d02c      	beq.n	8f2 <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     898:	687b      	ldr	r3, [r7, #4]
     89a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     89c:	4a27      	ldr	r2, [pc, #156]	; (93c <_adc_set_config+0x500>)
     89e:	4293      	cmp	r3, r2
     8a0:	d901      	bls.n	8a6 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     8a2:	2317      	movs	r3, #23
     8a4:	e03d      	b.n	922 <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     8aa:	69bb      	ldr	r3, [r7, #24]
     8ac:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	68bb      	ldr	r3, [r7, #8]
     8b2:	0018      	movs	r0, r3
     8b4:	4b20      	ldr	r3, [pc, #128]	; (938 <_adc_set_config+0x4fc>)
     8b6:	4798      	blx	r3
     8b8:	1e03      	subs	r3, r0, #0
     8ba:	d1f9      	bne.n	8b0 <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	2228      	movs	r2, #40	; 0x28
     8c0:	5e9b      	ldrsh	r3, [r3, r2]
     8c2:	4a1f      	ldr	r2, [pc, #124]	; (940 <_adc_set_config+0x504>)
     8c4:	4293      	cmp	r3, r2
     8c6:	dc05      	bgt.n	8d4 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	2228      	movs	r2, #40	; 0x28
     8cc:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     8ce:	4a1d      	ldr	r2, [pc, #116]	; (944 <_adc_set_config+0x508>)
     8d0:	4293      	cmp	r3, r2
     8d2:	da01      	bge.n	8d8 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     8d4:	2317      	movs	r3, #23
     8d6:	e024      	b.n	922 <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2228      	movs	r2, #40	; 0x28
     8dc:	5e9b      	ldrsh	r3, [r3, r2]
     8de:	b29a      	uxth	r2, r3
     8e0:	69bb      	ldr	r3, [r7, #24]
     8e2:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     8e4:	46c0      	nop			; (mov r8, r8)
     8e6:	68bb      	ldr	r3, [r7, #8]
     8e8:	0018      	movs	r0, r3
     8ea:	4b13      	ldr	r3, [pc, #76]	; (938 <_adc_set_config+0x4fc>)
     8ec:	4798      	blx	r3
     8ee:	1e03      	subs	r3, r0, #0
     8f0:	d1f9      	bne.n	8e6 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     8f2:	4b15      	ldr	r3, [pc, #84]	; (948 <_adc_set_config+0x50c>)
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	2200      	movs	r2, #0
     8f8:	40d3      	lsrs	r3, r2
     8fa:	b29b      	uxth	r3, r3
     8fc:	021b      	lsls	r3, r3, #8
     8fe:	b29a      	uxth	r2, r3
     900:	23e0      	movs	r3, #224	; 0xe0
     902:	00db      	lsls	r3, r3, #3
     904:	4013      	ands	r3, r2
     906:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     908:	4b0f      	ldr	r3, [pc, #60]	; (948 <_adc_set_config+0x50c>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	2103      	movs	r1, #3
     90e:	40cb      	lsrs	r3, r1
     910:	b29b      	uxth	r3, r3
     912:	2107      	movs	r1, #7
     914:	400b      	ands	r3, r1
     916:	b29b      	uxth	r3, r3
			) |
     918:	4313      	orrs	r3, r2
     91a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     91c:	69bb      	ldr	r3, [r7, #24]
     91e:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     920:	2300      	movs	r3, #0
}
     922:	0018      	movs	r0, r3
     924:	46bd      	mov	sp, r7
     926:	b00a      	add	sp, #40	; 0x28
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	00007fff 	.word	0x00007fff
     930:	ffff8000 	.word	0xffff8000
     934:	0000ffff 	.word	0x0000ffff
     938:	000002a5 	.word	0x000002a5
     93c:	00000fff 	.word	0x00000fff
     940:	000007ff 	.word	0x000007ff
     944:	fffff800 	.word	0xfffff800
     948:	00806020 	.word	0x00806020

0000094c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     94c:	b590      	push	{r4, r7, lr}
     94e:	b087      	sub	sp, #28
     950:	af00      	add	r7, sp, #0
     952:	60f8      	str	r0, [r7, #12]
     954:	60b9      	str	r1, [r7, #8]
     956:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     958:	2317      	movs	r3, #23
     95a:	18fc      	adds	r4, r7, r3
     95c:	68bb      	ldr	r3, [r7, #8]
     95e:	0018      	movs	r0, r3
     960:	4b1d      	ldr	r3, [pc, #116]	; (9d8 <adc_init+0x8c>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	68ba      	ldr	r2, [r7, #8]
     96c:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     96e:	2108      	movs	r1, #8
     970:	2003      	movs	r0, #3
     972:	4b1a      	ldr	r3, [pc, #104]	; (9dc <adc_init+0x90>)
     974:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     976:	68bb      	ldr	r3, [r7, #8]
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	b2db      	uxtb	r3, r3
     97c:	001a      	movs	r2, r3
     97e:	2301      	movs	r3, #1
     980:	4013      	ands	r3, r2
     982:	d001      	beq.n	988 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     984:	2305      	movs	r3, #5
     986:	e023      	b.n	9d0 <adc_init+0x84>
	}

	while (adc_is_syncing(module_inst)) {
     988:	46c0      	nop			; (mov r8, r8)
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	0018      	movs	r0, r3
     98e:	4b14      	ldr	r3, [pc, #80]	; (9e0 <adc_init+0x94>)
     990:	4798      	blx	r3
     992:	1e03      	subs	r3, r0, #0
     994:	d1f9      	bne.n	98a <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     996:	68bb      	ldr	r3, [r7, #8]
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	b2db      	uxtb	r3, r3
     99c:	001a      	movs	r2, r3
     99e:	2302      	movs	r3, #2
     9a0:	4013      	ands	r3, r2
     9a2:	d001      	beq.n	9a8 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     9a4:	231c      	movs	r3, #28
     9a6:	e013      	b.n	9d0 <adc_init+0x84>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	785a      	ldrb	r2, [r3, #1]
     9ac:	68fb      	ldr	r3, [r7, #12]
     9ae:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	791b      	ldrb	r3, [r3, #4]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d102      	bne.n	9be <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     9b8:	2001      	movs	r0, #1
     9ba:	4b0a      	ldr	r3, [pc, #40]	; (9e4 <adc_init+0x98>)
     9bc:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     9be:	687a      	ldr	r2, [r7, #4]
     9c0:	68f9      	ldr	r1, [r7, #12]
     9c2:	2317      	movs	r3, #23
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	0018      	movs	r0, r3
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <adc_init+0x9c>)
     9cc:	4798      	blx	r3
     9ce:	0003      	movs	r3, r0
}
     9d0:	0018      	movs	r0, r3
     9d2:	46bd      	mov	sp, r7
     9d4:	b007      	add	sp, #28
     9d6:	bd90      	pop	{r4, r7, pc}
     9d8:	000002cd 	.word	0x000002cd
     9dc:	000001c1 	.word	0x000001c1
     9e0:	000002a5 	.word	0x000002a5
     9e4:	00000265 	.word	0x00000265
     9e8:	0000043d 	.word	0x0000043d

000009ec <system_apb_clock_set_mask>:
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	0002      	movs	r2, r0
     9f4:	6039      	str	r1, [r7, #0]
     9f6:	1dfb      	adds	r3, r7, #7
     9f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     9fa:	1dfb      	adds	r3, r7, #7
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	2b04      	cmp	r3, #4
     a00:	d827      	bhi.n	a52 <system_apb_clock_set_mask+0x66>
     a02:	009a      	lsls	r2, r3, #2
     a04:	4b16      	ldr	r3, [pc, #88]	; (a60 <system_apb_clock_set_mask+0x74>)
     a06:	18d3      	adds	r3, r2, r3
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     a0c:	4b15      	ldr	r3, [pc, #84]	; (a64 <system_apb_clock_set_mask+0x78>)
     a0e:	4a15      	ldr	r2, [pc, #84]	; (a64 <system_apb_clock_set_mask+0x78>)
     a10:	6951      	ldr	r1, [r2, #20]
     a12:	683a      	ldr	r2, [r7, #0]
     a14:	430a      	orrs	r2, r1
     a16:	615a      	str	r2, [r3, #20]
			break;
     a18:	e01d      	b.n	a56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     a1a:	4b12      	ldr	r3, [pc, #72]	; (a64 <system_apb_clock_set_mask+0x78>)
     a1c:	4a11      	ldr	r2, [pc, #68]	; (a64 <system_apb_clock_set_mask+0x78>)
     a1e:	6991      	ldr	r1, [r2, #24]
     a20:	683a      	ldr	r2, [r7, #0]
     a22:	430a      	orrs	r2, r1
     a24:	619a      	str	r2, [r3, #24]
			break;
     a26:	e016      	b.n	a56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     a28:	4b0e      	ldr	r3, [pc, #56]	; (a64 <system_apb_clock_set_mask+0x78>)
     a2a:	4a0e      	ldr	r2, [pc, #56]	; (a64 <system_apb_clock_set_mask+0x78>)
     a2c:	69d1      	ldr	r1, [r2, #28]
     a2e:	683a      	ldr	r2, [r7, #0]
     a30:	430a      	orrs	r2, r1
     a32:	61da      	str	r2, [r3, #28]
			break;
     a34:	e00f      	b.n	a56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     a36:	4b0b      	ldr	r3, [pc, #44]	; (a64 <system_apb_clock_set_mask+0x78>)
     a38:	4a0a      	ldr	r2, [pc, #40]	; (a64 <system_apb_clock_set_mask+0x78>)
     a3a:	6a11      	ldr	r1, [r2, #32]
     a3c:	683a      	ldr	r2, [r7, #0]
     a3e:	430a      	orrs	r2, r1
     a40:	621a      	str	r2, [r3, #32]
			break;
     a42:	e008      	b.n	a56 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     a44:	4b07      	ldr	r3, [pc, #28]	; (a64 <system_apb_clock_set_mask+0x78>)
     a46:	4a07      	ldr	r2, [pc, #28]	; (a64 <system_apb_clock_set_mask+0x78>)
     a48:	6a51      	ldr	r1, [r2, #36]	; 0x24
     a4a:	683a      	ldr	r2, [r7, #0]
     a4c:	430a      	orrs	r2, r1
     a4e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     a50:	e001      	b.n	a56 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     a52:	2317      	movs	r3, #23
     a54:	e000      	b.n	a58 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     a56:	2300      	movs	r3, #0
}
     a58:	0018      	movs	r0, r3
     a5a:	46bd      	mov	sp, r7
     a5c:	b002      	add	sp, #8
     a5e:	bd80      	pop	{r7, pc}
     a60:	00004668 	.word	0x00004668
     a64:	40000400 	.word	0x40000400

00000a68 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     a68:	b580      	push	{r7, lr}
     a6a:	b084      	sub	sp, #16
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	681b      	ldr	r3, [r3, #0]
     a74:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	691b      	ldr	r3, [r3, #16]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d001      	beq.n	a82 <rtc_count_is_syncing+0x1a>
		return true;
     a7e:	2301      	movs	r3, #1
     a80:	e000      	b.n	a84 <rtc_count_is_syncing+0x1c>
	}

	return false;
     a82:	2300      	movs	r3, #0
}
     a84:	0018      	movs	r0, r3
     a86:	46bd      	mov	sp, r7
     a88:	b004      	add	sp, #16
     a8a:	bd80      	pop	{r7, pc}

00000a8c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	b084      	sub	sp, #16
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	0018      	movs	r0, r3
     aa0:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <rtc_count_enable+0x44>)
     aa2:	4798      	blx	r3
     aa4:	1e03      	subs	r3, r0, #0
     aa6:	d1f9      	bne.n	a9c <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     aa8:	68fb      	ldr	r3, [r7, #12]
     aaa:	881b      	ldrh	r3, [r3, #0]
     aac:	b29b      	uxth	r3, r3
     aae:	2202      	movs	r2, #2
     ab0:	4313      	orrs	r3, r2
     ab2:	b29a      	uxth	r2, r3
     ab4:	68fb      	ldr	r3, [r7, #12]
     ab6:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     ab8:	46c0      	nop			; (mov r8, r8)
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	0018      	movs	r0, r3
     abe:	4b04      	ldr	r3, [pc, #16]	; (ad0 <rtc_count_enable+0x44>)
     ac0:	4798      	blx	r3
     ac2:	1e03      	subs	r3, r0, #0
     ac4:	d1f9      	bne.n	aba <rtc_count_enable+0x2e>
		/* Wait for synchronization */
	}
}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	46bd      	mov	sp, r7
     aca:	b004      	add	sp, #16
     acc:	bd80      	pop	{r7, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00000a69 	.word	0x00000a69

00000ad4 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b084      	sub	sp, #16
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	681b      	ldr	r3, [r3, #0]
     ae0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	0018      	movs	r0, r3
     ae8:	4b0e      	ldr	r3, [pc, #56]	; (b24 <rtc_count_disable+0x50>)
     aea:	4798      	blx	r3
     aec:	1e03      	subs	r3, r0, #0
     aee:	d1f9      	bne.n	ae4 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     af0:	68fb      	ldr	r3, [r7, #12]
     af2:	4a0d      	ldr	r2, [pc, #52]	; (b28 <rtc_count_disable+0x54>)
     af4:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	4a0b      	ldr	r2, [pc, #44]	; (b28 <rtc_count_disable+0x54>)
     afa:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     afc:	68fb      	ldr	r3, [r7, #12]
     afe:	881b      	ldrh	r3, [r3, #0]
     b00:	b29b      	uxth	r3, r3
     b02:	2202      	movs	r2, #2
     b04:	4393      	bics	r3, r2
     b06:	b29a      	uxth	r2, r3
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	0018      	movs	r0, r3
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <rtc_count_disable+0x50>)
     b14:	4798      	blx	r3
     b16:	1e03      	subs	r3, r0, #0
     b18:	d1f9      	bne.n	b0e <rtc_count_disable+0x3a>
		/* Wait for synchronization */
	}
}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	46bd      	mov	sp, r7
     b1e:	b004      	add	sp, #16
     b20:	bd80      	pop	{r7, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	00000a69 	.word	0x00000a69
     b28:	ffff81ff 	.word	0xffff81ff

00000b2c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	b084      	sub	sp, #16
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     b3a:	687b      	ldr	r3, [r7, #4]
     b3c:	0018      	movs	r0, r3
     b3e:	4b0e      	ldr	r3, [pc, #56]	; (b78 <rtc_count_reset+0x4c>)
     b40:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	0018      	movs	r0, r3
     b48:	4b0c      	ldr	r3, [pc, #48]	; (b7c <rtc_count_reset+0x50>)
     b4a:	4798      	blx	r3
     b4c:	1e03      	subs	r3, r0, #0
     b4e:	d1f9      	bne.n	b44 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     b50:	68fb      	ldr	r3, [r7, #12]
     b52:	881b      	ldrh	r3, [r3, #0]
     b54:	b29b      	uxth	r3, r3
     b56:	2201      	movs	r2, #1
     b58:	4313      	orrs	r3, r2
     b5a:	b29a      	uxth	r2, r3
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
     b60:	46c0      	nop			; (mov r8, r8)
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	0018      	movs	r0, r3
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <rtc_count_reset+0x50>)
     b68:	4798      	blx	r3
     b6a:	1e03      	subs	r3, r0, #0
     b6c:	d1f9      	bne.n	b62 <rtc_count_reset+0x36>
		/* Wait for synchronization */
	}
}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	46bd      	mov	sp, r7
     b72:	b004      	add	sp, #16
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00000ad5 	.word	0x00000ad5
     b7c:	00000a69 	.word	0x00000a69

00000b80 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     b80:	b580      	push	{r7, lr}
     b82:	b084      	sub	sp, #16
     b84:	af00      	add	r7, sp, #0
     b86:	6078      	str	r0, [r7, #4]
     b88:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30 || (SAMR34) || (SAMR35)
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30) || (SAMR34) || (SAMR35)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	791b      	ldrb	r3, [r3, #4]
     b94:	b29b      	uxth	r3, r3
     b96:	03db      	lsls	r3, r3, #15
     b98:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	881b      	ldrh	r3, [r3, #0]
     b9e:	4313      	orrs	r3, r2
     ba0:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     ba2:	68bb      	ldr	r3, [r7, #8]
     ba4:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	789b      	ldrb	r3, [r3, #2]
     baa:	2b00      	cmp	r3, #0
     bac:	d032      	beq.n	c14 <_rtc_count_set_config+0x94>
     bae:	2b01      	cmp	r3, #1
     bb0:	d15e      	bne.n	c70 <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     bb2:	68bb      	ldr	r3, [r7, #8]
     bb4:	881b      	ldrh	r3, [r3, #0]
     bb6:	b29a      	uxth	r2, r3
     bb8:	68bb      	ldr	r3, [r7, #8]
     bba:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     bbc:	683b      	ldr	r3, [r7, #0]
     bbe:	78db      	ldrb	r3, [r3, #3]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d007      	beq.n	bd4 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     bc4:	68bb      	ldr	r3, [r7, #8]
     bc6:	881b      	ldrh	r3, [r3, #0]
     bc8:	b29b      	uxth	r3, r3
     bca:	2280      	movs	r2, #128	; 0x80
     bcc:	4313      	orrs	r3, r2
     bce:	b29a      	uxth	r2, r3
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     bd4:	230f      	movs	r3, #15
     bd6:	18fb      	adds	r3, r7, r3
     bd8:	2200      	movs	r2, #0
     bda:	701a      	strb	r2, [r3, #0]
     bdc:	e014      	b.n	c08 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
     bde:	230f      	movs	r3, #15
     be0:	18fb      	adds	r3, r7, r3
     be2:	781a      	ldrb	r2, [r3, #0]
     be4:	683b      	ldr	r3, [r7, #0]
     be6:	3202      	adds	r2, #2
     be8:	0092      	lsls	r2, r2, #2
     bea:	58d1      	ldr	r1, [r2, r3]
     bec:	230f      	movs	r3, #15
     bee:	18fb      	adds	r3, r7, r3
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	0018      	movs	r0, r3
     bf6:	4b22      	ldr	r3, [pc, #136]	; (c80 <_rtc_count_set_config+0x100>)
     bf8:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
     bfa:	230f      	movs	r3, #15
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	230f      	movs	r3, #15
     c02:	18fb      	adds	r3, r7, r3
     c04:	3201      	adds	r2, #1
     c06:	701a      	strb	r2, [r3, #0]
     c08:	230f      	movs	r3, #15
     c0a:	18fb      	adds	r3, r7, r3
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	2b00      	cmp	r3, #0
     c10:	d0e5      	beq.n	bde <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
     c12:	e02f      	b.n	c74 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     c14:	68bb      	ldr	r3, [r7, #8]
     c16:	881b      	ldrh	r3, [r3, #0]
     c18:	b29b      	uxth	r3, r3
     c1a:	2204      	movs	r2, #4
     c1c:	4313      	orrs	r3, r2
     c1e:	b29a      	uxth	r2, r3
     c20:	68bb      	ldr	r3, [r7, #8]
     c22:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     c24:	683b      	ldr	r3, [r7, #0]
     c26:	78db      	ldrb	r3, [r3, #3]
     c28:	2b00      	cmp	r3, #0
     c2a:	d001      	beq.n	c30 <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     c2c:	2317      	movs	r3, #23
     c2e:	e022      	b.n	c76 <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     c30:	230e      	movs	r3, #14
     c32:	18fb      	adds	r3, r7, r3
     c34:	2200      	movs	r2, #0
     c36:	701a      	strb	r2, [r3, #0]
     c38:	e014      	b.n	c64 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
     c3a:	230e      	movs	r3, #14
     c3c:	18fb      	adds	r3, r7, r3
     c3e:	781a      	ldrb	r2, [r3, #0]
     c40:	683b      	ldr	r3, [r7, #0]
     c42:	3202      	adds	r2, #2
     c44:	0092      	lsls	r2, r2, #2
     c46:	58d1      	ldr	r1, [r2, r3]
     c48:	230e      	movs	r3, #14
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	781a      	ldrb	r2, [r3, #0]
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	0018      	movs	r0, r3
     c52:	4b0b      	ldr	r3, [pc, #44]	; (c80 <_rtc_count_set_config+0x100>)
     c54:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     c56:	230e      	movs	r3, #14
     c58:	18fb      	adds	r3, r7, r3
     c5a:	781a      	ldrb	r2, [r3, #0]
     c5c:	230e      	movs	r3, #14
     c5e:	18fb      	adds	r3, r7, r3
     c60:	3201      	adds	r2, #1
     c62:	701a      	strb	r2, [r3, #0]
     c64:	230e      	movs	r3, #14
     c66:	18fb      	adds	r3, r7, r3
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2b01      	cmp	r3, #1
     c6c:	d9e5      	bls.n	c3a <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
     c6e:	e001      	b.n	c74 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     c70:	2317      	movs	r3, #23
     c72:	e000      	b.n	c76 <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     c74:	2300      	movs	r3, #0
}
     c76:	0018      	movs	r0, r3
     c78:	46bd      	mov	sp, r7
     c7a:	b004      	add	sp, #16
     c7c:	bd80      	pop	{r7, pc}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	00000ce9 	.word	0x00000ce9

00000c84 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     c84:	b580      	push	{r7, lr}
     c86:	b084      	sub	sp, #16
     c88:	af00      	add	r7, sp, #0
     c8a:	60f8      	str	r0, [r7, #12]
     c8c:	60b9      	str	r1, [r7, #8]
     c8e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	68ba      	ldr	r2, [r7, #8]
     c94:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
     c96:	2380      	movs	r3, #128	; 0x80
     c98:	005b      	lsls	r3, r3, #1
     c9a:	0019      	movs	r1, r3
     c9c:	2000      	movs	r0, #0
     c9e:	4b0d      	ldr	r3, [pc, #52]	; (cd4 <rtc_count_init+0x50>)
     ca0:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     ca2:	4b0d      	ldr	r3, [pc, #52]	; (cd8 <rtc_count_init+0x54>)
     ca4:	2200      	movs	r2, #0
     ca6:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     ca8:	68fb      	ldr	r3, [r7, #12]
     caa:	0018      	movs	r0, r3
     cac:	4b0b      	ldr	r3, [pc, #44]	; (cdc <rtc_count_init+0x58>)
     cae:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	789a      	ldrb	r2, [r3, #2]
     cb4:	68fb      	ldr	r3, [r7, #12]
     cb6:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     cb8:	4b09      	ldr	r3, [pc, #36]	; (ce0 <rtc_count_init+0x5c>)
     cba:	68fa      	ldr	r2, [r7, #12]
     cbc:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     cbe:	687a      	ldr	r2, [r7, #4]
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b07      	ldr	r3, [pc, #28]	; (ce4 <rtc_count_init+0x60>)
     cc8:	4798      	blx	r3
     cca:	0003      	movs	r3, r0
}
     ccc:	0018      	movs	r0, r3
     cce:	46bd      	mov	sp, r7
     cd0:	b004      	add	sp, #16
     cd2:	bd80      	pop	{r7, pc}
     cd4:	000009ed 	.word	0x000009ed
     cd8:	40001000 	.word	0x40001000
     cdc:	00000b2d 	.word	0x00000b2d
     ce0:	20000028 	.word	0x20000028
     ce4:	00000b81 	.word	0x00000b81

00000ce8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b086      	sub	sp, #24
     cec:	af00      	add	r7, sp, #0
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     cfc:	46c0      	nop			; (mov r8, r8)
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	0018      	movs	r0, r3
     d02:	4b1d      	ldr	r3, [pc, #116]	; (d78 <rtc_count_set_compare+0x90>)
     d04:	4798      	blx	r3
     d06:	1e03      	subs	r3, r0, #0
     d08:	d1f9      	bne.n	cfe <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     d0a:	68fb      	ldr	r3, [r7, #12]
     d0c:	791b      	ldrb	r3, [r3, #4]
     d0e:	2b00      	cmp	r3, #0
     d10:	d00f      	beq.n	d32 <rtc_count_set_compare+0x4a>
     d12:	2b01      	cmp	r3, #1
     d14:	d122      	bne.n	d5c <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     d16:	1dfb      	adds	r3, r7, #7
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	2b01      	cmp	r3, #1
     d1c:	d901      	bls.n	d22 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     d1e:	2317      	movs	r3, #23
     d20:	e026      	b.n	d70 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     d22:	1dfb      	adds	r3, r7, #7
     d24:	781a      	ldrb	r2, [r3, #0]
     d26:	697b      	ldr	r3, [r7, #20]
     d28:	3208      	adds	r2, #8
     d2a:	0092      	lsls	r2, r2, #2
     d2c:	68b9      	ldr	r1, [r7, #8]
     d2e:	50d1      	str	r1, [r2, r3]

			break;
     d30:	e016      	b.n	d60 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     d32:	1dfb      	adds	r3, r7, #7
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	2b02      	cmp	r3, #2
     d38:	d901      	bls.n	d3e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     d3a:	2317      	movs	r3, #23
     d3c:	e018      	b.n	d70 <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     d3e:	68bb      	ldr	r3, [r7, #8]
     d40:	4a0e      	ldr	r2, [pc, #56]	; (d7c <rtc_count_set_compare+0x94>)
     d42:	4293      	cmp	r3, r2
     d44:	d901      	bls.n	d4a <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     d46:	2317      	movs	r3, #23
     d48:	e012      	b.n	d70 <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     d4a:	1dfb      	adds	r3, r7, #7
     d4c:	781a      	ldrb	r2, [r3, #0]
     d4e:	68bb      	ldr	r3, [r7, #8]
     d50:	b299      	uxth	r1, r3
     d52:	697b      	ldr	r3, [r7, #20]
     d54:	3210      	adds	r2, #16
     d56:	0052      	lsls	r2, r2, #1
     d58:	52d1      	strh	r1, [r2, r3]

			break;
     d5a:	e001      	b.n	d60 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     d5c:	231a      	movs	r3, #26
     d5e:	e007      	b.n	d70 <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
     d60:	46c0      	nop			; (mov r8, r8)
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	0018      	movs	r0, r3
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <rtc_count_set_compare+0x90>)
     d68:	4798      	blx	r3
     d6a:	1e03      	subs	r3, r0, #0
     d6c:	d1f9      	bne.n	d62 <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     d6e:	2300      	movs	r3, #0
}
     d70:	0018      	movs	r0, r3
     d72:	46bd      	mov	sp, r7
     d74:	b006      	add	sp, #24
     d76:	bd80      	pop	{r7, pc}
     d78:	00000a69 	.word	0x00000a69
     d7c:	0000ffff 	.word	0x0000ffff

00000d80 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     d80:	b580      	push	{r7, lr}
     d82:	b084      	sub	sp, #16
     d84:	af00      	add	r7, sp, #0
     d86:	6078      	str	r0, [r7, #4]
     d88:	000a      	movs	r2, r1
     d8a:	1cbb      	adds	r3, r7, #2
     d8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	791b      	ldrb	r3, [r3, #4]
     d98:	2b00      	cmp	r3, #0
     d9a:	d001      	beq.n	da0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     d9c:	2315      	movs	r3, #21
     d9e:	e012      	b.n	dc6 <rtc_count_set_period+0x46>
	}

	while (rtc_count_is_syncing(module)) {
     da0:	46c0      	nop			; (mov r8, r8)
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	0018      	movs	r0, r3
     da6:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <rtc_count_set_period+0x50>)
     da8:	4798      	blx	r3
     daa:	1e03      	subs	r3, r0, #0
     dac:	d1f9      	bne.n	da2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	1cba      	adds	r2, r7, #2
     db2:	8812      	ldrh	r2, [r2, #0]
     db4:	839a      	strh	r2, [r3, #28]

	while (rtc_count_is_syncing(module)) {
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	0018      	movs	r0, r3
     dbc:	4b04      	ldr	r3, [pc, #16]	; (dd0 <rtc_count_set_period+0x50>)
     dbe:	4798      	blx	r3
     dc0:	1e03      	subs	r3, r0, #0
     dc2:	d1f9      	bne.n	db8 <rtc_count_set_period+0x38>
		/* Wait for synchronization */
	}

	return STATUS_OK;
     dc4:	2300      	movs	r3, #0
}
     dc6:	0018      	movs	r0, r3
     dc8:	46bd      	mov	sp, r7
     dca:	b004      	add	sp, #16
     dcc:	bd80      	pop	{r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00000a69 	.word	0x00000a69

00000dd4 <rtc_count_is_compare_match>:
 * \param[in] comp_index  Index of compare to check current flag
 */
bool rtc_count_is_compare_match(
		struct rtc_module *const module,
		const enum rtc_count_compare comp_index)
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b084      	sub	sp, #16
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
     ddc:	000a      	movs	r2, r1
     dde:	1cfb      	adds	r3, r7, #3
     de0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	60fb      	str	r3, [r7, #12]

	/* Check sanity. */
	switch (module->mode) {
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	791b      	ldrb	r3, [r3, #4]
     dec:	2b00      	cmp	r3, #0
     dee:	d007      	beq.n	e00 <rtc_count_is_compare_match+0x2c>
     df0:	2b01      	cmp	r3, #1
     df2:	d10b      	bne.n	e0c <rtc_count_is_compare_match+0x38>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_COMP32_NUM) {
     df4:	1cfb      	adds	r3, r7, #3
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	2b01      	cmp	r3, #1
     dfa:	d909      	bls.n	e10 <rtc_count_is_compare_match+0x3c>
				return false;
     dfc:	2300      	movs	r3, #0
     dfe:	e01c      	b.n	e3a <rtc_count_is_compare_match+0x66>

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
     e00:	1cfb      	adds	r3, r7, #3
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	2b02      	cmp	r3, #2
     e06:	d905      	bls.n	e14 <rtc_count_is_compare_match+0x40>
				return false;
     e08:	2300      	movs	r3, #0
     e0a:	e016      	b.n	e3a <rtc_count_is_compare_match+0x66>

			break;

		default:
			Assert(false);
			return false;
     e0c:	2300      	movs	r3, #0
     e0e:	e014      	b.n	e3a <rtc_count_is_compare_match+0x66>
			break;
     e10:	46c0      	nop			; (mov r8, r8)
     e12:	e000      	b.n	e16 <rtc_count_is_compare_match+0x42>
			break;
     e14:	46c0      	nop			; (mov r8, r8)
	}

	/* Set status of INTFLAG as return argument. */
	return (rtc_module->MODE0.INTFLAG.reg & RTC_MODE1_INTFLAG_CMP(1 << comp_index)) ? true : false;
     e16:	68fb      	ldr	r3, [r7, #12]
     e18:	899b      	ldrh	r3, [r3, #12]
     e1a:	b29b      	uxth	r3, r3
     e1c:	0019      	movs	r1, r3
     e1e:	1cfb      	adds	r3, r7, #3
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	2201      	movs	r2, #1
     e24:	409a      	lsls	r2, r3
     e26:	0013      	movs	r3, r2
     e28:	021b      	lsls	r3, r3, #8
     e2a:	400b      	ands	r3, r1
     e2c:	001a      	movs	r2, r3
     e2e:	23c0      	movs	r3, #192	; 0xc0
     e30:	009b      	lsls	r3, r3, #2
     e32:	4013      	ands	r3, r2
     e34:	1e5a      	subs	r2, r3, #1
     e36:	4193      	sbcs	r3, r2
     e38:	b2db      	uxtb	r3, r3
}
     e3a:	0018      	movs	r0, r3
     e3c:	46bd      	mov	sp, r7
     e3e:	b004      	add	sp, #16
     e40:	bd80      	pop	{r7, pc}

00000e42 <rtc_count_clear_compare_match>:
 * \retval STATUS_ERR_BAD_FORMAT   If the module was not initialized in a mode
 */
enum status_code rtc_count_clear_compare_match(
		struct rtc_module *const module,
		const enum rtc_count_compare comp_index)
{
     e42:	b580      	push	{r7, lr}
     e44:	b084      	sub	sp, #16
     e46:	af00      	add	r7, sp, #0
     e48:	6078      	str	r0, [r7, #4]
     e4a:	000a      	movs	r2, r1
     e4c:	1cfb      	adds	r3, r7, #3
     e4e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	60fb      	str	r3, [r7, #12]

	/* Check sanity. */
	switch (module->mode){
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	791b      	ldrb	r3, [r3, #4]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d007      	beq.n	e6e <rtc_count_clear_compare_match+0x2c>
     e5e:	2b01      	cmp	r3, #1
     e60:	d10b      	bne.n	e7a <rtc_count_clear_compare_match+0x38>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (comp_index > RTC_COMP32_NUM) {
     e62:	1cfb      	adds	r3, r7, #3
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	2b01      	cmp	r3, #1
     e68:	d909      	bls.n	e7e <rtc_count_clear_compare_match+0x3c>
				return STATUS_ERR_INVALID_ARG;
     e6a:	2317      	movs	r3, #23
     e6c:	e019      	b.n	ea2 <rtc_count_clear_compare_match+0x60>

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (comp_index > RTC_NUM_OF_COMP16) {
     e6e:	1cfb      	adds	r3, r7, #3
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	2b02      	cmp	r3, #2
     e74:	d905      	bls.n	e82 <rtc_count_clear_compare_match+0x40>
				return STATUS_ERR_INVALID_ARG;
     e76:	2317      	movs	r3, #23
     e78:	e013      	b.n	ea2 <rtc_count_clear_compare_match+0x60>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     e7a:	231a      	movs	r3, #26
     e7c:	e011      	b.n	ea2 <rtc_count_clear_compare_match+0x60>
			break;
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	e000      	b.n	e84 <rtc_count_clear_compare_match+0x42>
			break;
     e82:	46c0      	nop			; (mov r8, r8)
	}

	/* Clear INTFLAG. */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << comp_index);
     e84:	1cfb      	adds	r3, r7, #3
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2201      	movs	r2, #1
     e8a:	409a      	lsls	r2, r3
     e8c:	0013      	movs	r3, r2
     e8e:	b29b      	uxth	r3, r3
     e90:	021b      	lsls	r3, r3, #8
     e92:	b29a      	uxth	r2, r3
     e94:	23c0      	movs	r3, #192	; 0xc0
     e96:	009b      	lsls	r3, r3, #2
     e98:	4013      	ands	r3, r2
     e9a:	b29a      	uxth	r2, r3
     e9c:	68fb      	ldr	r3, [r7, #12]
     e9e:	819a      	strh	r2, [r3, #12]

	return STATUS_OK;
     ea0:	2300      	movs	r3, #0
}
     ea2:	0018      	movs	r0, r3
     ea4:	46bd      	mov	sp, r7
     ea6:	b004      	add	sp, #16
     ea8:	bd80      	pop	{r7, pc}
	...

00000eac <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     eac:	b580      	push	{r7, lr}
     eae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     eb0:	4b02      	ldr	r3, [pc, #8]	; (ebc <system_interrupt_enter_critical_section+0x10>)
     eb2:	4798      	blx	r3
}
     eb4:	46c0      	nop			; (mov r8, r8)
     eb6:	46bd      	mov	sp, r7
     eb8:	bd80      	pop	{r7, pc}
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	00000115 	.word	0x00000115

00000ec0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     ec4:	4b02      	ldr	r3, [pc, #8]	; (ed0 <system_interrupt_leave_critical_section+0x10>)
     ec6:	4798      	blx	r3
}
     ec8:	46c0      	nop			; (mov r8, r8)
     eca:	46bd      	mov	sp, r7
     ecc:	bd80      	pop	{r7, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	00000169 	.word	0x00000169

00000ed4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	b082      	sub	sp, #8
     ed8:	af00      	add	r7, sp, #0
     eda:	0002      	movs	r2, r0
     edc:	6039      	str	r1, [r7, #0]
     ede:	1dfb      	adds	r3, r7, #7
     ee0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	0018      	movs	r0, r3
     ee8:	4b08      	ldr	r3, [pc, #32]	; (f0c <system_gclk_chan_set_config+0x38>)
     eea:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     eec:	4908      	ldr	r1, [pc, #32]	; (f10 <system_gclk_chan_set_config+0x3c>)
     eee:	1dfb      	adds	r3, r7, #7
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	683a      	ldr	r2, [r7, #0]
     ef4:	7812      	ldrb	r2, [r2, #0]
     ef6:	0010      	movs	r0, r2
     ef8:	220f      	movs	r2, #15
     efa:	4002      	ands	r2, r0
     efc:	3320      	adds	r3, #32
     efe:	009b      	lsls	r3, r3, #2
     f00:	505a      	str	r2, [r3, r1]


}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	46bd      	mov	sp, r7
     f06:	b002      	add	sp, #8
     f08:	bd80      	pop	{r7, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	00000f6d 	.word	0x00000f6d
     f10:	40001800 	.word	0x40001800

00000f14 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f14:	b580      	push	{r7, lr}
     f16:	b082      	sub	sp, #8
     f18:	af00      	add	r7, sp, #0
     f1a:	0002      	movs	r2, r0
     f1c:	1dfb      	adds	r3, r7, #7
     f1e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
     f20:	4b0f      	ldr	r3, [pc, #60]	; (f60 <system_gclk_chan_enable+0x4c>)
     f22:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     f24:	490f      	ldr	r1, [pc, #60]	; (f64 <system_gclk_chan_enable+0x50>)
     f26:	1dfb      	adds	r3, r7, #7
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	480e      	ldr	r0, [pc, #56]	; (f64 <system_gclk_chan_enable+0x50>)
     f2c:	1dfa      	adds	r2, r7, #7
     f2e:	7812      	ldrb	r2, [r2, #0]
     f30:	3220      	adds	r2, #32
     f32:	0092      	lsls	r2, r2, #2
     f34:	5812      	ldr	r2, [r2, r0]
     f36:	2040      	movs	r0, #64	; 0x40
     f38:	4302      	orrs	r2, r0
     f3a:	3320      	adds	r3, #32
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     f40:	46c0      	nop			; (mov r8, r8)
     f42:	4a08      	ldr	r2, [pc, #32]	; (f64 <system_gclk_chan_enable+0x50>)
     f44:	1dfb      	adds	r3, r7, #7
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	3320      	adds	r3, #32
     f4a:	009b      	lsls	r3, r3, #2
     f4c:	589b      	ldr	r3, [r3, r2]
     f4e:	2240      	movs	r2, #64	; 0x40
     f50:	4013      	ands	r3, r2
     f52:	d0f6      	beq.n	f42 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
     f54:	4b04      	ldr	r3, [pc, #16]	; (f68 <system_gclk_chan_enable+0x54>)
     f56:	4798      	blx	r3
}
     f58:	46c0      	nop			; (mov r8, r8)
     f5a:	46bd      	mov	sp, r7
     f5c:	b002      	add	sp, #8
     f5e:	bd80      	pop	{r7, pc}
     f60:	00000ead 	.word	0x00000ead
     f64:	40001800 	.word	0x40001800
     f68:	00000ec1 	.word	0x00000ec1

00000f6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f6c:	b580      	push	{r7, lr}
     f6e:	b082      	sub	sp, #8
     f70:	af00      	add	r7, sp, #0
     f72:	0002      	movs	r2, r0
     f74:	1dfb      	adds	r3, r7, #7
     f76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
     f78:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <system_gclk_chan_disable+0x4c>)
     f7a:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     f7c:	490f      	ldr	r1, [pc, #60]	; (fbc <system_gclk_chan_disable+0x50>)
     f7e:	1dfb      	adds	r3, r7, #7
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	480e      	ldr	r0, [pc, #56]	; (fbc <system_gclk_chan_disable+0x50>)
     f84:	1dfa      	adds	r2, r7, #7
     f86:	7812      	ldrb	r2, [r2, #0]
     f88:	3220      	adds	r2, #32
     f8a:	0092      	lsls	r2, r2, #2
     f8c:	5812      	ldr	r2, [r2, r0]
     f8e:	2040      	movs	r0, #64	; 0x40
     f90:	4382      	bics	r2, r0
     f92:	3320      	adds	r3, #32
     f94:	009b      	lsls	r3, r3, #2
     f96:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     f98:	46c0      	nop			; (mov r8, r8)
     f9a:	4a08      	ldr	r2, [pc, #32]	; (fbc <system_gclk_chan_disable+0x50>)
     f9c:	1dfb      	adds	r3, r7, #7
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	3320      	adds	r3, #32
     fa2:	009b      	lsls	r3, r3, #2
     fa4:	589b      	ldr	r3, [r3, r2]
     fa6:	2240      	movs	r2, #64	; 0x40
     fa8:	4013      	ands	r3, r2
     faa:	d1f6      	bne.n	f9a <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
     fac:	4b04      	ldr	r3, [pc, #16]	; (fc0 <system_gclk_chan_disable+0x54>)
     fae:	4798      	blx	r3
}
     fb0:	46c0      	nop			; (mov r8, r8)
     fb2:	46bd      	mov	sp, r7
     fb4:	b002      	add	sp, #8
     fb6:	bd80      	pop	{r7, pc}
     fb8:	00000ead 	.word	0x00000ead
     fbc:	40001800 	.word	0x40001800
     fc0:	00000ec1 	.word	0x00000ec1

00000fc4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b084      	sub	sp, #16
     fc8:	af00      	add	r7, sp, #0
     fca:	0002      	movs	r2, r0
     fcc:	1dfb      	adds	r3, r7, #7
     fce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     fd0:	230f      	movs	r3, #15
     fd2:	18fb      	adds	r3, r7, r3
     fd4:	1dfa      	adds	r2, r7, #7
     fd6:	7812      	ldrb	r2, [r2, #0]
     fd8:	09d2      	lsrs	r2, r2, #7
     fda:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     fdc:	230e      	movs	r3, #14
     fde:	18fb      	adds	r3, r7, r3
     fe0:	1dfa      	adds	r2, r7, #7
     fe2:	7812      	ldrb	r2, [r2, #0]
     fe4:	0952      	lsrs	r2, r2, #5
     fe6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     fe8:	4b0d      	ldr	r3, [pc, #52]	; (1020 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     fea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     fec:	230f      	movs	r3, #15
     fee:	18fb      	adds	r3, r7, r3
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d10f      	bne.n	1016 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     ff6:	230f      	movs	r3, #15
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	009b      	lsls	r3, r3, #2
     ffe:	2210      	movs	r2, #16
    1000:	4694      	mov	ip, r2
    1002:	44bc      	add	ip, r7
    1004:	4463      	add	r3, ip
    1006:	3b08      	subs	r3, #8
    1008:	681a      	ldr	r2, [r3, #0]
    100a:	230e      	movs	r3, #14
    100c:	18fb      	adds	r3, r7, r3
    100e:	781b      	ldrb	r3, [r3, #0]
    1010:	01db      	lsls	r3, r3, #7
    1012:	18d3      	adds	r3, r2, r3
    1014:	e000      	b.n	1018 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1016:	2300      	movs	r3, #0
	}
}
    1018:	0018      	movs	r0, r3
    101a:	46bd      	mov	sp, r7
    101c:	b004      	add	sp, #16
    101e:	bd80      	pop	{r7, pc}
    1020:	40002800 	.word	0x40002800

00001024 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1024:	b580      	push	{r7, lr}
    1026:	b088      	sub	sp, #32
    1028:	af00      	add	r7, sp, #0
    102a:	60f8      	str	r0, [r7, #12]
    102c:	60b9      	str	r1, [r7, #8]
    102e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1030:	2300      	movs	r3, #0
    1032:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	78db      	ldrb	r3, [r3, #3]
    1038:	2201      	movs	r2, #1
    103a:	4053      	eors	r3, r2
    103c:	b2db      	uxtb	r3, r3
    103e:	2b00      	cmp	r3, #0
    1040:	d035      	beq.n	10ae <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	781b      	ldrb	r3, [r3, #0]
    1046:	2b80      	cmp	r3, #128	; 0x80
    1048:	d00b      	beq.n	1062 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    104a:	69fb      	ldr	r3, [r7, #28]
    104c:	2280      	movs	r2, #128	; 0x80
    104e:	0252      	lsls	r2, r2, #9
    1050:	4313      	orrs	r3, r2
    1052:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	781b      	ldrb	r3, [r3, #0]
    1058:	061b      	lsls	r3, r3, #24
    105a:	001a      	movs	r2, r3
    105c:	69fb      	ldr	r3, [r7, #28]
    105e:	4313      	orrs	r3, r2
    1060:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	785b      	ldrb	r3, [r3, #1]
    1066:	2b00      	cmp	r3, #0
    1068:	d003      	beq.n	1072 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    106e:	2b02      	cmp	r3, #2
    1070:	d110      	bne.n	1094 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1072:	69fb      	ldr	r3, [r7, #28]
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	0292      	lsls	r2, r2, #10
    1078:	4313      	orrs	r3, r2
    107a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	789b      	ldrb	r3, [r3, #2]
    1080:	2b00      	cmp	r3, #0
    1082:	d004      	beq.n	108e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1084:	69fb      	ldr	r3, [r7, #28]
    1086:	2280      	movs	r2, #128	; 0x80
    1088:	02d2      	lsls	r2, r2, #11
    108a:	4313      	orrs	r3, r2
    108c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	68ba      	ldr	r2, [r7, #8]
    1092:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	785b      	ldrb	r3, [r3, #1]
    1098:	2b01      	cmp	r3, #1
    109a:	d003      	beq.n	10a4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10a0:	2b02      	cmp	r3, #2
    10a2:	d107      	bne.n	10b4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    10a4:	69fb      	ldr	r3, [r7, #28]
    10a6:	4a22      	ldr	r2, [pc, #136]	; (1130 <_system_pinmux_config+0x10c>)
    10a8:	4013      	ands	r3, r2
    10aa:	61fb      	str	r3, [r7, #28]
    10ac:	e002      	b.n	10b4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    10ae:	68fb      	ldr	r3, [r7, #12]
    10b0:	68ba      	ldr	r2, [r7, #8]
    10b2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10b4:	68bb      	ldr	r3, [r7, #8]
    10b6:	041b      	lsls	r3, r3, #16
    10b8:	0c1b      	lsrs	r3, r3, #16
    10ba:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    10bc:	68bb      	ldr	r3, [r7, #8]
    10be:	0c1b      	lsrs	r3, r3, #16
    10c0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10c2:	69ba      	ldr	r2, [r7, #24]
    10c4:	69fb      	ldr	r3, [r7, #28]
    10c6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10c8:	22a0      	movs	r2, #160	; 0xa0
    10ca:	05d2      	lsls	r2, r2, #23
    10cc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10d2:	697a      	ldr	r2, [r7, #20]
    10d4:	69fb      	ldr	r3, [r7, #28]
    10d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    10d8:	22d0      	movs	r2, #208	; 0xd0
    10da:	0612      	lsls	r2, r2, #24
    10dc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10de:	68fb      	ldr	r3, [r7, #12]
    10e0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	78db      	ldrb	r3, [r3, #3]
    10e6:	2201      	movs	r2, #1
    10e8:	4053      	eors	r3, r2
    10ea:	b2db      	uxtb	r3, r3
    10ec:	2b00      	cmp	r3, #0
    10ee:	d01a      	beq.n	1126 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    10f0:	69fa      	ldr	r2, [r7, #28]
    10f2:	2380      	movs	r3, #128	; 0x80
    10f4:	02db      	lsls	r3, r3, #11
    10f6:	4013      	ands	r3, r2
    10f8:	d00a      	beq.n	1110 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	789b      	ldrb	r3, [r3, #2]
    10fe:	2b01      	cmp	r3, #1
    1100:	d103      	bne.n	110a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	68ba      	ldr	r2, [r7, #8]
    1106:	619a      	str	r2, [r3, #24]
    1108:	e002      	b.n	1110 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    110a:	68fb      	ldr	r3, [r7, #12]
    110c:	68ba      	ldr	r2, [r7, #8]
    110e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	785b      	ldrb	r3, [r3, #1]
    1114:	2b01      	cmp	r3, #1
    1116:	d003      	beq.n	1120 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    111c:	2b02      	cmp	r3, #2
    111e:	d102      	bne.n	1126 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	68ba      	ldr	r2, [r7, #8]
    1124:	609a      	str	r2, [r3, #8]
		}
	}
}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	46bd      	mov	sp, r7
    112a:	b008      	add	sp, #32
    112c:	bd80      	pop	{r7, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	fffbffff 	.word	0xfffbffff

00001134 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1134:	b580      	push	{r7, lr}
    1136:	b084      	sub	sp, #16
    1138:	af00      	add	r7, sp, #0
    113a:	0002      	movs	r2, r0
    113c:	6039      	str	r1, [r7, #0]
    113e:	1dfb      	adds	r3, r7, #7
    1140:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1142:	1dfb      	adds	r3, r7, #7
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	0018      	movs	r0, r3
    1148:	4b0a      	ldr	r3, [pc, #40]	; (1174 <system_pinmux_pin_set_config+0x40>)
    114a:	4798      	blx	r3
    114c:	0003      	movs	r3, r0
    114e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1150:	1dfb      	adds	r3, r7, #7
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	221f      	movs	r2, #31
    1156:	4013      	ands	r3, r2
    1158:	2201      	movs	r2, #1
    115a:	409a      	lsls	r2, r3
    115c:	0013      	movs	r3, r2
    115e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1160:	683a      	ldr	r2, [r7, #0]
    1162:	68b9      	ldr	r1, [r7, #8]
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	0018      	movs	r0, r3
    1168:	4b03      	ldr	r3, [pc, #12]	; (1178 <system_pinmux_pin_set_config+0x44>)
    116a:	4798      	blx	r3
}
    116c:	46c0      	nop			; (mov r8, r8)
    116e:	46bd      	mov	sp, r7
    1170:	b004      	add	sp, #16
    1172:	bd80      	pop	{r7, pc}
    1174:	00000fc5 	.word	0x00000fc5
    1178:	00001025 	.word	0x00001025

0000117c <system_gclk_chan_get_config_defaults>:
{
    117c:	b580      	push	{r7, lr}
    117e:	b082      	sub	sp, #8
    1180:	af00      	add	r7, sp, #0
    1182:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	2200      	movs	r2, #0
    1188:	701a      	strb	r2, [r3, #0]
}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	46bd      	mov	sp, r7
    118e:	b002      	add	sp, #8
    1190:	bd80      	pop	{r7, pc}
	...

00001194 <system_apb_clock_set_mask>:
{
    1194:	b580      	push	{r7, lr}
    1196:	b082      	sub	sp, #8
    1198:	af00      	add	r7, sp, #0
    119a:	0002      	movs	r2, r0
    119c:	6039      	str	r1, [r7, #0]
    119e:	1dfb      	adds	r3, r7, #7
    11a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    11a2:	1dfb      	adds	r3, r7, #7
    11a4:	781b      	ldrb	r3, [r3, #0]
    11a6:	2b04      	cmp	r3, #4
    11a8:	d827      	bhi.n	11fa <system_apb_clock_set_mask+0x66>
    11aa:	009a      	lsls	r2, r3, #2
    11ac:	4b16      	ldr	r3, [pc, #88]	; (1208 <system_apb_clock_set_mask+0x74>)
    11ae:	18d3      	adds	r3, r2, r3
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    11b4:	4b15      	ldr	r3, [pc, #84]	; (120c <system_apb_clock_set_mask+0x78>)
    11b6:	4a15      	ldr	r2, [pc, #84]	; (120c <system_apb_clock_set_mask+0x78>)
    11b8:	6951      	ldr	r1, [r2, #20]
    11ba:	683a      	ldr	r2, [r7, #0]
    11bc:	430a      	orrs	r2, r1
    11be:	615a      	str	r2, [r3, #20]
			break;
    11c0:	e01d      	b.n	11fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    11c2:	4b12      	ldr	r3, [pc, #72]	; (120c <system_apb_clock_set_mask+0x78>)
    11c4:	4a11      	ldr	r2, [pc, #68]	; (120c <system_apb_clock_set_mask+0x78>)
    11c6:	6991      	ldr	r1, [r2, #24]
    11c8:	683a      	ldr	r2, [r7, #0]
    11ca:	430a      	orrs	r2, r1
    11cc:	619a      	str	r2, [r3, #24]
			break;
    11ce:	e016      	b.n	11fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    11d0:	4b0e      	ldr	r3, [pc, #56]	; (120c <system_apb_clock_set_mask+0x78>)
    11d2:	4a0e      	ldr	r2, [pc, #56]	; (120c <system_apb_clock_set_mask+0x78>)
    11d4:	69d1      	ldr	r1, [r2, #28]
    11d6:	683a      	ldr	r2, [r7, #0]
    11d8:	430a      	orrs	r2, r1
    11da:	61da      	str	r2, [r3, #28]
			break;
    11dc:	e00f      	b.n	11fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    11de:	4b0b      	ldr	r3, [pc, #44]	; (120c <system_apb_clock_set_mask+0x78>)
    11e0:	4a0a      	ldr	r2, [pc, #40]	; (120c <system_apb_clock_set_mask+0x78>)
    11e2:	6a11      	ldr	r1, [r2, #32]
    11e4:	683a      	ldr	r2, [r7, #0]
    11e6:	430a      	orrs	r2, r1
    11e8:	621a      	str	r2, [r3, #32]
			break;
    11ea:	e008      	b.n	11fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    11ec:	4b07      	ldr	r3, [pc, #28]	; (120c <system_apb_clock_set_mask+0x78>)
    11ee:	4a07      	ldr	r2, [pc, #28]	; (120c <system_apb_clock_set_mask+0x78>)
    11f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    11f2:	683a      	ldr	r2, [r7, #0]
    11f4:	430a      	orrs	r2, r1
    11f6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    11f8:	e001      	b.n	11fe <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    11fa:	2317      	movs	r3, #23
    11fc:	e000      	b.n	1200 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    11fe:	2300      	movs	r3, #0
}
    1200:	0018      	movs	r0, r3
    1202:	46bd      	mov	sp, r7
    1204:	b002      	add	sp, #8
    1206:	bd80      	pop	{r7, pc}
    1208:	0000467c 	.word	0x0000467c
    120c:	40000400 	.word	0x40000400

00001210 <system_pinmux_get_config_defaults>:
{
    1210:	b580      	push	{r7, lr}
    1212:	b082      	sub	sp, #8
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1218:	687b      	ldr	r3, [r7, #4]
    121a:	2280      	movs	r2, #128	; 0x80
    121c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    121e:	687b      	ldr	r3, [r7, #4]
    1220:	2200      	movs	r2, #0
    1222:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1224:	687b      	ldr	r3, [r7, #4]
    1226:	2201      	movs	r2, #1
    1228:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	2200      	movs	r2, #0
    122e:	70da      	strb	r2, [r3, #3]
}
    1230:	46c0      	nop			; (mov r8, r8)
    1232:	46bd      	mov	sp, r7
    1234:	b002      	add	sp, #8
    1236:	bd80      	pop	{r7, pc}

00001238 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    1238:	b580      	push	{r7, lr}
    123a:	b084      	sub	sp, #16
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1240:	2300      	movs	r3, #0
    1242:	60fb      	str	r3, [r7, #12]
    1244:	e00c      	b.n	1260 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    1246:	4b0a      	ldr	r3, [pc, #40]	; (1270 <_tcc_get_inst_index+0x38>)
    1248:	68fa      	ldr	r2, [r7, #12]
    124a:	0092      	lsls	r2, r2, #2
    124c:	58d2      	ldr	r2, [r2, r3]
    124e:	687b      	ldr	r3, [r7, #4]
    1250:	429a      	cmp	r2, r3
    1252:	d102      	bne.n	125a <_tcc_get_inst_index+0x22>
			return i;
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	b2db      	uxtb	r3, r3
    1258:	e006      	b.n	1268 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	3301      	adds	r3, #1
    125e:	60fb      	str	r3, [r7, #12]
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	2b02      	cmp	r3, #2
    1264:	d9ef      	bls.n	1246 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1266:	2300      	movs	r3, #0
}
    1268:	0018      	movs	r0, r3
    126a:	46bd      	mov	sp, r7
    126c:	b004      	add	sp, #16
    126e:	bd80      	pop	{r7, pc}
    1270:	00004690 	.word	0x00004690

00001274 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    1274:	b590      	push	{r4, r7, lr}
    1276:	b085      	sub	sp, #20
    1278:	af00      	add	r7, sp, #0
    127a:	6078      	str	r0, [r7, #4]
    127c:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    127e:	230f      	movs	r3, #15
    1280:	18fc      	adds	r4, r7, r3
    1282:	683b      	ldr	r3, [r7, #0]
    1284:	0018      	movs	r0, r3
    1286:	4bae      	ldr	r3, [pc, #696]	; (1540 <tcc_get_config_defaults+0x2cc>)
    1288:	4798      	blx	r3
    128a:	0003      	movs	r3, r0
    128c:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	2200      	movs	r2, #0
    1292:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    1294:	230f      	movs	r3, #15
    1296:	18fb      	adds	r3, r7, r3
    1298:	781a      	ldrb	r2, [r3, #0]
    129a:	4baa      	ldr	r3, [pc, #680]	; (1544 <tcc_get_config_defaults+0x2d0>)
    129c:	0092      	lsls	r2, r2, #2
    129e:	58d2      	ldr	r2, [r2, r3]
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	2200      	movs	r2, #0
    12a8:	72da      	strb	r2, [r3, #11]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	2200      	movs	r2, #0
    12ae:	731a      	strb	r2, [r3, #12]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	2200      	movs	r2, #0
    12b4:	735a      	strb	r2, [r3, #13]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	2200      	movs	r2, #0
    12ba:	729a      	strb	r2, [r3, #10]
	config->counter.oneshot                = false;
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	2200      	movs	r2, #0
    12c0:	721a      	strb	r2, [r3, #8]

#ifdef FEATURE_TCC_GENERATE_DMA_TRIGGER
	config->counter.dma_trigger_mode       = TCC_COUNT_OVERFLOW_DMA_TRIGGER_MODE_CONTINUE;
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	2200      	movs	r2, #0
    12c6:	725a      	strb	r2, [r3, #9]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	2200      	movs	r2, #0
    12cc:	61da      	str	r2, [r3, #28]
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	2200      	movs	r2, #0
    12d2:	621a      	str	r2, [r3, #32]
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	2200      	movs	r2, #0
    12d8:	625a      	str	r2, [r3, #36]	; 0x24
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	2200      	movs	r2, #0
    12de:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	2200      	movs	r2, #0
    12e4:	751a      	strb	r2, [r3, #20]
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	2200      	movs	r2, #0
    12ea:	755a      	strb	r2, [r3, #21]
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	2200      	movs	r2, #0
    12f0:	759a      	strb	r2, [r3, #22]
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	2200      	movs	r2, #0
    12f6:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	2200      	movs	r2, #0
    12fc:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	2200      	movs	r2, #0
    1302:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	2200      	movs	r2, #0
    1308:	741a      	strb	r2, [r3, #16]
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	2200      	movs	r2, #0
    130e:	745a      	strb	r2, [r3, #17]
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	2200      	movs	r2, #0
    1314:	749a      	strb	r2, [r3, #18]
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	2200      	movs	r2, #0
    131a:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	222c      	movs	r2, #44	; 0x2c
    1320:	2100      	movs	r1, #0
    1322:	5499      	strb	r1, [r3, r2]
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	222d      	movs	r2, #45	; 0x2d
    1328:	2100      	movs	r1, #0
    132a:	5499      	strb	r1, [r3, r2]
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	222e      	movs	r2, #46	; 0x2e
    1330:	2100      	movs	r1, #0
    1332:	5499      	strb	r1, [r3, r2]
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	222f      	movs	r2, #47	; 0x2f
    1338:	2100      	movs	r1, #0
    133a:	5499      	strb	r1, [r3, r2]
    133c:	687b      	ldr	r3, [r7, #4]
    133e:	2230      	movs	r2, #48	; 0x30
    1340:	2100      	movs	r1, #0
    1342:	5499      	strb	r1, [r3, r2]
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	2231      	movs	r2, #49	; 0x31
    1348:	2100      	movs	r1, #0
    134a:	5499      	strb	r1, [r3, r2]
    134c:	687b      	ldr	r3, [r7, #4]
    134e:	2232      	movs	r2, #50	; 0x32
    1350:	2100      	movs	r1, #0
    1352:	5499      	strb	r1, [r3, r2]
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	2233      	movs	r2, #51	; 0x33
    1358:	2100      	movs	r1, #0
    135a:	5499      	strb	r1, [r3, r2]
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	2234      	movs	r2, #52	; 0x34
    1360:	2100      	movs	r1, #0
    1362:	5499      	strb	r1, [r3, r2]
    1364:	687b      	ldr	r3, [r7, #4]
    1366:	2235      	movs	r2, #53	; 0x35
    1368:	2100      	movs	r1, #0
    136a:	5499      	strb	r1, [r3, r2]
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	2236      	movs	r2, #54	; 0x36
    1370:	2100      	movs	r1, #0
    1372:	5499      	strb	r1, [r3, r2]
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	2237      	movs	r2, #55	; 0x37
    1378:	2100      	movs	r1, #0
    137a:	5499      	strb	r1, [r3, r2]
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	2238      	movs	r2, #56	; 0x38
    1380:	2100      	movs	r1, #0
    1382:	5499      	strb	r1, [r3, r2]
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	2239      	movs	r2, #57	; 0x39
    1388:	2100      	movs	r1, #0
    138a:	5499      	strb	r1, [r3, r2]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	223a      	movs	r2, #58	; 0x3a
    1390:	2100      	movs	r1, #0
    1392:	5499      	strb	r1, [r3, r2]
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	223b      	movs	r2, #59	; 0x3b
    1398:	2100      	movs	r1, #0
    139a:	5499      	strb	r1, [r3, r2]
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	223c      	movs	r2, #60	; 0x3c
    13a0:	2100      	movs	r1, #0
    13a2:	5499      	strb	r1, [r3, r2]
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	223d      	movs	r2, #61	; 0x3d
    13a8:	2100      	movs	r1, #0
    13aa:	5499      	strb	r1, [r3, r2]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	223e      	movs	r2, #62	; 0x3e
    13b0:	2100      	movs	r1, #0
    13b2:	5499      	strb	r1, [r3, r2]
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	223f      	movs	r2, #63	; 0x3f
    13b8:	2100      	movs	r1, #0
    13ba:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	2240      	movs	r2, #64	; 0x40
    13c0:	2100      	movs	r1, #0
    13c2:	5499      	strb	r1, [r3, r2]
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	2241      	movs	r2, #65	; 0x41
    13c8:	2100      	movs	r1, #0
    13ca:	5499      	strb	r1, [r3, r2]
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	2242      	movs	r2, #66	; 0x42
    13d0:	2100      	movs	r1, #0
    13d2:	5499      	strb	r1, [r3, r2]
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	2243      	movs	r2, #67	; 0x43
    13d8:	2100      	movs	r1, #0
    13da:	5499      	strb	r1, [r3, r2]
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	2244      	movs	r2, #68	; 0x44
    13e0:	2100      	movs	r1, #0
    13e2:	5499      	strb	r1, [r3, r2]
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	2245      	movs	r2, #69	; 0x45
    13e8:	2100      	movs	r1, #0
    13ea:	5499      	strb	r1, [r3, r2]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	2246      	movs	r2, #70	; 0x46
    13f0:	2100      	movs	r1, #0
    13f2:	5499      	strb	r1, [r3, r2]
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	2247      	movs	r2, #71	; 0x47
    13f8:	2100      	movs	r1, #0
    13fa:	5499      	strb	r1, [r3, r2]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	2248      	movs	r2, #72	; 0x48
    1400:	2100      	movs	r1, #0
    1402:	5499      	strb	r1, [r3, r2]
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	2249      	movs	r2, #73	; 0x49
    1408:	2100      	movs	r1, #0
    140a:	5499      	strb	r1, [r3, r2]
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	224a      	movs	r2, #74	; 0x4a
    1410:	2100      	movs	r1, #0
    1412:	5499      	strb	r1, [r3, r2]
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	224b      	movs	r2, #75	; 0x4b
    1418:	2100      	movs	r1, #0
    141a:	5499      	strb	r1, [r3, r2]
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	224c      	movs	r2, #76	; 0x4c
    1420:	2100      	movs	r1, #0
    1422:	5499      	strb	r1, [r3, r2]
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	224d      	movs	r2, #77	; 0x4d
    1428:	2100      	movs	r1, #0
    142a:	5499      	strb	r1, [r3, r2]
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	224e      	movs	r2, #78	; 0x4e
    1430:	2100      	movs	r1, #0
    1432:	5499      	strb	r1, [r3, r2]
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	224f      	movs	r2, #79	; 0x4f
    1438:	2100      	movs	r1, #0
    143a:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	2250      	movs	r2, #80	; 0x50
    1440:	2100      	movs	r1, #0
    1442:	5499      	strb	r1, [r3, r2]
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2251      	movs	r2, #81	; 0x51
    1448:	2100      	movs	r1, #0
    144a:	5499      	strb	r1, [r3, r2]
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	2252      	movs	r2, #82	; 0x52
    1450:	2100      	movs	r1, #0
    1452:	5499      	strb	r1, [r3, r2]
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	2253      	movs	r2, #83	; 0x53
    1458:	2100      	movs	r1, #0
    145a:	5499      	strb	r1, [r3, r2]
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	2254      	movs	r2, #84	; 0x54
    1460:	2100      	movs	r1, #0
    1462:	5499      	strb	r1, [r3, r2]
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2255      	movs	r2, #85	; 0x55
    1468:	2100      	movs	r1, #0
    146a:	5499      	strb	r1, [r3, r2]
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	2256      	movs	r2, #86	; 0x56
    1470:	2100      	movs	r1, #0
    1472:	5499      	strb	r1, [r3, r2]
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	2257      	movs	r2, #87	; 0x57
    1478:	2100      	movs	r1, #0
    147a:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2298      	movs	r2, #152	; 0x98
    1480:	2100      	movs	r1, #0
    1482:	5499      	strb	r1, [r3, r2]
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	2200      	movs	r2, #0
    1488:	659a      	str	r2, [r3, #88]	; 0x58
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	2200      	movs	r2, #0
    148e:	679a      	str	r2, [r3, #120]	; 0x78
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	2299      	movs	r2, #153	; 0x99
    1494:	2100      	movs	r1, #0
    1496:	5499      	strb	r1, [r3, r2]
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	2200      	movs	r2, #0
    149c:	65da      	str	r2, [r3, #92]	; 0x5c
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	2200      	movs	r2, #0
    14a2:	67da      	str	r2, [r3, #124]	; 0x7c
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	229a      	movs	r2, #154	; 0x9a
    14a8:	2100      	movs	r1, #0
    14aa:	5499      	strb	r1, [r3, r2]
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	2200      	movs	r2, #0
    14b0:	661a      	str	r2, [r3, #96]	; 0x60
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	2280      	movs	r2, #128	; 0x80
    14b6:	2100      	movs	r1, #0
    14b8:	5099      	str	r1, [r3, r2]
    14ba:	687b      	ldr	r3, [r7, #4]
    14bc:	229b      	movs	r2, #155	; 0x9b
    14be:	2100      	movs	r1, #0
    14c0:	5499      	strb	r1, [r3, r2]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	2200      	movs	r2, #0
    14c6:	665a      	str	r2, [r3, #100]	; 0x64
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	2284      	movs	r2, #132	; 0x84
    14cc:	2100      	movs	r1, #0
    14ce:	5099      	str	r1, [r3, r2]
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	229c      	movs	r2, #156	; 0x9c
    14d4:	2100      	movs	r1, #0
    14d6:	5499      	strb	r1, [r3, r2]
    14d8:	687b      	ldr	r3, [r7, #4]
    14da:	2200      	movs	r2, #0
    14dc:	669a      	str	r2, [r3, #104]	; 0x68
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	2288      	movs	r2, #136	; 0x88
    14e2:	2100      	movs	r1, #0
    14e4:	5099      	str	r1, [r3, r2]
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	229d      	movs	r2, #157	; 0x9d
    14ea:	2100      	movs	r1, #0
    14ec:	5499      	strb	r1, [r3, r2]
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	2200      	movs	r2, #0
    14f2:	66da      	str	r2, [r3, #108]	; 0x6c
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	228c      	movs	r2, #140	; 0x8c
    14f8:	2100      	movs	r1, #0
    14fa:	5099      	str	r1, [r3, r2]
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	229e      	movs	r2, #158	; 0x9e
    1500:	2100      	movs	r1, #0
    1502:	5499      	strb	r1, [r3, r2]
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	2200      	movs	r2, #0
    1508:	671a      	str	r2, [r3, #112]	; 0x70
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	2290      	movs	r2, #144	; 0x90
    150e:	2100      	movs	r1, #0
    1510:	5099      	str	r1, [r3, r2]
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	229f      	movs	r2, #159	; 0x9f
    1516:	2100      	movs	r1, #0
    1518:	5499      	strb	r1, [r3, r2]
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	2200      	movs	r2, #0
    151e:	675a      	str	r2, [r3, #116]	; 0x74
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	2294      	movs	r2, #148	; 0x94
    1524:	2100      	movs	r1, #0
    1526:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	22a0      	movs	r2, #160	; 0xa0
    152c:	2101      	movs	r1, #1
    152e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	22a1      	movs	r2, #161	; 0xa1
    1534:	2100      	movs	r1, #0
    1536:	5499      	strb	r1, [r3, r2]
}
    1538:	46c0      	nop			; (mov r8, r8)
    153a:	46bd      	mov	sp, r7
    153c:	b005      	add	sp, #20
    153e:	bd90      	pop	{r4, r7, pc}
    1540:	00001239 	.word	0x00001239
    1544:	000046ac 	.word	0x000046ac

00001548 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1548:	b580      	push	{r7, lr}
    154a:	b086      	sub	sp, #24
    154c:	af00      	add	r7, sp, #0
    154e:	60b9      	str	r1, [r7, #8]
    1550:	607a      	str	r2, [r7, #4]
    1552:	230f      	movs	r3, #15
    1554:	18fb      	adds	r3, r7, r3
    1556:	1c02      	adds	r2, r0, #0
    1558:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    155a:	2300      	movs	r3, #0
    155c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    155e:	2300      	movs	r3, #0
    1560:	613b      	str	r3, [r7, #16]
    1562:	e01d      	b.n	15a0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    1564:	68ba      	ldr	r2, [r7, #8]
    1566:	693b      	ldr	r3, [r7, #16]
    1568:	18d3      	adds	r3, r2, r3
    156a:	3310      	adds	r3, #16
    156c:	781b      	ldrb	r3, [r3, #0]
    156e:	2b01      	cmp	r3, #1
    1570:	d113      	bne.n	159a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    1572:	230f      	movs	r3, #15
    1574:	18fb      	adds	r3, r7, r3
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	4a1b      	ldr	r2, [pc, #108]	; (15e8 <_tcc_build_ctrla+0xa0>)
    157a:	5cd3      	ldrb	r3, [r2, r3]
    157c:	001a      	movs	r2, r3
    157e:	693b      	ldr	r3, [r7, #16]
    1580:	429a      	cmp	r2, r3
    1582:	da01      	bge.n	1588 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    1584:	2317      	movs	r3, #23
    1586:	e02a      	b.n	15de <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1588:	2380      	movs	r3, #128	; 0x80
    158a:	045a      	lsls	r2, r3, #17
    158c:	693b      	ldr	r3, [r7, #16]
    158e:	409a      	lsls	r2, r3
    1590:	0013      	movs	r3, r2
    1592:	001a      	movs	r2, r3
    1594:	697b      	ldr	r3, [r7, #20]
    1596:	4313      	orrs	r3, r2
    1598:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    159a:	693b      	ldr	r3, [r7, #16]
    159c:	3301      	adds	r3, #1
    159e:	613b      	str	r3, [r7, #16]
    15a0:	693b      	ldr	r3, [r7, #16]
    15a2:	2b03      	cmp	r3, #3
    15a4:	ddde      	ble.n	1564 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    15a6:	68bb      	ldr	r3, [r7, #8]
    15a8:	22a1      	movs	r2, #161	; 0xa1
    15aa:	5c9b      	ldrb	r3, [r3, r2]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d004      	beq.n	15ba <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    15b0:	697b      	ldr	r3, [r7, #20]
    15b2:	2280      	movs	r2, #128	; 0x80
    15b4:	0112      	lsls	r2, r2, #4
    15b6:	4313      	orrs	r3, r2
    15b8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    15ba:	68bb      	ldr	r3, [r7, #8]
    15bc:	7b5b      	ldrb	r3, [r3, #13]
    15be:	031b      	lsls	r3, r3, #12
    15c0:	001a      	movs	r2, r3
    15c2:	697b      	ldr	r3, [r7, #20]
    15c4:	4313      	orrs	r3, r2
    15c6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    15c8:	68bb      	ldr	r3, [r7, #8]
    15ca:	7b1b      	ldrb	r3, [r3, #12]
    15cc:	021b      	lsls	r3, r3, #8
    15ce:	001a      	movs	r2, r3
    15d0:	697b      	ldr	r3, [r7, #20]
    15d2:	4313      	orrs	r3, r2
    15d4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	697a      	ldr	r2, [r7, #20]
    15da:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    15dc:	2300      	movs	r3, #0
}
    15de:	0018      	movs	r0, r3
    15e0:	46bd      	mov	sp, r7
    15e2:	b006      	add	sp, #24
    15e4:	bd80      	pop	{r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	000046b8 	.word	0x000046b8

000015ec <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	b086      	sub	sp, #24
    15f0:	af00      	add	r7, sp, #0
    15f2:	60b9      	str	r1, [r7, #8]
    15f4:	607a      	str	r2, [r7, #4]
    15f6:	230f      	movs	r3, #15
    15f8:	18fb      	adds	r3, r7, r3
    15fa:	1c02      	adds	r2, r0, #0
    15fc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    15fe:	2317      	movs	r3, #23
    1600:	18fb      	adds	r3, r7, r3
    1602:	2200      	movs	r2, #0
    1604:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    1606:	68bb      	ldr	r3, [r7, #8]
    1608:	7a1b      	ldrb	r3, [r3, #8]
    160a:	2b00      	cmp	r3, #0
    160c:	d007      	beq.n	161e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    160e:	2317      	movs	r3, #23
    1610:	18fb      	adds	r3, r7, r3
    1612:	2217      	movs	r2, #23
    1614:	18ba      	adds	r2, r7, r2
    1616:	7812      	ldrb	r2, [r2, #0]
    1618:	2104      	movs	r1, #4
    161a:	430a      	orrs	r2, r1
    161c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    161e:	68bb      	ldr	r3, [r7, #8]
    1620:	7a9b      	ldrb	r3, [r3, #10]
    1622:	2b01      	cmp	r3, #1
    1624:	d107      	bne.n	1636 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    1626:	2317      	movs	r3, #23
    1628:	18fb      	adds	r3, r7, r3
    162a:	2217      	movs	r2, #23
    162c:	18ba      	adds	r2, r7, r2
    162e:	7812      	ldrb	r2, [r2, #0]
    1630:	2101      	movs	r1, #1
    1632:	430a      	orrs	r2, r1
    1634:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2217      	movs	r2, #23
    163a:	18ba      	adds	r2, r7, r2
    163c:	7812      	ldrb	r2, [r2, #0]
    163e:	701a      	strb	r2, [r3, #0]
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	b006      	add	sp, #24
    1646:	bd80      	pop	{r7, pc}

00001648 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1648:	b580      	push	{r7, lr}
    164a:	b088      	sub	sp, #32
    164c:	af00      	add	r7, sp, #0
    164e:	60b9      	str	r1, [r7, #8]
    1650:	607a      	str	r2, [r7, #4]
    1652:	230f      	movs	r3, #15
    1654:	18fb      	adds	r3, r7, r3
    1656:	1c02      	adds	r2, r0, #0
    1658:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    165a:	230f      	movs	r3, #15
    165c:	18fb      	adds	r3, r7, r3
    165e:	781a      	ldrb	r2, [r3, #0]
    1660:	231b      	movs	r3, #27
    1662:	18fb      	adds	r3, r7, r3
    1664:	493e      	ldr	r1, [pc, #248]	; (1760 <_tcc_build_faults+0x118>)
    1666:	5c8a      	ldrb	r2, [r1, r2]
    1668:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    166a:	2300      	movs	r3, #0
    166c:	61fb      	str	r3, [r7, #28]
    166e:	e06e      	b.n	174e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    1670:	69fa      	ldr	r2, [r7, #28]
    1672:	0013      	movs	r3, r2
    1674:	009b      	lsls	r3, r3, #2
    1676:	189b      	adds	r3, r3, r2
    1678:	005b      	lsls	r3, r3, #1
    167a:	3328      	adds	r3, #40	; 0x28
    167c:	68ba      	ldr	r2, [r7, #8]
    167e:	18d3      	adds	r3, r2, r3
    1680:	3304      	adds	r3, #4
    1682:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    1684:	697b      	ldr	r3, [r7, #20]
    1686:	7a5b      	ldrb	r3, [r3, #9]
    1688:	221b      	movs	r2, #27
    168a:	18ba      	adds	r2, r7, r2
    168c:	7812      	ldrb	r2, [r2, #0]
    168e:	429a      	cmp	r2, r3
    1690:	d801      	bhi.n	1696 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    1692:	2317      	movs	r3, #23
    1694:	e05f      	b.n	1756 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    1696:	697b      	ldr	r3, [r7, #20]
    1698:	781b      	ldrb	r3, [r3, #0]
    169a:	2b0f      	cmp	r3, #15
    169c:	d901      	bls.n	16a2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    169e:	2317      	movs	r3, #23
    16a0:	e059      	b.n	1756 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    16a2:	697b      	ldr	r3, [r7, #20]
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	061b      	lsls	r3, r3, #24
    16a8:	001a      	movs	r2, r3
    16aa:	23f0      	movs	r3, #240	; 0xf0
    16ac:	051b      	lsls	r3, r3, #20
    16ae:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    16b0:	697b      	ldr	r3, [r7, #20]
    16b2:	785b      	ldrb	r3, [r3, #1]
    16b4:	041b      	lsls	r3, r3, #16
    16b6:	0019      	movs	r1, r3
    16b8:	23ff      	movs	r3, #255	; 0xff
    16ba:	041b      	lsls	r3, r3, #16
    16bc:	400b      	ands	r3, r1
    16be:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	789b      	ldrb	r3, [r3, #2]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d001      	beq.n	16cc <_tcc_build_faults+0x84>
    16c8:	2380      	movs	r3, #128	; 0x80
    16ca:	e000      	b.n	16ce <_tcc_build_faults+0x86>
    16cc:	2300      	movs	r3, #0
    16ce:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    16d0:	697b      	ldr	r3, [r7, #20]
    16d2:	78db      	ldrb	r3, [r3, #3]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d001      	beq.n	16dc <_tcc_build_faults+0x94>
    16d8:	2308      	movs	r3, #8
    16da:	e000      	b.n	16de <_tcc_build_faults+0x96>
    16dc:	2300      	movs	r3, #0
    16de:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    16e0:	697b      	ldr	r3, [r7, #20]
    16e2:	791b      	ldrb	r3, [r3, #4]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d001      	beq.n	16ec <_tcc_build_faults+0xa4>
    16e8:	2310      	movs	r3, #16
    16ea:	e000      	b.n	16ee <_tcc_build_faults+0xa6>
    16ec:	2300      	movs	r3, #0
    16ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    16f0:	697b      	ldr	r3, [r7, #20]
    16f2:	795b      	ldrb	r3, [r3, #5]
    16f4:	0019      	movs	r1, r3
    16f6:	2303      	movs	r3, #3
    16f8:	400b      	ands	r3, r1
    16fa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    16fc:	697b      	ldr	r3, [r7, #20]
    16fe:	799b      	ldrb	r3, [r3, #6]
    1700:	015b      	lsls	r3, r3, #5
    1702:	0019      	movs	r1, r3
    1704:	2360      	movs	r3, #96	; 0x60
    1706:	400b      	ands	r3, r1
    1708:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    170a:	697b      	ldr	r3, [r7, #20]
    170c:	79db      	ldrb	r3, [r3, #7]
    170e:	021b      	lsls	r3, r3, #8
    1710:	0019      	movs	r1, r3
    1712:	23c0      	movs	r3, #192	; 0xc0
    1714:	009b      	lsls	r3, r3, #2
    1716:	400b      	ands	r3, r1
    1718:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    171a:	697b      	ldr	r3, [r7, #20]
    171c:	7a1b      	ldrb	r3, [r3, #8]
    171e:	031b      	lsls	r3, r3, #12
    1720:	0019      	movs	r1, r3
    1722:	23e0      	movs	r3, #224	; 0xe0
    1724:	01db      	lsls	r3, r3, #7
    1726:	400b      	ands	r3, r1
    1728:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    172a:	697b      	ldr	r3, [r7, #20]
    172c:	7a5b      	ldrb	r3, [r3, #9]
    172e:	029b      	lsls	r3, r3, #10
    1730:	0019      	movs	r1, r3
    1732:	23c0      	movs	r3, #192	; 0xc0
    1734:	011b      	lsls	r3, r3, #4
    1736:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1738:	4313      	orrs	r3, r2
    173a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    173c:	69fb      	ldr	r3, [r7, #28]
    173e:	009b      	lsls	r3, r3, #2
    1740:	687a      	ldr	r2, [r7, #4]
    1742:	18d3      	adds	r3, r2, r3
    1744:	693a      	ldr	r2, [r7, #16]
    1746:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1748:	69fb      	ldr	r3, [r7, #28]
    174a:	3301      	adds	r3, #1
    174c:	61fb      	str	r3, [r7, #28]
    174e:	69fb      	ldr	r3, [r7, #28]
    1750:	2b01      	cmp	r3, #1
    1752:	dd8d      	ble.n	1670 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    1754:	2300      	movs	r3, #0
}
    1756:	0018      	movs	r0, r3
    1758:	46bd      	mov	sp, r7
    175a:	b008      	add	sp, #32
    175c:	bd80      	pop	{r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	000046b8 	.word	0x000046b8

00001764 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1764:	b580      	push	{r7, lr}
    1766:	b088      	sub	sp, #32
    1768:	af00      	add	r7, sp, #0
    176a:	60b9      	str	r1, [r7, #8]
    176c:	607a      	str	r2, [r7, #4]
    176e:	230f      	movs	r3, #15
    1770:	18fb      	adds	r3, r7, r3
    1772:	1c02      	adds	r2, r0, #0
    1774:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    1776:	230f      	movs	r3, #15
    1778:	18fb      	adds	r3, r7, r3
    177a:	781a      	ldrb	r2, [r3, #0]
    177c:	2317      	movs	r3, #23
    177e:	18fb      	adds	r3, r7, r3
    1780:	492d      	ldr	r1, [pc, #180]	; (1838 <_tcc_build_drvctrl+0xd4>)
    1782:	5c8a      	ldrb	r2, [r1, r2]
    1784:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    1786:	2300      	movs	r3, #0
    1788:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    178a:	2300      	movs	r3, #0
    178c:	61fb      	str	r3, [r7, #28]
    178e:	e048      	b.n	1822 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    1790:	68ba      	ldr	r2, [r7, #8]
    1792:	2150      	movs	r1, #80	; 0x50
    1794:	69fb      	ldr	r3, [r7, #28]
    1796:	18d3      	adds	r3, r2, r3
    1798:	185b      	adds	r3, r3, r1
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	2b00      	cmp	r3, #0
    179e:	d010      	beq.n	17c2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    17a0:	2317      	movs	r3, #23
    17a2:	18fb      	adds	r3, r7, r3
    17a4:	781a      	ldrb	r2, [r3, #0]
    17a6:	69fb      	ldr	r3, [r7, #28]
    17a8:	429a      	cmp	r2, r3
    17aa:	d801      	bhi.n	17b0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    17ac:	2317      	movs	r3, #23
    17ae:	e03f      	b.n	1830 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    17b0:	2380      	movs	r3, #128	; 0x80
    17b2:	025a      	lsls	r2, r3, #9
    17b4:	69fb      	ldr	r3, [r7, #28]
    17b6:	409a      	lsls	r2, r3
    17b8:	0013      	movs	r3, r2
    17ba:	001a      	movs	r2, r3
    17bc:	69bb      	ldr	r3, [r7, #24]
    17be:	4313      	orrs	r3, r2
    17c0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    17c2:	68ba      	ldr	r2, [r7, #8]
    17c4:	69fb      	ldr	r3, [r7, #28]
    17c6:	331c      	adds	r3, #28
    17c8:	005b      	lsls	r3, r3, #1
    17ca:	18d3      	adds	r3, r2, r3
    17cc:	3309      	adds	r3, #9
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d023      	beq.n	181c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    17d4:	2317      	movs	r3, #23
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781a      	ldrb	r2, [r3, #0]
    17da:	69fb      	ldr	r3, [r7, #28]
    17dc:	429a      	cmp	r2, r3
    17de:	d801      	bhi.n	17e4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    17e0:	2317      	movs	r3, #23
    17e2:	e025      	b.n	1830 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    17e4:	68ba      	ldr	r2, [r7, #8]
    17e6:	69fb      	ldr	r3, [r7, #28]
    17e8:	331c      	adds	r3, #28
    17ea:	005b      	lsls	r3, r3, #1
    17ec:	18d3      	adds	r3, r2, r3
    17ee:	3309      	adds	r3, #9
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	2b02      	cmp	r3, #2
    17f4:	d10a      	bne.n	180c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    17f6:	2302      	movs	r3, #2
    17f8:	33ff      	adds	r3, #255	; 0xff
    17fa:	001a      	movs	r2, r3
    17fc:	69fb      	ldr	r3, [r7, #28]
    17fe:	409a      	lsls	r2, r3
    1800:	0013      	movs	r3, r2
    1802:	001a      	movs	r2, r3
    1804:	69bb      	ldr	r3, [r7, #24]
    1806:	4313      	orrs	r3, r2
    1808:	61bb      	str	r3, [r7, #24]
    180a:	e007      	b.n	181c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    180c:	2201      	movs	r2, #1
    180e:	69fb      	ldr	r3, [r7, #28]
    1810:	409a      	lsls	r2, r3
    1812:	0013      	movs	r3, r2
    1814:	001a      	movs	r2, r3
    1816:	69bb      	ldr	r3, [r7, #24]
    1818:	4313      	orrs	r3, r2
    181a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    181c:	69fb      	ldr	r3, [r7, #28]
    181e:	3301      	adds	r3, #1
    1820:	61fb      	str	r3, [r7, #28]
    1822:	69fb      	ldr	r3, [r7, #28]
    1824:	2b07      	cmp	r3, #7
    1826:	d9b3      	bls.n	1790 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	69ba      	ldr	r2, [r7, #24]
    182c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    182e:	2300      	movs	r3, #0
}
    1830:	0018      	movs	r0, r3
    1832:	46bd      	mov	sp, r7
    1834:	b008      	add	sp, #32
    1836:	bd80      	pop	{r7, pc}
    1838:	000046bc 	.word	0x000046bc

0000183c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    183c:	b580      	push	{r7, lr}
    183e:	b088      	sub	sp, #32
    1840:	af00      	add	r7, sp, #0
    1842:	60b9      	str	r1, [r7, #8]
    1844:	607a      	str	r2, [r7, #4]
    1846:	230f      	movs	r3, #15
    1848:	18fb      	adds	r3, r7, r3
    184a:	1c02      	adds	r2, r0, #0
    184c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    184e:	230f      	movs	r3, #15
    1850:	18fb      	adds	r3, r7, r3
    1852:	781a      	ldrb	r2, [r3, #0]
    1854:	2317      	movs	r3, #23
    1856:	18fb      	adds	r3, r7, r3
    1858:	491d      	ldr	r1, [pc, #116]	; (18d0 <_tcc_build_waves+0x94>)
    185a:	5c8a      	ldrb	r2, [r1, r2]
    185c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    185e:	68bb      	ldr	r3, [r7, #8]
    1860:	3310      	adds	r3, #16
    1862:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1864:	693b      	ldr	r3, [r7, #16]
    1866:	7a5b      	ldrb	r3, [r3, #9]
    1868:	011b      	lsls	r3, r3, #4
    186a:	001a      	movs	r2, r3
    186c:	2330      	movs	r3, #48	; 0x30
    186e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1870:	693b      	ldr	r3, [r7, #16]
    1872:	7a1b      	ldrb	r3, [r3, #8]
    1874:	0019      	movs	r1, r3
    1876:	2307      	movs	r3, #7
    1878:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    187a:	4313      	orrs	r3, r2
    187c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    187e:	2300      	movs	r3, #0
    1880:	61fb      	str	r3, [r7, #28]
    1882:	e01a      	b.n	18ba <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    1884:	693a      	ldr	r2, [r7, #16]
    1886:	69fb      	ldr	r3, [r7, #28]
    1888:	18d3      	adds	r3, r2, r3
    188a:	3304      	adds	r3, #4
    188c:	781b      	ldrb	r3, [r3, #0]
    188e:	2b00      	cmp	r3, #0
    1890:	d010      	beq.n	18b4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    1892:	2317      	movs	r3, #23
    1894:	18fb      	adds	r3, r7, r3
    1896:	781a      	ldrb	r2, [r3, #0]
    1898:	69fb      	ldr	r3, [r7, #28]
    189a:	429a      	cmp	r2, r3
    189c:	dc01      	bgt.n	18a2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    189e:	2317      	movs	r3, #23
    18a0:	e012      	b.n	18c8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    18a2:	2380      	movs	r3, #128	; 0x80
    18a4:	025a      	lsls	r2, r3, #9
    18a6:	69fb      	ldr	r3, [r7, #28]
    18a8:	409a      	lsls	r2, r3
    18aa:	0013      	movs	r3, r2
    18ac:	001a      	movs	r2, r3
    18ae:	69bb      	ldr	r3, [r7, #24]
    18b0:	4313      	orrs	r3, r2
    18b2:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    18b4:	69fb      	ldr	r3, [r7, #28]
    18b6:	3301      	adds	r3, #1
    18b8:	61fb      	str	r3, [r7, #28]
    18ba:	69fb      	ldr	r3, [r7, #28]
    18bc:	2b03      	cmp	r3, #3
    18be:	dde1      	ble.n	1884 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	69ba      	ldr	r2, [r7, #24]
    18c4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    18c6:	2300      	movs	r3, #0
}
    18c8:	0018      	movs	r0, r3
    18ca:	46bd      	mov	sp, r7
    18cc:	b008      	add	sp, #32
    18ce:	bd80      	pop	{r7, pc}
    18d0:	000046b8 	.word	0x000046b8

000018d4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    18d4:	b590      	push	{r4, r7, lr}
    18d6:	b091      	sub	sp, #68	; 0x44
    18d8:	af00      	add	r7, sp, #0
    18da:	60f8      	str	r0, [r7, #12]
    18dc:	60b9      	str	r1, [r7, #8]
    18de:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    18e0:	233b      	movs	r3, #59	; 0x3b
    18e2:	18fc      	adds	r4, r7, r3
    18e4:	68bb      	ldr	r3, [r7, #8]
    18e6:	0018      	movs	r0, r3
    18e8:	4bbf      	ldr	r3, [pc, #764]	; (1be8 <tcc_init+0x314>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
    18ee:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    18f0:	233b      	movs	r3, #59	; 0x3b
    18f2:	18fb      	adds	r3, r7, r3
    18f4:	781a      	ldrb	r2, [r3, #0]
    18f6:	4bbd      	ldr	r3, [pc, #756]	; (1bec <tcc_init+0x318>)
    18f8:	0092      	lsls	r2, r2, #2
    18fa:	58d3      	ldr	r3, [r2, r3]
    18fc:	0019      	movs	r1, r3
    18fe:	2002      	movs	r0, #2
    1900:	4bbb      	ldr	r3, [pc, #748]	; (1bf0 <tcc_init+0x31c>)
    1902:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1904:	68bb      	ldr	r3, [r7, #8]
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	2202      	movs	r2, #2
    190a:	4013      	ands	r3, r2
    190c:	d001      	beq.n	1912 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    190e:	231c      	movs	r3, #28
    1910:	e165      	b.n	1bde <tcc_init+0x30a>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1912:	68bb      	ldr	r3, [r7, #8]
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	2201      	movs	r2, #1
    1918:	4013      	ands	r3, r2
    191a:	d001      	beq.n	1920 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    191c:	231c      	movs	r3, #28
    191e:	e15e      	b.n	1bde <tcc_init+0x30a>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    1920:	233b      	movs	r3, #59	; 0x3b
    1922:	18fb      	adds	r3, r7, r3
    1924:	781a      	ldrb	r2, [r3, #0]
    1926:	4bb3      	ldr	r3, [pc, #716]	; (1bf4 <tcc_init+0x320>)
    1928:	0092      	lsls	r2, r2, #2
    192a:	58d3      	ldr	r3, [r2, r3]
    192c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	681a      	ldr	r2, [r3, #0]
    1932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1934:	429a      	cmp	r2, r3
    1936:	d804      	bhi.n	1942 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	685a      	ldr	r2, [r3, #4]
    193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    193e:	429a      	cmp	r2, r3
    1940:	d901      	bls.n	1946 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    1942:	2317      	movs	r3, #23
    1944:	e14b      	b.n	1bde <tcc_init+0x30a>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1946:	2300      	movs	r3, #0
    1948:	63fb      	str	r3, [r7, #60]	; 0x3c
    194a:	e00e      	b.n	196a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    194c:	687a      	ldr	r2, [r7, #4]
    194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1950:	3306      	adds	r3, #6
    1952:	009b      	lsls	r3, r3, #2
    1954:	18d3      	adds	r3, r2, r3
    1956:	3304      	adds	r3, #4
    1958:	681a      	ldr	r2, [r3, #0]
    195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    195c:	429a      	cmp	r2, r3
    195e:	d901      	bls.n	1964 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    1960:	2317      	movs	r3, #23
    1962:	e13c      	b.n	1bde <tcc_init+0x30a>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1966:	3301      	adds	r3, #1
    1968:	63fb      	str	r3, [r7, #60]	; 0x3c
    196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    196c:	2b03      	cmp	r3, #3
    196e:	dded      	ble.n	194c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1970:	2300      	movs	r3, #0
    1972:	63fb      	str	r3, [r7, #60]	; 0x3c
    1974:	e019      	b.n	19aa <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    1976:	687a      	ldr	r2, [r7, #4]
    1978:	2198      	movs	r1, #152	; 0x98
    197a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    197c:	18d3      	adds	r3, r2, r3
    197e:	185b      	adds	r3, r3, r1
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	2201      	movs	r2, #1
    1984:	4053      	eors	r3, r2
    1986:	b2db      	uxtb	r3, r3
    1988:	2b00      	cmp	r3, #0
    198a:	d10a      	bne.n	19a2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    198c:	233b      	movs	r3, #59	; 0x3b
    198e:	18fb      	adds	r3, r7, r3
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	4a99      	ldr	r2, [pc, #612]	; (1bf8 <tcc_init+0x324>)
    1994:	5cd3      	ldrb	r3, [r2, r3]
    1996:	001a      	movs	r2, r3
    1998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    199a:	429a      	cmp	r2, r3
    199c:	dc02      	bgt.n	19a4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    199e:	2317      	movs	r3, #23
    19a0:	e11d      	b.n	1bde <tcc_init+0x30a>
			continue;
    19a2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    19a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19a6:	3301      	adds	r3, #1
    19a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    19aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19ac:	2b07      	cmp	r3, #7
    19ae:	dde2      	ble.n	1976 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    19b0:	2300      	movs	r3, #0
    19b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    19b4:	2333      	movs	r3, #51	; 0x33
    19b6:	18fc      	adds	r4, r7, r3
    19b8:	232c      	movs	r3, #44	; 0x2c
    19ba:	18fa      	adds	r2, r7, r3
    19bc:	6879      	ldr	r1, [r7, #4]
    19be:	233b      	movs	r3, #59	; 0x3b
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	0018      	movs	r0, r3
    19c6:	4b8d      	ldr	r3, [pc, #564]	; (1bfc <tcc_init+0x328>)
    19c8:	4798      	blx	r3
    19ca:	0003      	movs	r3, r0
    19cc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    19ce:	2333      	movs	r3, #51	; 0x33
    19d0:	18fb      	adds	r3, r7, r3
    19d2:	781b      	ldrb	r3, [r3, #0]
    19d4:	2b00      	cmp	r3, #0
    19d6:	d003      	beq.n	19e0 <tcc_init+0x10c>
		return status;
    19d8:	2333      	movs	r3, #51	; 0x33
    19da:	18fb      	adds	r3, r7, r3
    19dc:	781b      	ldrb	r3, [r3, #0]
    19de:	e0fe      	b.n	1bde <tcc_init+0x30a>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    19e0:	232b      	movs	r3, #43	; 0x2b
    19e2:	18fa      	adds	r2, r7, r3
    19e4:	6879      	ldr	r1, [r7, #4]
    19e6:	233b      	movs	r3, #59	; 0x3b
    19e8:	18fb      	adds	r3, r7, r3
    19ea:	781b      	ldrb	r3, [r3, #0]
    19ec:	0018      	movs	r0, r3
    19ee:	4b84      	ldr	r3, [pc, #528]	; (1c00 <tcc_init+0x32c>)
    19f0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    19f2:	2333      	movs	r3, #51	; 0x33
    19f4:	18fc      	adds	r4, r7, r3
    19f6:	2320      	movs	r3, #32
    19f8:	18fa      	adds	r2, r7, r3
    19fa:	6879      	ldr	r1, [r7, #4]
    19fc:	233b      	movs	r3, #59	; 0x3b
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	0018      	movs	r0, r3
    1a04:	4b7f      	ldr	r3, [pc, #508]	; (1c04 <tcc_init+0x330>)
    1a06:	4798      	blx	r3
    1a08:	0003      	movs	r3, r0
    1a0a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    1a0c:	2333      	movs	r3, #51	; 0x33
    1a0e:	18fb      	adds	r3, r7, r3
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d003      	beq.n	1a1e <tcc_init+0x14a>
		return status;
    1a16:	2333      	movs	r3, #51	; 0x33
    1a18:	18fb      	adds	r3, r7, r3
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	e0df      	b.n	1bde <tcc_init+0x30a>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    1a1e:	2300      	movs	r3, #0
    1a20:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    1a22:	2333      	movs	r3, #51	; 0x33
    1a24:	18fc      	adds	r4, r7, r3
    1a26:	231c      	movs	r3, #28
    1a28:	18fa      	adds	r2, r7, r3
    1a2a:	6879      	ldr	r1, [r7, #4]
    1a2c:	233b      	movs	r3, #59	; 0x3b
    1a2e:	18fb      	adds	r3, r7, r3
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	0018      	movs	r0, r3
    1a34:	4b74      	ldr	r3, [pc, #464]	; (1c08 <tcc_init+0x334>)
    1a36:	4798      	blx	r3
    1a38:	0003      	movs	r3, r0
    1a3a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    1a3c:	2333      	movs	r3, #51	; 0x33
    1a3e:	18fb      	adds	r3, r7, r3
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d003      	beq.n	1a4e <tcc_init+0x17a>
		return status;
    1a46:	2333      	movs	r3, #51	; 0x33
    1a48:	18fb      	adds	r3, r7, r3
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	e0c7      	b.n	1bde <tcc_init+0x30a>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    1a4e:	2333      	movs	r3, #51	; 0x33
    1a50:	18fc      	adds	r4, r7, r3
    1a52:	2318      	movs	r3, #24
    1a54:	18fa      	adds	r2, r7, r3
    1a56:	6879      	ldr	r1, [r7, #4]
    1a58:	233b      	movs	r3, #59	; 0x3b
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	781b      	ldrb	r3, [r3, #0]
    1a5e:	0018      	movs	r0, r3
    1a60:	4b6a      	ldr	r3, [pc, #424]	; (1c0c <tcc_init+0x338>)
    1a62:	4798      	blx	r3
    1a64:	0003      	movs	r3, r0
    1a66:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    1a68:	2333      	movs	r3, #51	; 0x33
    1a6a:	18fb      	adds	r3, r7, r3
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d003      	beq.n	1a7a <tcc_init+0x1a6>
		return status;
    1a72:	2333      	movs	r3, #51	; 0x33
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	781b      	ldrb	r3, [r3, #0]
    1a78:	e0b1      	b.n	1bde <tcc_init+0x30a>
	module_inst->register_callback_mask = 0;
	module_inst->enable_callback_mask = 0;
	_tcc_instances[module_index] = module_inst;
#endif

	module_inst->hw = hw;
    1a7a:	68fb      	ldr	r3, [r7, #12]
    1a7c:	68ba      	ldr	r2, [r7, #8]
    1a7e:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	22a0      	movs	r2, #160	; 0xa0
    1a84:	5c9a      	ldrb	r2, [r3, r2]
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	711a      	strb	r2, [r3, #4]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1a8a:	2314      	movs	r3, #20
    1a8c:	18fb      	adds	r3, r7, r3
    1a8e:	0018      	movs	r0, r3
    1a90:	4b5f      	ldr	r3, [pc, #380]	; (1c10 <tcc_init+0x33c>)
    1a92:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	7ada      	ldrb	r2, [r3, #11]
    1a98:	2314      	movs	r3, #20
    1a9a:	18fb      	adds	r3, r7, r3
    1a9c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1a9e:	233b      	movs	r3, #59	; 0x3b
    1aa0:	18fb      	adds	r3, r7, r3
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	4a5b      	ldr	r2, [pc, #364]	; (1c14 <tcc_init+0x340>)
    1aa6:	5cd3      	ldrb	r3, [r2, r3]
    1aa8:	2214      	movs	r2, #20
    1aaa:	18ba      	adds	r2, r7, r2
    1aac:	0011      	movs	r1, r2
    1aae:	0018      	movs	r0, r3
    1ab0:	4b59      	ldr	r3, [pc, #356]	; (1c18 <tcc_init+0x344>)
    1ab2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1ab4:	233b      	movs	r3, #59	; 0x3b
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	4a56      	ldr	r2, [pc, #344]	; (1c14 <tcc_init+0x340>)
    1abc:	5cd3      	ldrb	r3, [r2, r3]
    1abe:	0018      	movs	r0, r3
    1ac0:	4b56      	ldr	r3, [pc, #344]	; (1c1c <tcc_init+0x348>)
    1ac2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1ac4:	2300      	movs	r3, #0
    1ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    1ac8:	e02d      	b.n	1b26 <tcc_init+0x252>
		if (!config->pins.enable_wave_out_pin[i]) {
    1aca:	687a      	ldr	r2, [r7, #4]
    1acc:	2198      	movs	r1, #152	; 0x98
    1ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ad0:	18d3      	adds	r3, r2, r3
    1ad2:	185b      	adds	r3, r3, r1
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	2201      	movs	r2, #1
    1ad8:	4053      	eors	r3, r2
    1ada:	b2db      	uxtb	r3, r3
    1adc:	2b00      	cmp	r3, #0
    1ade:	d11e      	bne.n	1b1e <tcc_init+0x24a>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    1ae0:	2310      	movs	r3, #16
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b4e      	ldr	r3, [pc, #312]	; (1c20 <tcc_init+0x34c>)
    1ae8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1aee:	321e      	adds	r2, #30
    1af0:	0092      	lsls	r2, r2, #2
    1af2:	58d3      	ldr	r3, [r2, r3]
    1af4:	b2da      	uxtb	r2, r3
    1af6:	2310      	movs	r3, #16
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1afc:	2310      	movs	r3, #16
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	2201      	movs	r2, #1
    1b02:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b08:	3216      	adds	r2, #22
    1b0a:	0092      	lsls	r2, r2, #2
    1b0c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	2210      	movs	r2, #16
    1b12:	18ba      	adds	r2, r7, r2
    1b14:	0011      	movs	r1, r2
    1b16:	0018      	movs	r0, r3
    1b18:	4b42      	ldr	r3, [pc, #264]	; (1c24 <tcc_init+0x350>)
    1b1a:	4798      	blx	r3
    1b1c:	e000      	b.n	1b20 <tcc_init+0x24c>
			continue;
    1b1e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b22:	3301      	adds	r3, #1
    1b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    1b26:	233b      	movs	r3, #59	; 0x3b
    1b28:	18fb      	adds	r3, r7, r3
    1b2a:	781b      	ldrb	r3, [r3, #0]
    1b2c:	4a32      	ldr	r2, [pc, #200]	; (1bf8 <tcc_init+0x324>)
    1b2e:	5cd3      	ldrb	r3, [r2, r3]
    1b30:	001a      	movs	r2, r3
    1b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b34:	429a      	cmp	r2, r3
    1b36:	dcc8      	bgt.n	1aca <tcc_init+0x1f6>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    1b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b3a:	68bb      	ldr	r3, [r7, #8]
    1b3c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	68bb      	ldr	r3, [r7, #8]
    1b42:	689b      	ldr	r3, [r3, #8]
    1b44:	2204      	movs	r2, #4
    1b46:	4013      	ands	r3, r2
    1b48:	d1fa      	bne.n	1b40 <tcc_init+0x26c>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    1b4a:	68bb      	ldr	r3, [r7, #8]
    1b4c:	22ff      	movs	r2, #255	; 0xff
    1b4e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	68bb      	ldr	r3, [r7, #8]
    1b54:	689b      	ldr	r3, [r3, #8]
    1b56:	2204      	movs	r2, #4
    1b58:	4013      	ands	r3, r2
    1b5a:	d1fa      	bne.n	1b52 <tcc_init+0x27e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    1b5c:	232b      	movs	r3, #43	; 0x2b
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	781a      	ldrb	r2, [r3, #0]
    1b62:	68bb      	ldr	r3, [r7, #8]
    1b64:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    1b66:	2320      	movs	r3, #32
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	681a      	ldr	r2, [r3, #0]
    1b6c:	68bb      	ldr	r3, [r7, #8]
    1b6e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    1b70:	2320      	movs	r3, #32
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	685a      	ldr	r2, [r3, #4]
    1b76:	68bb      	ldr	r3, [r7, #8]
    1b78:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    1b7a:	69fa      	ldr	r2, [r7, #28]
    1b7c:	68bb      	ldr	r3, [r7, #8]
    1b7e:	619a      	str	r2, [r3, #24]
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30) && (!SAMR34) && (!SAMR35)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    1b80:	69ba      	ldr	r2, [r7, #24]
    1b82:	68bb      	ldr	r3, [r7, #8]
    1b84:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	68bb      	ldr	r3, [r7, #8]
    1b8a:	689b      	ldr	r3, [r3, #8]
    1b8c:	2210      	movs	r2, #16
    1b8e:	4013      	ands	r3, r2
    1b90:	d1fa      	bne.n	1b88 <tcc_init+0x2b4>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	681a      	ldr	r2, [r3, #0]
    1b96:	68bb      	ldr	r3, [r7, #8]
    1b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30) && (!SAMR34) && (!SAMR35)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	685a      	ldr	r2, [r3, #4]
    1b9e:	68bb      	ldr	r3, [r7, #8]
    1ba0:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1ba2:	2300      	movs	r3, #0
    1ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    1ba6:	e010      	b.n	1bca <tcc_init+0x2f6>
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    1ba8:	687a      	ldr	r2, [r7, #4]
    1baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bac:	3306      	adds	r3, #6
    1bae:	009b      	lsls	r3, r3, #2
    1bb0:	18d3      	adds	r3, r2, r3
    1bb2:	3304      	adds	r3, #4
    1bb4:	681a      	ldr	r2, [r3, #0]
    1bb6:	68b9      	ldr	r1, [r7, #8]
    1bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bba:	3310      	adds	r3, #16
    1bbc:	009b      	lsls	r3, r3, #2
    1bbe:	18cb      	adds	r3, r1, r3
    1bc0:	3304      	adds	r3, #4
    1bc2:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bc6:	3301      	adds	r3, #1
    1bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    1bca:	233b      	movs	r3, #59	; 0x3b
    1bcc:	18fb      	adds	r3, r7, r3
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	4a15      	ldr	r2, [pc, #84]	; (1c28 <tcc_init+0x354>)
    1bd2:	5cd3      	ldrb	r3, [r2, r3]
    1bd4:	001a      	movs	r2, r3
    1bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bd8:	429a      	cmp	r2, r3
    1bda:	dce5      	bgt.n	1ba8 <tcc_init+0x2d4>
	}

	return STATUS_OK;
    1bdc:	2300      	movs	r3, #0
}
    1bde:	0018      	movs	r0, r3
    1be0:	46bd      	mov	sp, r7
    1be2:	b011      	add	sp, #68	; 0x44
    1be4:	bd90      	pop	{r4, r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001239 	.word	0x00001239
    1bec:	000046a0 	.word	0x000046a0
    1bf0:	00001195 	.word	0x00001195
    1bf4:	000046ac 	.word	0x000046ac
    1bf8:	000046bc 	.word	0x000046bc
    1bfc:	00001549 	.word	0x00001549
    1c00:	000015ed 	.word	0x000015ed
    1c04:	00001649 	.word	0x00001649
    1c08:	00001765 	.word	0x00001765
    1c0c:	0000183d 	.word	0x0000183d
    1c10:	0000117d 	.word	0x0000117d
    1c14:	0000469c 	.word	0x0000469c
    1c18:	00000ed5 	.word	0x00000ed5
    1c1c:	00000f15 	.word	0x00000f15
    1c20:	00001211 	.word	0x00001211
    1c24:	00001135 	.word	0x00001135
    1c28:	000046b8 	.word	0x000046b8

00001c2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1c32:	4b19      	ldr	r3, [pc, #100]	; (1c98 <Reset_Handler+0x6c>)
    1c34:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1c36:	4b19      	ldr	r3, [pc, #100]	; (1c9c <Reset_Handler+0x70>)
    1c38:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1c3a:	687a      	ldr	r2, [r7, #4]
    1c3c:	683b      	ldr	r3, [r7, #0]
    1c3e:	429a      	cmp	r2, r3
    1c40:	d00c      	beq.n	1c5c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1c42:	e007      	b.n	1c54 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1c44:	683b      	ldr	r3, [r7, #0]
    1c46:	1d1a      	adds	r2, r3, #4
    1c48:	603a      	str	r2, [r7, #0]
    1c4a:	687a      	ldr	r2, [r7, #4]
    1c4c:	1d11      	adds	r1, r2, #4
    1c4e:	6079      	str	r1, [r7, #4]
    1c50:	6812      	ldr	r2, [r2, #0]
    1c52:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1c54:	683a      	ldr	r2, [r7, #0]
    1c56:	4b12      	ldr	r3, [pc, #72]	; (1ca0 <Reset_Handler+0x74>)
    1c58:	429a      	cmp	r2, r3
    1c5a:	d3f3      	bcc.n	1c44 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1c5c:	4b11      	ldr	r3, [pc, #68]	; (1ca4 <Reset_Handler+0x78>)
    1c5e:	603b      	str	r3, [r7, #0]
    1c60:	e004      	b.n	1c6c <Reset_Handler+0x40>
                *pDest++ = 0;
    1c62:	683b      	ldr	r3, [r7, #0]
    1c64:	1d1a      	adds	r2, r3, #4
    1c66:	603a      	str	r2, [r7, #0]
    1c68:	2200      	movs	r2, #0
    1c6a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1c6c:	683a      	ldr	r2, [r7, #0]
    1c6e:	4b0e      	ldr	r3, [pc, #56]	; (1ca8 <Reset_Handler+0x7c>)
    1c70:	429a      	cmp	r2, r3
    1c72:	d3f6      	bcc.n	1c62 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1c74:	4b0d      	ldr	r3, [pc, #52]	; (1cac <Reset_Handler+0x80>)
    1c76:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c78:	4b0d      	ldr	r3, [pc, #52]	; (1cb0 <Reset_Handler+0x84>)
    1c7a:	687a      	ldr	r2, [r7, #4]
    1c7c:	21ff      	movs	r1, #255	; 0xff
    1c7e:	438a      	bics	r2, r1
    1c80:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c82:	4a0c      	ldr	r2, [pc, #48]	; (1cb4 <Reset_Handler+0x88>)
    1c84:	6853      	ldr	r3, [r2, #4]
    1c86:	2180      	movs	r1, #128	; 0x80
    1c88:	430b      	orrs	r3, r1
    1c8a:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1c8c:	4b0a      	ldr	r3, [pc, #40]	; (1cb8 <Reset_Handler+0x8c>)
    1c8e:	4798      	blx	r3

        /* Branch to main function */
        main();
    1c90:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <Reset_Handler+0x90>)
    1c92:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1c94:	e7fe      	b.n	1c94 <Reset_Handler+0x68>
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00004820 	.word	0x00004820
    1c9c:	20000000 	.word	0x20000000
    1ca0:	20000004 	.word	0x20000004
    1ca4:	20000004 	.word	0x20000004
    1ca8:	2000002c 	.word	0x2000002c
    1cac:	00000000 	.word	0x00000000
    1cb0:	e000ed00 	.word	0xe000ed00
    1cb4:	41004000 	.word	0x41004000
    1cb8:	000044c5 	.word	0x000044c5
    1cbc:	00002269 	.word	0x00002269

00001cc0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	af00      	add	r7, sp, #0
        while (1) {
    1cc4:	e7fe      	b.n	1cc4 <Dummy_Handler+0x4>

00001cc6 <system_pinmux_get_config_defaults>:
{
    1cc6:	b580      	push	{r7, lr}
    1cc8:	b082      	sub	sp, #8
    1cca:	af00      	add	r7, sp, #0
    1ccc:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	2280      	movs	r2, #128	; 0x80
    1cd2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	2200      	movs	r2, #0
    1cd8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	2201      	movs	r2, #1
    1cde:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	2200      	movs	r2, #0
    1ce4:	70da      	strb	r2, [r3, #3]
}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	46bd      	mov	sp, r7
    1cea:	b002      	add	sp, #8
    1cec:	bd80      	pop	{r7, pc}

00001cee <system_voltage_reference_get_config_defaults>:
{
    1cee:	b580      	push	{r7, lr}
    1cf0:	b082      	sub	sp, #8
    1cf2:	af00      	add	r7, sp, #0
    1cf4:	6078      	str	r0, [r7, #4]
	config->sel            = SYSTEM_VOLTAGE_REFERENCE_1V0;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	2200      	movs	r2, #0
    1cfa:	701a      	strb	r2, [r3, #0]
	config->on_demand      = false;
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	2200      	movs	r2, #0
    1d00:	705a      	strb	r2, [r3, #1]
	config->run_in_standby = false;
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	2200      	movs	r2, #0
    1d06:	709a      	strb	r2, [r3, #2]
}
    1d08:	46c0      	nop			; (mov r8, r8)
    1d0a:	46bd      	mov	sp, r7
    1d0c:	b002      	add	sp, #8
    1d0e:	bd80      	pop	{r7, pc}

00001d10 <system_voltage_reference_set_config>:
{
    1d10:	b580      	push	{r7, lr}
    1d12:	b082      	sub	sp, #8
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
	SUPC->VREF.bit.SEL      = config->sel;
    1d18:	4a14      	ldr	r2, [pc, #80]	; (1d6c <system_voltage_reference_set_config+0x5c>)
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	1c19      	adds	r1, r3, #0
    1d20:	230f      	movs	r3, #15
    1d22:	400b      	ands	r3, r1
    1d24:	b2d9      	uxtb	r1, r3
    1d26:	69d3      	ldr	r3, [r2, #28]
    1d28:	200f      	movs	r0, #15
    1d2a:	4001      	ands	r1, r0
    1d2c:	0409      	lsls	r1, r1, #16
    1d2e:	4810      	ldr	r0, [pc, #64]	; (1d70 <system_voltage_reference_set_config+0x60>)
    1d30:	4003      	ands	r3, r0
    1d32:	430b      	orrs	r3, r1
    1d34:	61d3      	str	r3, [r2, #28]
	SUPC->VREF.bit.ONDEMAND = config->on_demand;
    1d36:	4a0d      	ldr	r2, [pc, #52]	; (1d6c <system_voltage_reference_set_config+0x5c>)
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	7859      	ldrb	r1, [r3, #1]
    1d3c:	69d3      	ldr	r3, [r2, #28]
    1d3e:	2001      	movs	r0, #1
    1d40:	4001      	ands	r1, r0
    1d42:	01c9      	lsls	r1, r1, #7
    1d44:	2080      	movs	r0, #128	; 0x80
    1d46:	4383      	bics	r3, r0
    1d48:	430b      	orrs	r3, r1
    1d4a:	61d3      	str	r3, [r2, #28]
	SUPC->VREF.bit.RUNSTDBY = config->run_in_standby;
    1d4c:	4a07      	ldr	r2, [pc, #28]	; (1d6c <system_voltage_reference_set_config+0x5c>)
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	7899      	ldrb	r1, [r3, #2]
    1d52:	69d3      	ldr	r3, [r2, #28]
    1d54:	2001      	movs	r0, #1
    1d56:	4001      	ands	r1, r0
    1d58:	0189      	lsls	r1, r1, #6
    1d5a:	2040      	movs	r0, #64	; 0x40
    1d5c:	4383      	bics	r3, r0
    1d5e:	430b      	orrs	r3, r1
    1d60:	61d3      	str	r3, [r2, #28]
}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	46bd      	mov	sp, r7
    1d66:	b002      	add	sp, #8
    1d68:	bd80      	pop	{r7, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	40001400 	.word	0x40001400
    1d70:	fff0ffff 	.word	0xfff0ffff

00001d74 <adc_is_syncing>:
{
    1d74:	b580      	push	{r7, lr}
    1d76:	b084      	sub	sp, #16
    1d78:	af00      	add	r7, sp, #0
    1d7a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	8c1b      	ldrh	r3, [r3, #32]
    1d86:	b29b      	uxth	r3, r3
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d001      	beq.n	1d90 <adc_is_syncing+0x1c>
		return true;
    1d8c:	2301      	movs	r3, #1
    1d8e:	e000      	b.n	1d92 <adc_is_syncing+0x1e>
	return false;
    1d90:	2300      	movs	r3, #0
}
    1d92:	0018      	movs	r0, r3
    1d94:	46bd      	mov	sp, r7
    1d96:	b004      	add	sp, #16
    1d98:	bd80      	pop	{r7, pc}

00001d9a <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    1d9a:	b580      	push	{r7, lr}
    1d9c:	b086      	sub	sp, #24
    1d9e:	af00      	add	r7, sp, #0
    1da0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	681b      	ldr	r3, [r3, #0]
    1da6:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    1da8:	693b      	ldr	r3, [r7, #16]
    1daa:	799b      	ldrb	r3, [r3, #6]
    1dac:	b2db      	uxtb	r3, r3
    1dae:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    1db0:	2300      	movs	r3, #0
    1db2:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	2201      	movs	r2, #1
    1db8:	4013      	ands	r3, r2
    1dba:	d003      	beq.n	1dc4 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    1dbc:	697b      	ldr	r3, [r7, #20]
    1dbe:	2201      	movs	r2, #1
    1dc0:	4313      	orrs	r3, r2
    1dc2:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	2204      	movs	r2, #4
    1dc8:	4013      	ands	r3, r2
    1dca:	d003      	beq.n	1dd4 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	2202      	movs	r2, #2
    1dd0:	4313      	orrs	r3, r2
    1dd2:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	2202      	movs	r2, #2
    1dd8:	4013      	ands	r3, r2
    1dda:	d003      	beq.n	1de4 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    1ddc:	697b      	ldr	r3, [r7, #20]
    1dde:	2204      	movs	r2, #4
    1de0:	4313      	orrs	r3, r2
    1de2:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    1de4:	697b      	ldr	r3, [r7, #20]
}
    1de6:	0018      	movs	r0, r3
    1de8:	46bd      	mov	sp, r7
    1dea:	b006      	add	sp, #24
    1dec:	bd80      	pop	{r7, pc}

00001dee <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    1dee:	b580      	push	{r7, lr}
    1df0:	b084      	sub	sp, #16
    1df2:	af00      	add	r7, sp, #0
    1df4:	6078      	str	r0, [r7, #4]
    1df6:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    1dfe:	2300      	movs	r3, #0
    1e00:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    1e02:	683b      	ldr	r3, [r7, #0]
    1e04:	2201      	movs	r2, #1
    1e06:	4013      	ands	r3, r2
    1e08:	d003      	beq.n	1e12 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    1e0a:	68fb      	ldr	r3, [r7, #12]
    1e0c:	2201      	movs	r2, #1
    1e0e:	4313      	orrs	r3, r2
    1e10:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    1e12:	683b      	ldr	r3, [r7, #0]
    1e14:	2202      	movs	r2, #2
    1e16:	4013      	ands	r3, r2
    1e18:	d003      	beq.n	1e22 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    1e1a:	68fb      	ldr	r3, [r7, #12]
    1e1c:	2204      	movs	r2, #4
    1e1e:	4313      	orrs	r3, r2
    1e20:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    1e22:	683b      	ldr	r3, [r7, #0]
    1e24:	2204      	movs	r2, #4
    1e26:	4013      	ands	r3, r2
    1e28:	d003      	beq.n	1e32 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    1e2a:	68fb      	ldr	r3, [r7, #12]
    1e2c:	2202      	movs	r2, #2
    1e2e:	4313      	orrs	r3, r2
    1e30:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	b2da      	uxtb	r2, r3
    1e36:	68bb      	ldr	r3, [r7, #8]
    1e38:	719a      	strb	r2, [r3, #6]
}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	46bd      	mov	sp, r7
    1e3e:	b004      	add	sp, #16
    1e40:	bd80      	pop	{r7, pc}
	...

00001e44 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b084      	sub	sp, #16
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	0018      	movs	r0, r3
    1e58:	4b0e      	ldr	r3, [pc, #56]	; (1e94 <adc_enable+0x50>)
    1e5a:	4798      	blx	r3
    1e5c:	1e03      	subs	r3, r0, #0
    1e5e:	d1f9      	bne.n	1e54 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1e60:	68fb      	ldr	r3, [r7, #12]
    1e62:	2207      	movs	r2, #7
    1e64:	711a      	strb	r2, [r3, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1e66:	68fb      	ldr	r3, [r7, #12]
    1e68:	2207      	movs	r2, #7
    1e6a:	719a      	strb	r2, [r3, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1e6c:	68fb      	ldr	r3, [r7, #12]
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	b2db      	uxtb	r3, r3
    1e72:	2202      	movs	r2, #2
    1e74:	4313      	orrs	r3, r2
    1e76:	b2da      	uxtb	r2, r3
    1e78:	68fb      	ldr	r3, [r7, #12]
    1e7a:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	0018      	movs	r0, r3
    1e82:	4b04      	ldr	r3, [pc, #16]	; (1e94 <adc_enable+0x50>)
    1e84:	4798      	blx	r3
    1e86:	1e03      	subs	r3, r0, #0
    1e88:	d1f9      	bne.n	1e7e <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    1e8a:	2300      	movs	r3, #0
}
    1e8c:	0018      	movs	r0, r3
    1e8e:	46bd      	mov	sp, r7
    1e90:	b004      	add	sp, #16
    1e92:	bd80      	pop	{r7, pc}
    1e94:	00001d75 	.word	0x00001d75

00001e98 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b084      	sub	sp, #16
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	0018      	movs	r0, r3
    1eac:	4b0b      	ldr	r3, [pc, #44]	; (1edc <adc_start_conversion+0x44>)
    1eae:	4798      	blx	r3
    1eb0:	1e03      	subs	r3, r0, #0
    1eb2:	d1f9      	bne.n	1ea8 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1eb4:	68fb      	ldr	r3, [r7, #12]
    1eb6:	7e1b      	ldrb	r3, [r3, #24]
    1eb8:	b2db      	uxtb	r3, r3
    1eba:	2202      	movs	r2, #2
    1ebc:	4313      	orrs	r3, r2
    1ebe:	b2da      	uxtb	r2, r3
    1ec0:	68fb      	ldr	r3, [r7, #12]
    1ec2:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	0018      	movs	r0, r3
    1eca:	4b04      	ldr	r3, [pc, #16]	; (1edc <adc_start_conversion+0x44>)
    1ecc:	4798      	blx	r3
    1ece:	1e03      	subs	r3, r0, #0
    1ed0:	d1f9      	bne.n	1ec6 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	46bd      	mov	sp, r7
    1ed6:	b004      	add	sp, #16
    1ed8:	bd80      	pop	{r7, pc}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	00001d75 	.word	0x00001d75

00001ee0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b084      	sub	sp, #16
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
    1ee8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	0018      	movs	r0, r3
    1eee:	4b14      	ldr	r3, [pc, #80]	; (1f40 <adc_read+0x60>)
    1ef0:	4798      	blx	r3
    1ef2:	0002      	movs	r2, r0
    1ef4:	2301      	movs	r3, #1
    1ef6:	4013      	ands	r3, r2
    1ef8:	d101      	bne.n	1efe <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    1efa:	2305      	movs	r3, #5
    1efc:	e01c      	b.n	1f38 <adc_read+0x58>
	}

	Adc *const adc_module = module_inst->hw;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	681b      	ldr	r3, [r3, #0]
    1f02:	60fb      	str	r3, [r7, #12]
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1f08:	b29a      	uxth	r2, r3
    1f0a:	683b      	ldr	r3, [r7, #0]
    1f0c:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    1f0e:	687b      	ldr	r3, [r7, #4]
    1f10:	2101      	movs	r1, #1
    1f12:	0018      	movs	r0, r3
    1f14:	4b0b      	ldr	r3, [pc, #44]	; (1f44 <adc_read+0x64>)
    1f16:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	0018      	movs	r0, r3
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <adc_read+0x60>)
    1f1e:	4798      	blx	r3
    1f20:	0002      	movs	r2, r0
    1f22:	2304      	movs	r3, #4
    1f24:	4013      	ands	r3, r2
    1f26:	d006      	beq.n	1f36 <adc_read+0x56>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	2104      	movs	r1, #4
    1f2c:	0018      	movs	r0, r3
    1f2e:	4b05      	ldr	r3, [pc, #20]	; (1f44 <adc_read+0x64>)
    1f30:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    1f32:	231e      	movs	r3, #30
    1f34:	e000      	b.n	1f38 <adc_read+0x58>
	}

	return STATUS_OK;
    1f36:	2300      	movs	r3, #0
}
    1f38:	0018      	movs	r0, r3
    1f3a:	46bd      	mov	sp, r7
    1f3c:	b004      	add	sp, #16
    1f3e:	bd80      	pop	{r7, pc}
    1f40:	00001d9b 	.word	0x00001d9b
    1f44:	00001def 	.word	0x00001def

00001f48 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
    1f50:	000a      	movs	r2, r1
    1f52:	1cfb      	adds	r3, r7, #3
    1f54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1f56:	687b      	ldr	r3, [r7, #4]
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1f5c:	46c0      	nop			; (mov r8, r8)
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	0018      	movs	r0, r3
    1f62:	4b0e      	ldr	r3, [pc, #56]	; (1f9c <adc_set_positive_input+0x54>)
    1f64:	4798      	blx	r3
    1f66:	1e03      	subs	r3, r0, #0
    1f68:	d1f9      	bne.n	1f5e <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1f6a:	68fb      	ldr	r3, [r7, #12]
    1f6c:	891b      	ldrh	r3, [r3, #8]
    1f6e:	b29b      	uxth	r3, r3
    1f70:	221f      	movs	r2, #31
    1f72:	4393      	bics	r3, r2
    1f74:	b29a      	uxth	r2, r3
    1f76:	1cfb      	adds	r3, r7, #3
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	b29b      	uxth	r3, r3
    1f7c:	4313      	orrs	r3, r2
    1f7e:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	811a      	strh	r2, [r3, #8]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    1f84:	46c0      	nop			; (mov r8, r8)
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	0018      	movs	r0, r3
    1f8a:	4b04      	ldr	r3, [pc, #16]	; (1f9c <adc_set_positive_input+0x54>)
    1f8c:	4798      	blx	r3
    1f8e:	1e03      	subs	r3, r0, #0
    1f90:	d1f9      	bne.n	1f86 <adc_set_positive_input+0x3e>
		/* Wait for synchronization */
	}
}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	46bd      	mov	sp, r7
    1f96:	b004      	add	sp, #16
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00001d75 	.word	0x00001d75

00001fa0 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b082      	sub	sp, #8
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	095b      	lsrs	r3, r3, #5
}
    1fac:	0018      	movs	r0, r3
    1fae:	46bd      	mov	sp, r7
    1fb0:	b002      	add	sp, #8
    1fb2:	bd80      	pop	{r7, pc}

00001fb4 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b082      	sub	sp, #8
    1fb8:	af00      	add	r7, sp, #0
    1fba:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	01db      	lsls	r3, r3, #7
    1fc0:	4a03      	ldr	r2, [pc, #12]	; (1fd0 <arch_ioport_port_to_base+0x1c>)
    1fc2:	4694      	mov	ip, r2
    1fc4:	4463      	add	r3, ip
}
    1fc6:	0018      	movs	r0, r3
    1fc8:	46bd      	mov	sp, r7
    1fca:	b002      	add	sp, #8
    1fcc:	bd80      	pop	{r7, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	40002800 	.word	0x40002800

00001fd4 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b082      	sub	sp, #8
    1fd8:	af00      	add	r7, sp, #0
    1fda:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    1fdc:	687b      	ldr	r3, [r7, #4]
    1fde:	0018      	movs	r0, r3
    1fe0:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <arch_ioport_pin_to_base+0x24>)
    1fe2:	4798      	blx	r3
    1fe4:	0003      	movs	r3, r0
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b04      	ldr	r3, [pc, #16]	; (1ffc <arch_ioport_pin_to_base+0x28>)
    1fea:	4798      	blx	r3
    1fec:	0003      	movs	r3, r0
}
    1fee:	0018      	movs	r0, r3
    1ff0:	46bd      	mov	sp, r7
    1ff2:	b002      	add	sp, #8
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	00001fa1 	.word	0x00001fa1
    1ffc:	00001fb5 	.word	0x00001fb5

00002000 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    2000:	b580      	push	{r7, lr}
    2002:	b082      	sub	sp, #8
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	221f      	movs	r2, #31
    200c:	4013      	ands	r3, r2
    200e:	2201      	movs	r2, #1
    2010:	409a      	lsls	r2, r3
    2012:	0013      	movs	r3, r2
}
    2014:	0018      	movs	r0, r3
    2016:	46bd      	mov	sp, r7
    2018:	b002      	add	sp, #8
    201a:	bd80      	pop	{r7, pc}

0000201c <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
    201c:	b580      	push	{r7, lr}
    201e:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
    2020:	46c0      	nop			; (mov r8, r8)
    2022:	46bd      	mov	sp, r7
    2024:	bd80      	pop	{r7, pc}
	...

00002028 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    2028:	b580      	push	{r7, lr}
    202a:	b084      	sub	sp, #16
    202c:	af00      	add	r7, sp, #0
    202e:	6078      	str	r0, [r7, #4]
    2030:	000a      	movs	r2, r1
    2032:	1cfb      	adds	r3, r7, #3
    2034:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	0018      	movs	r0, r3
    203a:	4b1a      	ldr	r3, [pc, #104]	; (20a4 <arch_ioport_set_pin_dir+0x7c>)
    203c:	4798      	blx	r3
    203e:	0003      	movs	r3, r0
    2040:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
    2042:	1cfb      	adds	r3, r7, #3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	2b01      	cmp	r3, #1
    2048:	d107      	bne.n	205a <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	0018      	movs	r0, r3
    204e:	4b16      	ldr	r3, [pc, #88]	; (20a8 <arch_ioport_set_pin_dir+0x80>)
    2050:	4798      	blx	r3
    2052:	0002      	movs	r2, r0
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	609a      	str	r2, [r3, #8]
    2058:	e00a      	b.n	2070 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    205a:	1cfb      	adds	r3, r7, #3
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	2b00      	cmp	r3, #0
    2060:	d106      	bne.n	2070 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	0018      	movs	r0, r3
    2066:	4b10      	ldr	r3, [pc, #64]	; (20a8 <arch_ioport_set_pin_dir+0x80>)
    2068:	4798      	blx	r3
    206a:	0002      	movs	r2, r0
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	221f      	movs	r2, #31
    2074:	4013      	ands	r3, r2
    2076:	687a      	ldr	r2, [r7, #4]
    2078:	211f      	movs	r1, #31
    207a:	400a      	ands	r2, r1
    207c:	68f9      	ldr	r1, [r7, #12]
    207e:	2040      	movs	r0, #64	; 0x40
    2080:	188a      	adds	r2, r1, r2
    2082:	1812      	adds	r2, r2, r0
    2084:	7812      	ldrb	r2, [r2, #0]
    2086:	b2d2      	uxtb	r2, r2
    2088:	2102      	movs	r1, #2
    208a:	430a      	orrs	r2, r1
    208c:	b2d0      	uxtb	r0, r2
    208e:	68fa      	ldr	r2, [r7, #12]
    2090:	2140      	movs	r1, #64	; 0x40
    2092:	18d3      	adds	r3, r2, r3
    2094:	185b      	adds	r3, r3, r1
    2096:	1c02      	adds	r2, r0, #0
    2098:	701a      	strb	r2, [r3, #0]
}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	46bd      	mov	sp, r7
    209e:	b004      	add	sp, #16
    20a0:	bd80      	pop	{r7, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	00001fd5 	.word	0x00001fd5
    20a8:	00002001 	.word	0x00002001

000020ac <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    20ac:	b590      	push	{r4, r7, lr}
    20ae:	b083      	sub	sp, #12
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
    20b4:	000a      	movs	r2, r1
    20b6:	1cfb      	adds	r3, r7, #3
    20b8:	701a      	strb	r2, [r3, #0]
	if (level) {
    20ba:	1cfb      	adds	r3, r7, #3
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b00      	cmp	r3, #0
    20c0:	d00b      	beq.n	20da <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	0018      	movs	r0, r3
    20c6:	4b0c      	ldr	r3, [pc, #48]	; (20f8 <arch_ioport_set_pin_level+0x4c>)
    20c8:	4798      	blx	r3
    20ca:	0004      	movs	r4, r0
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	0018      	movs	r0, r3
    20d0:	4b0a      	ldr	r3, [pc, #40]	; (20fc <arch_ioport_set_pin_level+0x50>)
    20d2:	4798      	blx	r3
    20d4:	0003      	movs	r3, r0
    20d6:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    20d8:	e00a      	b.n	20f0 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	0018      	movs	r0, r3
    20de:	4b06      	ldr	r3, [pc, #24]	; (20f8 <arch_ioport_set_pin_level+0x4c>)
    20e0:	4798      	blx	r3
    20e2:	0004      	movs	r4, r0
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	0018      	movs	r0, r3
    20e8:	4b04      	ldr	r3, [pc, #16]	; (20fc <arch_ioport_set_pin_level+0x50>)
    20ea:	4798      	blx	r3
    20ec:	0003      	movs	r3, r0
    20ee:	6163      	str	r3, [r4, #20]
}
    20f0:	46c0      	nop			; (mov r8, r8)
    20f2:	46bd      	mov	sp, r7
    20f4:	b003      	add	sp, #12
    20f6:	bd90      	pop	{r4, r7, pc}
    20f8:	00001fd5 	.word	0x00001fd5
    20fc:	00002001 	.word	0x00002001

00002100 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    2100:	b580      	push	{r7, lr}
    2102:	af00      	add	r7, sp, #0
	arch_ioport_init();
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <ioport_init+0x10>)
    2106:	4798      	blx	r3
}
    2108:	46c0      	nop			; (mov r8, r8)
    210a:	46bd      	mov	sp, r7
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	0000201d 	.word	0x0000201d

00002114 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
    211c:	000a      	movs	r2, r1
    211e:	1cfb      	adds	r3, r7, #3
    2120:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    2122:	1cfb      	adds	r3, r7, #3
    2124:	781a      	ldrb	r2, [r3, #0]
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	0011      	movs	r1, r2
    212a:	0018      	movs	r0, r3
    212c:	4b02      	ldr	r3, [pc, #8]	; (2138 <ioport_set_pin_dir+0x24>)
    212e:	4798      	blx	r3
}
    2130:	46c0      	nop			; (mov r8, r8)
    2132:	46bd      	mov	sp, r7
    2134:	b002      	add	sp, #8
    2136:	bd80      	pop	{r7, pc}
    2138:	00002029 	.word	0x00002029

0000213c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    213c:	b580      	push	{r7, lr}
    213e:	b082      	sub	sp, #8
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
    2144:	000a      	movs	r2, r1
    2146:	1cfb      	adds	r3, r7, #3
    2148:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    214a:	1cfb      	adds	r3, r7, #3
    214c:	781a      	ldrb	r2, [r3, #0]
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	0011      	movs	r1, r2
    2152:	0018      	movs	r0, r3
    2154:	4b02      	ldr	r3, [pc, #8]	; (2160 <ioport_set_pin_level+0x24>)
    2156:	4798      	blx	r3
}
    2158:	46c0      	nop			; (mov r8, r8)
    215a:	46bd      	mov	sp, r7
    215c:	b002      	add	sp, #8
    215e:	bd80      	pop	{r7, pc}
    2160:	000020ad 	.word	0x000020ad

00002164 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    2164:	b580      	push	{r7, lr}
    2166:	b084      	sub	sp, #16
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	22b0      	movs	r2, #176	; 0xb0
    2170:	0112      	lsls	r2, r2, #4
    2172:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	2201      	movs	r2, #1
    2178:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2200      	movs	r2, #0
    217e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	2201      	movs	r2, #1
    2184:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2186:	230f      	movs	r3, #15
    2188:	18fb      	adds	r3, r7, r3
    218a:	2200      	movs	r2, #0
    218c:	701a      	strb	r2, [r3, #0]
    218e:	e00e      	b.n	21ae <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    2190:	230f      	movs	r3, #15
    2192:	18fb      	adds	r3, r7, r3
    2194:	781a      	ldrb	r2, [r3, #0]
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	3202      	adds	r2, #2
    219a:	0092      	lsls	r2, r2, #2
    219c:	2100      	movs	r1, #0
    219e:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    21a0:	230f      	movs	r3, #15
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	781a      	ldrb	r2, [r3, #0]
    21a6:	230f      	movs	r3, #15
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	3201      	adds	r2, #1
    21ac:	701a      	strb	r2, [r3, #0]
    21ae:	230f      	movs	r3, #15
    21b0:	18fb      	adds	r3, r7, r3
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	2b01      	cmp	r3, #1
    21b6:	d9eb      	bls.n	2190 <rtc_count_get_config_defaults+0x2c>
	}
}
    21b8:	46c0      	nop			; (mov r8, r8)
    21ba:	46bd      	mov	sp, r7
    21bc:	b004      	add	sp, #16
    21be:	bd80      	pop	{r7, pc}

000021c0 <measure_voltage>:
#include <asf.h>
#include <delay.h>
#define TCC_MODE_OTMX_DTI


static float measure_voltage(struct adc_module *adc, enum adc_positive_input analog_ch, float ref_voltage){
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	b087      	sub	sp, #28
    21c4:	af00      	add	r7, sp, #0
    21c6:	60f8      	str	r0, [r7, #12]
    21c8:	607a      	str	r2, [r7, #4]
    21ca:	230b      	movs	r3, #11
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	1c0a      	adds	r2, r1, #0
    21d0:	701a      	strb	r2, [r3, #0]
	
	adc_set_positive_input(adc, analog_ch);
    21d2:	230b      	movs	r3, #11
    21d4:	18fb      	adds	r3, r7, r3
    21d6:	781a      	ldrb	r2, [r3, #0]
    21d8:	68fb      	ldr	r3, [r7, #12]
    21da:	0011      	movs	r1, r2
    21dc:	0018      	movs	r0, r3
    21de:	4b19      	ldr	r3, [pc, #100]	; (2244 <measure_voltage+0x84>)
    21e0:	4798      	blx	r3
	adc_start_conversion(adc);
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	0018      	movs	r0, r3
    21e6:	4b18      	ldr	r3, [pc, #96]	; (2248 <measure_voltage+0x88>)
    21e8:	4798      	blx	r3
	
	uint16_t adc_value;
	adc_read(adc, &adc_value);
    21ea:	2316      	movs	r3, #22
    21ec:	18fa      	adds	r2, r7, r3
    21ee:	68fb      	ldr	r3, [r7, #12]
    21f0:	0011      	movs	r1, r2
    21f2:	0018      	movs	r0, r3
    21f4:	4b15      	ldr	r3, [pc, #84]	; (224c <measure_voltage+0x8c>)
    21f6:	4798      	blx	r3
	
	return (adc_value / 255.0) * ref_voltage;
    21f8:	2316      	movs	r3, #22
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	881b      	ldrh	r3, [r3, #0]
    21fe:	001a      	movs	r2, r3
    2200:	4b13      	ldr	r3, [pc, #76]	; (2250 <measure_voltage+0x90>)
    2202:	0010      	movs	r0, r2
    2204:	4798      	blx	r3
    2206:	4c13      	ldr	r4, [pc, #76]	; (2254 <measure_voltage+0x94>)
    2208:	2200      	movs	r2, #0
    220a:	4b13      	ldr	r3, [pc, #76]	; (2258 <measure_voltage+0x98>)
    220c:	47a0      	blx	r4
    220e:	0003      	movs	r3, r0
    2210:	000c      	movs	r4, r1
    2212:	001d      	movs	r5, r3
    2214:	0026      	movs	r6, r4
    2216:	4b11      	ldr	r3, [pc, #68]	; (225c <measure_voltage+0x9c>)
    2218:	6878      	ldr	r0, [r7, #4]
    221a:	4798      	blx	r3
    221c:	0002      	movs	r2, r0
    221e:	000b      	movs	r3, r1
    2220:	4c0f      	ldr	r4, [pc, #60]	; (2260 <measure_voltage+0xa0>)
    2222:	0028      	movs	r0, r5
    2224:	0031      	movs	r1, r6
    2226:	47a0      	blx	r4
    2228:	0003      	movs	r3, r0
    222a:	000c      	movs	r4, r1
    222c:	0019      	movs	r1, r3
    222e:	0022      	movs	r2, r4
    2230:	4b0c      	ldr	r3, [pc, #48]	; (2264 <measure_voltage+0xa4>)
    2232:	0008      	movs	r0, r1
    2234:	0011      	movs	r1, r2
    2236:	4798      	blx	r3
    2238:	1c03      	adds	r3, r0, #0
}
    223a:	1c18      	adds	r0, r3, #0
    223c:	46bd      	mov	sp, r7
    223e:	b007      	add	sp, #28
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	00001f49 	.word	0x00001f49
    2248:	00001e99 	.word	0x00001e99
    224c:	00001ee1 	.word	0x00001ee1
    2250:	00004089 	.word	0x00004089
    2254:	00003521 	.word	0x00003521
    2258:	406fe000 	.word	0x406fe000
    225c:	0000410d 	.word	0x0000410d
    2260:	00003b89 	.word	0x00003b89
    2264:	000041b1 	.word	0x000041b1

00002268 <main>:

int main (void) {
    2268:	b590      	push	{r4, r7, lr}
    226a:	b0f1      	sub	sp, #452	; 0x1c4
    226c:	af00      	add	r7, sp, #0
	// https://asf.microchip.com/docs/latest/search.html?device=saml21
	/************************************************************************/
	/* Increase CPU clock to 16MHz                                          */
	/************************************************************************/
	OSCCTRL->OSC16MCTRL.bit.FSEL = 0x3;
    226e:	4afc      	ldr	r2, [pc, #1008]	; (2660 <main+0x3f8>)
    2270:	7d13      	ldrb	r3, [r2, #20]
    2272:	210c      	movs	r1, #12
    2274:	430b      	orrs	r3, r1
    2276:	7513      	strb	r3, [r2, #20]
	/************************************************************************/
	/* Set internal voltage reference for ADC/SDADC/DAC                     */
	/* Family data sheet 23.8.7                                             */
	/************************************************************************/
	struct system_voltage_references_config voltage_reference_cfg;
	system_voltage_reference_get_config_defaults(&voltage_reference_cfg);
    2278:	23d6      	movs	r3, #214	; 0xd6
    227a:	005b      	lsls	r3, r3, #1
    227c:	18fb      	adds	r3, r7, r3
    227e:	0018      	movs	r0, r3
    2280:	4bf8      	ldr	r3, [pc, #992]	; (2664 <main+0x3fc>)
    2282:	4798      	blx	r3
	voltage_reference_cfg.sel = SYSTEM_VOLTAGE_REFERENCE_2V0;
    2284:	23d6      	movs	r3, #214	; 0xd6
    2286:	005b      	lsls	r3, r3, #1
    2288:	18fb      	adds	r3, r7, r3
    228a:	2204      	movs	r2, #4
    228c:	701a      	strb	r2, [r3, #0]
	system_voltage_reference_set_config(&voltage_reference_cfg);
    228e:	23d6      	movs	r3, #214	; 0xd6
    2290:	005b      	lsls	r3, r3, #1
    2292:	18fb      	adds	r3, r7, r3
    2294:	0018      	movs	r0, r3
    2296:	4bf4      	ldr	r3, [pc, #976]	; (2668 <main+0x400>)
    2298:	4798      	blx	r3

	/************************************************************************/
	/* Initialize the PWM                                                   */
	/* We're using TCC0 pin PA04 and TCC1 pin PA06                          */
	/************************************************************************/
	uint8_t pwm_period = 210;
    229a:	23bc      	movs	r3, #188	; 0xbc
    229c:	33ff      	adds	r3, #255	; 0xff
    229e:	18fb      	adds	r3, r7, r3
    22a0:	22d2      	movs	r2, #210	; 0xd2
    22a2:	701a      	strb	r2, [r3, #0]
	
	struct tcc_config tcc0_cfg;
	tcc_get_config_defaults(&tcc0_cfg, TCC0);
    22a4:	4af1      	ldr	r2, [pc, #964]	; (266c <main+0x404>)
    22a6:	2384      	movs	r3, #132	; 0x84
    22a8:	005b      	lsls	r3, r3, #1
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	0011      	movs	r1, r2
    22ae:	0018      	movs	r0, r3
    22b0:	4bef      	ldr	r3, [pc, #956]	; (2670 <main+0x408>)
    22b2:	4798      	blx	r3
	tcc0_cfg.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    22b4:	2384      	movs	r3, #132	; 0x84
    22b6:	005b      	lsls	r3, r3, #1
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	2200      	movs	r2, #0
    22bc:	731a      	strb	r2, [r3, #12]
	tcc0_cfg.counter.period = pwm_period;
    22be:	23bc      	movs	r3, #188	; 0xbc
    22c0:	33ff      	adds	r3, #255	; 0xff
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	781a      	ldrb	r2, [r3, #0]
    22c6:	2384      	movs	r3, #132	; 0x84
    22c8:	005b      	lsls	r3, r3, #1
    22ca:	18fb      	adds	r3, r7, r3
    22cc:	605a      	str	r2, [r3, #4]
	// output low when count is greater than CCx
	tcc0_cfg.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    22ce:	2384      	movs	r3, #132	; 0x84
    22d0:	005b      	lsls	r3, r3, #1
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	2202      	movs	r2, #2
    22d6:	761a      	strb	r2, [r3, #24]
	//tcc0_cfg.counter.count = 66; // Offset the first PWM pulse
	
	tcc0_cfg.compare.match[0] = pwm_period / 2;
    22d8:	23bc      	movs	r3, #188	; 0xbc
    22da:	33ff      	adds	r3, #255	; 0xff
    22dc:	18fb      	adds	r3, r7, r3
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	085b      	lsrs	r3, r3, #1
    22e2:	b2db      	uxtb	r3, r3
    22e4:	001a      	movs	r2, r3
    22e6:	2384      	movs	r3, #132	; 0x84
    22e8:	005b      	lsls	r3, r3, #1
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	61da      	str	r2, [r3, #28]
	tcc0_cfg.pins.enable_wave_out_pin[0] = true;
    22ee:	2384      	movs	r3, #132	; 0x84
    22f0:	005b      	lsls	r3, r3, #1
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	2298      	movs	r2, #152	; 0x98
    22f6:	2101      	movs	r1, #1
    22f8:	5499      	strb	r1, [r3, r2]
	tcc0_cfg.pins.wave_out_pin[0]        = PIN_PA04E_TCC0_WO0;
    22fa:	2384      	movs	r3, #132	; 0x84
    22fc:	005b      	lsls	r3, r3, #1
    22fe:	18fb      	adds	r3, r7, r3
    2300:	2204      	movs	r2, #4
    2302:	659a      	str	r2, [r3, #88]	; 0x58
	tcc0_cfg.pins.wave_out_pin_mux[0]    = MUX_PA04E_TCC0_WO0;
    2304:	2384      	movs	r3, #132	; 0x84
    2306:	005b      	lsls	r3, r3, #1
    2308:	18fb      	adds	r3, r7, r3
    230a:	2204      	movs	r2, #4
    230c:	679a      	str	r2, [r3, #120]	; 0x78
	
	tcc0_cfg.compare.match[1] = pwm_period / 2;
    230e:	23bc      	movs	r3, #188	; 0xbc
    2310:	33ff      	adds	r3, #255	; 0xff
    2312:	18fb      	adds	r3, r7, r3
    2314:	781b      	ldrb	r3, [r3, #0]
    2316:	085b      	lsrs	r3, r3, #1
    2318:	b2db      	uxtb	r3, r3
    231a:	001a      	movs	r2, r3
    231c:	2384      	movs	r3, #132	; 0x84
    231e:	005b      	lsls	r3, r3, #1
    2320:	18fb      	adds	r3, r7, r3
    2322:	621a      	str	r2, [r3, #32]
	tcc0_cfg.pins.enable_wave_out_pin[1] = true;
    2324:	2384      	movs	r3, #132	; 0x84
    2326:	005b      	lsls	r3, r3, #1
    2328:	18fb      	adds	r3, r7, r3
    232a:	2299      	movs	r2, #153	; 0x99
    232c:	2101      	movs	r1, #1
    232e:	5499      	strb	r1, [r3, r2]
	tcc0_cfg.pins.wave_out_pin[1]        = PIN_PA05E_TCC0_WO1;
    2330:	2384      	movs	r3, #132	; 0x84
    2332:	005b      	lsls	r3, r3, #1
    2334:	18fb      	adds	r3, r7, r3
    2336:	2205      	movs	r2, #5
    2338:	65da      	str	r2, [r3, #92]	; 0x5c
	tcc0_cfg.pins.wave_out_pin_mux[1]    = MUX_PA05E_TCC0_WO1;
    233a:	2384      	movs	r3, #132	; 0x84
    233c:	005b      	lsls	r3, r3, #1
    233e:	18fb      	adds	r3, r7, r3
    2340:	2204      	movs	r2, #4
    2342:	67da      	str	r2, [r3, #124]	; 0x7c
	
	struct tcc_module tcc0_instance;
	tcc_init(&tcc0_instance, TCC0, &tcc0_cfg);
    2344:	2384      	movs	r3, #132	; 0x84
    2346:	005b      	lsls	r3, r3, #1
    2348:	18fa      	adds	r2, r7, r3
    234a:	49c8      	ldr	r1, [pc, #800]	; (266c <main+0x404>)
    234c:	1c7b      	adds	r3, r7, #1
    234e:	33ff      	adds	r3, #255	; 0xff
    2350:	0018      	movs	r0, r3
    2352:	4bc8      	ldr	r3, [pc, #800]	; (2674 <main+0x40c>)
    2354:	4798      	blx	r3
	
	struct tcc_config tcc1_cfg;
	tcc_get_config_defaults(&tcc1_cfg, TCC1);
    2356:	4ac8      	ldr	r2, [pc, #800]	; (2678 <main+0x410>)
    2358:	235c      	movs	r3, #92	; 0x5c
    235a:	18fb      	adds	r3, r7, r3
    235c:	0011      	movs	r1, r2
    235e:	0018      	movs	r0, r3
    2360:	4bc3      	ldr	r3, [pc, #780]	; (2670 <main+0x408>)
    2362:	4798      	blx	r3
	tcc1_cfg.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    2364:	4bc5      	ldr	r3, [pc, #788]	; (267c <main+0x414>)
    2366:	22e0      	movs	r2, #224	; 0xe0
    2368:	0052      	lsls	r2, r2, #1
    236a:	4694      	mov	ip, r2
    236c:	44bc      	add	ip, r7
    236e:	4463      	add	r3, ip
    2370:	2200      	movs	r2, #0
    2372:	731a      	strb	r2, [r3, #12]
	tcc1_cfg.counter.period = pwm_period;
    2374:	23bc      	movs	r3, #188	; 0xbc
    2376:	33ff      	adds	r3, #255	; 0xff
    2378:	18fb      	adds	r3, r7, r3
    237a:	781a      	ldrb	r2, [r3, #0]
    237c:	4bbf      	ldr	r3, [pc, #764]	; (267c <main+0x414>)
    237e:	21e0      	movs	r1, #224	; 0xe0
    2380:	0049      	lsls	r1, r1, #1
    2382:	468c      	mov	ip, r1
    2384:	44bc      	add	ip, r7
    2386:	4463      	add	r3, ip
    2388:	605a      	str	r2, [r3, #4]
	tcc1_cfg.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    238a:	4bbc      	ldr	r3, [pc, #752]	; (267c <main+0x414>)
    238c:	22e0      	movs	r2, #224	; 0xe0
    238e:	0052      	lsls	r2, r2, #1
    2390:	4694      	mov	ip, r2
    2392:	44bc      	add	ip, r7
    2394:	4463      	add	r3, ip
    2396:	2202      	movs	r2, #2
    2398:	761a      	strb	r2, [r3, #24]
	
	tcc1_cfg.compare.match[0] = pwm_period / 2;
    239a:	23bc      	movs	r3, #188	; 0xbc
    239c:	33ff      	adds	r3, #255	; 0xff
    239e:	18fb      	adds	r3, r7, r3
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	085b      	lsrs	r3, r3, #1
    23a4:	b2db      	uxtb	r3, r3
    23a6:	001a      	movs	r2, r3
    23a8:	4bb4      	ldr	r3, [pc, #720]	; (267c <main+0x414>)
    23aa:	21e0      	movs	r1, #224	; 0xe0
    23ac:	0049      	lsls	r1, r1, #1
    23ae:	468c      	mov	ip, r1
    23b0:	44bc      	add	ip, r7
    23b2:	4463      	add	r3, ip
    23b4:	61da      	str	r2, [r3, #28]
	tcc1_cfg.pins.enable_wave_out_pin[0] = true;
    23b6:	4bb1      	ldr	r3, [pc, #708]	; (267c <main+0x414>)
    23b8:	22e0      	movs	r2, #224	; 0xe0
    23ba:	0052      	lsls	r2, r2, #1
    23bc:	4694      	mov	ip, r2
    23be:	44bc      	add	ip, r7
    23c0:	4463      	add	r3, ip
    23c2:	2298      	movs	r2, #152	; 0x98
    23c4:	2101      	movs	r1, #1
    23c6:	5499      	strb	r1, [r3, r2]
	tcc1_cfg.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
    23c8:	4bac      	ldr	r3, [pc, #688]	; (267c <main+0x414>)
    23ca:	22e0      	movs	r2, #224	; 0xe0
    23cc:	0052      	lsls	r2, r2, #1
    23ce:	4694      	mov	ip, r2
    23d0:	44bc      	add	ip, r7
    23d2:	4463      	add	r3, ip
    23d4:	2206      	movs	r2, #6
    23d6:	659a      	str	r2, [r3, #88]	; 0x58
	tcc1_cfg.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
    23d8:	4ba8      	ldr	r3, [pc, #672]	; (267c <main+0x414>)
    23da:	22e0      	movs	r2, #224	; 0xe0
    23dc:	0052      	lsls	r2, r2, #1
    23de:	4694      	mov	ip, r2
    23e0:	44bc      	add	ip, r7
    23e2:	4463      	add	r3, ip
    23e4:	2204      	movs	r2, #4
    23e6:	679a      	str	r2, [r3, #120]	; 0x78
	
	tcc1_cfg.compare.match[1] = pwm_period / 2;
    23e8:	23bc      	movs	r3, #188	; 0xbc
    23ea:	33ff      	adds	r3, #255	; 0xff
    23ec:	18fb      	adds	r3, r7, r3
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	085b      	lsrs	r3, r3, #1
    23f2:	b2db      	uxtb	r3, r3
    23f4:	001a      	movs	r2, r3
    23f6:	4ba1      	ldr	r3, [pc, #644]	; (267c <main+0x414>)
    23f8:	21e0      	movs	r1, #224	; 0xe0
    23fa:	0049      	lsls	r1, r1, #1
    23fc:	468c      	mov	ip, r1
    23fe:	44bc      	add	ip, r7
    2400:	4463      	add	r3, ip
    2402:	621a      	str	r2, [r3, #32]
	tcc1_cfg.pins.enable_wave_out_pin[1] = true;
    2404:	4b9d      	ldr	r3, [pc, #628]	; (267c <main+0x414>)
    2406:	22e0      	movs	r2, #224	; 0xe0
    2408:	0052      	lsls	r2, r2, #1
    240a:	4694      	mov	ip, r2
    240c:	44bc      	add	ip, r7
    240e:	4463      	add	r3, ip
    2410:	2299      	movs	r2, #153	; 0x99
    2412:	2101      	movs	r1, #1
    2414:	5499      	strb	r1, [r3, r2]
	tcc1_cfg.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    2416:	4b99      	ldr	r3, [pc, #612]	; (267c <main+0x414>)
    2418:	22e0      	movs	r2, #224	; 0xe0
    241a:	0052      	lsls	r2, r2, #1
    241c:	4694      	mov	ip, r2
    241e:	44bc      	add	ip, r7
    2420:	4463      	add	r3, ip
    2422:	2207      	movs	r2, #7
    2424:	65da      	str	r2, [r3, #92]	; 0x5c
	tcc1_cfg.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    2426:	4b95      	ldr	r3, [pc, #596]	; (267c <main+0x414>)
    2428:	22e0      	movs	r2, #224	; 0xe0
    242a:	0052      	lsls	r2, r2, #1
    242c:	4694      	mov	ip, r2
    242e:	44bc      	add	ip, r7
    2430:	4463      	add	r3, ip
    2432:	2204      	movs	r2, #4
    2434:	67da      	str	r2, [r3, #124]	; 0x7c
	
	
	
	
	struct tcc_module tcc1_instance;
	tcc_init(&tcc1_instance, TCC1, &tcc1_cfg);
    2436:	235c      	movs	r3, #92	; 0x5c
    2438:	18fa      	adds	r2, r7, r3
    243a:	498f      	ldr	r1, [pc, #572]	; (2678 <main+0x410>)
    243c:	2354      	movs	r3, #84	; 0x54
    243e:	18fb      	adds	r3, r7, r3
    2440:	0018      	movs	r0, r3
    2442:	4b8c      	ldr	r3, [pc, #560]	; (2674 <main+0x40c>)
    2444:	4798      	blx	r3
	tcc1_instance.hw->WAVE.bit.POL0 = !tcc1_instance.hw->WAVE.bit.POL0;
    2446:	4b8e      	ldr	r3, [pc, #568]	; (2680 <main+0x418>)
    2448:	22e0      	movs	r2, #224	; 0xe0
    244a:	0052      	lsls	r2, r2, #1
    244c:	4694      	mov	ip, r2
    244e:	44bc      	add	ip, r7
    2450:	4463      	add	r3, ip
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	4a8a      	ldr	r2, [pc, #552]	; (2680 <main+0x418>)
    2456:	21e0      	movs	r1, #224	; 0xe0
    2458:	0049      	lsls	r1, r1, #1
    245a:	468c      	mov	ip, r1
    245c:	44bc      	add	ip, r7
    245e:	4462      	add	r2, ip
    2460:	6812      	ldr	r2, [r2, #0]
    2462:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    2464:	03d2      	lsls	r2, r2, #15
    2466:	0fd2      	lsrs	r2, r2, #31
    2468:	b2d2      	uxtb	r2, r2
    246a:	2101      	movs	r1, #1
    246c:	404a      	eors	r2, r1
    246e:	b2d1      	uxtb	r1, r2
    2470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2472:	2001      	movs	r0, #1
    2474:	4001      	ands	r1, r0
    2476:	0409      	lsls	r1, r1, #16
    2478:	4882      	ldr	r0, [pc, #520]	; (2684 <main+0x41c>)
    247a:	4002      	ands	r2, r0
    247c:	430a      	orrs	r2, r1
    247e:	63da      	str	r2, [r3, #60]	; 0x3c
	tcc1_instance.hw->WAVE.bit.POL1 = !tcc1_instance.hw->WAVE.bit.POL1;
    2480:	4b7f      	ldr	r3, [pc, #508]	; (2680 <main+0x418>)
    2482:	22e0      	movs	r2, #224	; 0xe0
    2484:	0052      	lsls	r2, r2, #1
    2486:	4694      	mov	ip, r2
    2488:	44bc      	add	ip, r7
    248a:	4463      	add	r3, ip
    248c:	681b      	ldr	r3, [r3, #0]
    248e:	4a7c      	ldr	r2, [pc, #496]	; (2680 <main+0x418>)
    2490:	21e0      	movs	r1, #224	; 0xe0
    2492:	0049      	lsls	r1, r1, #1
    2494:	468c      	mov	ip, r1
    2496:	44bc      	add	ip, r7
    2498:	4462      	add	r2, ip
    249a:	6812      	ldr	r2, [r2, #0]
    249c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    249e:	0392      	lsls	r2, r2, #14
    24a0:	0fd2      	lsrs	r2, r2, #31
    24a2:	b2d2      	uxtb	r2, r2
    24a4:	2101      	movs	r1, #1
    24a6:	404a      	eors	r2, r1
    24a8:	b2d1      	uxtb	r1, r2
    24aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    24ac:	2001      	movs	r0, #1
    24ae:	4001      	ands	r1, r0
    24b0:	0449      	lsls	r1, r1, #17
    24b2:	4875      	ldr	r0, [pc, #468]	; (2688 <main+0x420>)
    24b4:	4002      	ands	r2, r0
    24b6:	430a      	orrs	r2, r1
    24b8:	63da      	str	r2, [r3, #60]	; 0x3c
	/* We use this to keep track of seconds that have passed since power on */
	/************************************************************************/
	struct rtc_module rtc_instance;
	struct rtc_count_config config_rtc_count;
		
	rtc_count_get_config_defaults(&config_rtc_count);
    24ba:	233c      	movs	r3, #60	; 0x3c
    24bc:	18fb      	adds	r3, r7, r3
    24be:	0018      	movs	r0, r3
    24c0:	4b72      	ldr	r3, [pc, #456]	; (268c <main+0x424>)
    24c2:	4798      	blx	r3
	config_rtc_count.prescaler = RTC_COUNT_PRESCALER_DIV_1;
    24c4:	4b72      	ldr	r3, [pc, #456]	; (2690 <main+0x428>)
    24c6:	22e0      	movs	r2, #224	; 0xe0
    24c8:	0052      	lsls	r2, r2, #1
    24ca:	4694      	mov	ip, r2
    24cc:	44bc      	add	ip, r7
    24ce:	4463      	add	r3, ip
    24d0:	2280      	movs	r2, #128	; 0x80
    24d2:	0052      	lsls	r2, r2, #1
    24d4:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode = RTC_COUNT_MODE_16BIT;
    24d6:	4b6e      	ldr	r3, [pc, #440]	; (2690 <main+0x428>)
    24d8:	22e0      	movs	r2, #224	; 0xe0
    24da:	0052      	lsls	r2, r2, #1
    24dc:	4694      	mov	ip, r2
    24de:	44bc      	add	ip, r7
    24e0:	4463      	add	r3, ip
    24e2:	2200      	movs	r2, #0
    24e4:	709a      	strb	r2, [r3, #2]
	config_rtc_count.compare_values[0] = 500; // 500 = 1s
    24e6:	4b6a      	ldr	r3, [pc, #424]	; (2690 <main+0x428>)
    24e8:	22e0      	movs	r2, #224	; 0xe0
    24ea:	0052      	lsls	r2, r2, #1
    24ec:	4694      	mov	ip, r2
    24ee:	44bc      	add	ip, r7
    24f0:	4463      	add	r3, ip
    24f2:	22fa      	movs	r2, #250	; 0xfa
    24f4:	0052      	lsls	r2, r2, #1
    24f6:	609a      	str	r2, [r3, #8]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    24f8:	233c      	movs	r3, #60	; 0x3c
    24fa:	18fa      	adds	r2, r7, r3
    24fc:	4965      	ldr	r1, [pc, #404]	; (2694 <main+0x42c>)
    24fe:	234c      	movs	r3, #76	; 0x4c
    2500:	18fb      	adds	r3, r7, r3
    2502:	0018      	movs	r0, r3
    2504:	4b64      	ldr	r3, [pc, #400]	; (2698 <main+0x430>)
    2506:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    2508:	234c      	movs	r3, #76	; 0x4c
    250a:	18fb      	adds	r3, r7, r3
    250c:	0018      	movs	r0, r3
    250e:	4b63      	ldr	r3, [pc, #396]	; (269c <main+0x434>)
    2510:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 1000);
    2512:	23fa      	movs	r3, #250	; 0xfa
    2514:	009a      	lsls	r2, r3, #2
    2516:	234c      	movs	r3, #76	; 0x4c
    2518:	18fb      	adds	r3, r7, r3
    251a:	0011      	movs	r1, r2
    251c:	0018      	movs	r0, r3
    251e:	4b60      	ldr	r3, [pc, #384]	; (26a0 <main+0x438>)
    2520:	4798      	blx	r3
		
	// Enable LED as output
	ioport_init();
    2522:	4b60      	ldr	r3, [pc, #384]	; (26a4 <main+0x43c>)
    2524:	4798      	blx	r3
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
    2526:	2101      	movs	r1, #1
    2528:	202a      	movs	r0, #42	; 0x2a
    252a:	4b5f      	ldr	r3, [pc, #380]	; (26a8 <main+0x440>)
    252c:	4798      	blx	r3
	/* Initialize the ADCs                                                  */
	/* We're using pins PA03 (AIN1) and PB07 (AIN15)                        */
	/************************************************************************/
	// Configure analog pins
	struct system_pinmux_config config;
	system_pinmux_get_config_defaults(&config);
    252e:	2338      	movs	r3, #56	; 0x38
    2530:	18fb      	adds	r3, r7, r3
    2532:	0018      	movs	r0, r3
    2534:	4b5d      	ldr	r3, [pc, #372]	; (26ac <main+0x444>)
    2536:	4798      	blx	r3

	// input_pull is being set to SYSTEM_PINMUX_PIN_PULL_NONE to cancel out the
	// default pinmux_config struct setting of a pull-up enabled.
	config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2538:	4b5d      	ldr	r3, [pc, #372]	; (26b0 <main+0x448>)
    253a:	22e0      	movs	r2, #224	; 0xe0
    253c:	0052      	lsls	r2, r2, #1
    253e:	4694      	mov	ip, r2
    2540:	44bc      	add	ip, r7
    2542:	4463      	add	r3, ip
    2544:	2200      	movs	r2, #0
    2546:	709a      	strb	r2, [r3, #2]
	config.mux_position = 1;
    2548:	4b59      	ldr	r3, [pc, #356]	; (26b0 <main+0x448>)
    254a:	22e0      	movs	r2, #224	; 0xe0
    254c:	0052      	lsls	r2, r2, #1
    254e:	4694      	mov	ip, r2
    2550:	44bc      	add	ip, r7
    2552:	4463      	add	r3, ip
    2554:	2201      	movs	r2, #1
    2556:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA03, &config);
    2558:	2338      	movs	r3, #56	; 0x38
    255a:	18fb      	adds	r3, r7, r3
    255c:	0019      	movs	r1, r3
    255e:	2003      	movs	r0, #3
    2560:	4b54      	ldr	r3, [pc, #336]	; (26b4 <main+0x44c>)
    2562:	4798      	blx	r3
	system_pinmux_pin_set_config(PIN_PB07, &config);
    2564:	2338      	movs	r3, #56	; 0x38
    2566:	18fb      	adds	r3, r7, r3
    2568:	0019      	movs	r1, r3
    256a:	2027      	movs	r0, #39	; 0x27
    256c:	4b51      	ldr	r3, [pc, #324]	; (26b4 <main+0x44c>)
    256e:	4798      	blx	r3
	
	// Configure the ADC
	struct adc_config adc0_cfg;
	adc_get_config_defaults(&adc0_cfg);
    2570:	230c      	movs	r3, #12
    2572:	18fb      	adds	r3, r7, r3
    2574:	0018      	movs	r0, r3
    2576:	4b50      	ldr	r3, [pc, #320]	; (26b8 <main+0x450>)
    2578:	4798      	blx	r3
	adc0_cfg.resolution = ADC_RESOLUTION_8BIT;
    257a:	4b50      	ldr	r3, [pc, #320]	; (26bc <main+0x454>)
    257c:	22e0      	movs	r2, #224	; 0xe0
    257e:	0052      	lsls	r2, r2, #1
    2580:	4694      	mov	ip, r2
    2582:	44bc      	add	ip, r7
    2584:	4463      	add	r3, ip
    2586:	2230      	movs	r2, #48	; 0x30
    2588:	70da      	strb	r2, [r3, #3]

	struct adc_module adc0_instance;
	adc_init(&adc0_instance, ADC, &adc0_cfg);
    258a:	230c      	movs	r3, #12
    258c:	18fa      	adds	r2, r7, r3
    258e:	494c      	ldr	r1, [pc, #304]	; (26c0 <main+0x458>)
    2590:	1d3b      	adds	r3, r7, #4
    2592:	0018      	movs	r0, r3
    2594:	4b4b      	ldr	r3, [pc, #300]	; (26c4 <main+0x45c>)
    2596:	4798      	blx	r3
	/************************************************************************/
	/* Enable all the peripherals with the configurations stated above      */
	/************************************************************************/
	adc_enable(&adc0_instance);
    2598:	1d3b      	adds	r3, r7, #4
    259a:	0018      	movs	r0, r3
    259c:	4b4a      	ldr	r3, [pc, #296]	; (26c8 <main+0x460>)
    259e:	4798      	blx	r3
	tcc0_instance.hw->CTRLA.reg |= TCC_CTRLA_ENABLE;
    25a0:	1c7b      	adds	r3, r7, #1
    25a2:	33ff      	adds	r3, #255	; 0xff
    25a4:	681b      	ldr	r3, [r3, #0]
    25a6:	1c7a      	adds	r2, r7, #1
    25a8:	32ff      	adds	r2, #255	; 0xff
    25aa:	6812      	ldr	r2, [r2, #0]
    25ac:	6812      	ldr	r2, [r2, #0]
    25ae:	2102      	movs	r1, #2
    25b0:	430a      	orrs	r2, r1
    25b2:	601a      	str	r2, [r3, #0]
	tcc1_instance.hw->CTRLA.reg |= TCC_CTRLA_ENABLE;
    25b4:	4b32      	ldr	r3, [pc, #200]	; (2680 <main+0x418>)
    25b6:	22e0      	movs	r2, #224	; 0xe0
    25b8:	0052      	lsls	r2, r2, #1
    25ba:	4694      	mov	ip, r2
    25bc:	44bc      	add	ip, r7
    25be:	4463      	add	r3, ip
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	4a2f      	ldr	r2, [pc, #188]	; (2680 <main+0x418>)
    25c4:	21e0      	movs	r1, #224	; 0xe0
    25c6:	0049      	lsls	r1, r1, #1
    25c8:	468c      	mov	ip, r1
    25ca:	44bc      	add	ip, r7
    25cc:	4462      	add	r2, ip
    25ce:	6812      	ldr	r2, [r2, #0]
    25d0:	6812      	ldr	r2, [r2, #0]
    25d2:	2102      	movs	r1, #2
    25d4:	430a      	orrs	r2, r1
    25d6:	601a      	str	r2, [r3, #0]

	
	
	uint8_t duty_cycle2;
	uint8_t duty_cycle;
	int8_t offset = 10; //66 Tested offset of a half a period
    25d8:	23dd      	movs	r3, #221	; 0xdd
    25da:	005b      	lsls	r3, r3, #1
    25dc:	18fb      	adds	r3, r7, r3
    25de:	220a      	movs	r2, #10
    25e0:	701a      	strb	r2, [r3, #0]
	uint16_t seconds_from_start = 0;
    25e2:	23de      	movs	r3, #222	; 0xde
    25e4:	005b      	lsls	r3, r3, #1
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	2200      	movs	r2, #0
    25ea:	801a      	strh	r2, [r3, #0]
	ioport_set_pin_level(LED0_GPIO, false);
    25ec:	2100      	movs	r1, #0
    25ee:	202a      	movs	r0, #42	; 0x2a
    25f0:	4b36      	ldr	r3, [pc, #216]	; (26cc <main+0x464>)
    25f2:	4798      	blx	r3
	float measured_voltage1;
	float measured_voltage2;
	float measure_voltage3;

	bool offset_timer_zero = false;
    25f4:	23ba      	movs	r3, #186	; 0xba
    25f6:	33ff      	adds	r3, #255	; 0xff
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	2200      	movs	r2, #0
    25fc:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		measured_voltage1 = measure_voltage(&adc0_instance, ADC_POSITIVE_INPUT_PIN1, 2.0);
    25fe:	2280      	movs	r2, #128	; 0x80
    2600:	05d2      	lsls	r2, r2, #23
    2602:	1d3b      	adds	r3, r7, #4
    2604:	2101      	movs	r1, #1
    2606:	0018      	movs	r0, r3
    2608:	4b31      	ldr	r3, [pc, #196]	; (26d0 <main+0x468>)
    260a:	4798      	blx	r3
    260c:	1c03      	adds	r3, r0, #0
    260e:	22da      	movs	r2, #218	; 0xda
    2610:	0052      	lsls	r2, r2, #1
    2612:	18ba      	adds	r2, r7, r2
    2614:	6013      	str	r3, [r2, #0]
		measured_voltage2 = measure_voltage(&adc0_instance, ADC_POSITIVE_INPUT_PIN15, 2.0);
    2616:	2280      	movs	r2, #128	; 0x80
    2618:	05d2      	lsls	r2, r2, #23
    261a:	1d3b      	adds	r3, r7, #4
    261c:	210f      	movs	r1, #15
    261e:	0018      	movs	r0, r3
    2620:	4b2b      	ldr	r3, [pc, #172]	; (26d0 <main+0x468>)
    2622:	4798      	blx	r3
    2624:	1c03      	adds	r3, r0, #0
    2626:	22d8      	movs	r2, #216	; 0xd8
    2628:	0052      	lsls	r2, r2, #1
    262a:	18ba      	adds	r2, r7, r2
    262c:	6013      	str	r3, [r2, #0]
		
		// Increase the time
		if (rtc_count_is_compare_match(&rtc_instance, RTC_COUNT_COMPARE_0)){
    262e:	234c      	movs	r3, #76	; 0x4c
    2630:	18fb      	adds	r3, r7, r3
    2632:	2100      	movs	r1, #0
    2634:	0018      	movs	r0, r3
    2636:	4b27      	ldr	r3, [pc, #156]	; (26d4 <main+0x46c>)
    2638:	4798      	blx	r3
    263a:	1e03      	subs	r3, r0, #0
    263c:	d04e      	beq.n	26dc <main+0x474>
			seconds_from_start += 1;
    263e:	23de      	movs	r3, #222	; 0xde
    2640:	005b      	lsls	r3, r3, #1
    2642:	18fb      	adds	r3, r7, r3
    2644:	22de      	movs	r2, #222	; 0xde
    2646:	0052      	lsls	r2, r2, #1
    2648:	18ba      	adds	r2, r7, r2
    264a:	8812      	ldrh	r2, [r2, #0]
    264c:	3201      	adds	r2, #1
    264e:	801a      	strh	r2, [r3, #0]
			//ioport_toggle_pin_level(LED0_GPIO);
			rtc_count_clear_compare_match(&rtc_instance, RTC_COUNT_COMPARE_0);
    2650:	234c      	movs	r3, #76	; 0x4c
    2652:	18fb      	adds	r3, r7, r3
    2654:	2100      	movs	r1, #0
    2656:	0018      	movs	r0, r3
    2658:	4b1f      	ldr	r3, [pc, #124]	; (26d8 <main+0x470>)
    265a:	4798      	blx	r3
    265c:	e03e      	b.n	26dc <main+0x474>
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	40000c00 	.word	0x40000c00
    2664:	00001cef 	.word	0x00001cef
    2668:	00001d11 	.word	0x00001d11
    266c:	42001400 	.word	0x42001400
    2670:	00001275 	.word	0x00001275
    2674:	000018d5 	.word	0x000018d5
    2678:	42001800 	.word	0x42001800
    267c:	fffffe9c 	.word	0xfffffe9c
    2680:	fffffe94 	.word	0xfffffe94
    2684:	fffeffff 	.word	0xfffeffff
    2688:	fffdffff 	.word	0xfffdffff
    268c:	00002165 	.word	0x00002165
    2690:	fffffe7c 	.word	0xfffffe7c
    2694:	40002000 	.word	0x40002000
    2698:	00000c85 	.word	0x00000c85
    269c:	00000a8d 	.word	0x00000a8d
    26a0:	00000d81 	.word	0x00000d81
    26a4:	00002101 	.word	0x00002101
    26a8:	00002115 	.word	0x00002115
    26ac:	00001cc7 	.word	0x00001cc7
    26b0:	fffffe78 	.word	0xfffffe78
    26b4:	00001135 	.word	0x00001135
    26b8:	00000315 	.word	0x00000315
    26bc:	fffffe4c 	.word	0xfffffe4c
    26c0:	43000c00 	.word	0x43000c00
    26c4:	0000094d 	.word	0x0000094d
    26c8:	00001e45 	.word	0x00001e45
    26cc:	0000213d 	.word	0x0000213d
    26d0:	000021c1 	.word	0x000021c1
    26d4:	00000dd5 	.word	0x00000dd5
    26d8:	00000e43 	.word	0x00000e43
		}
		
		if (seconds_from_start <= 380){
    26dc:	23de      	movs	r3, #222	; 0xde
    26de:	005b      	lsls	r3, r3, #1
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	881a      	ldrh	r2, [r3, #0]
    26e4:	23be      	movs	r3, #190	; 0xbe
    26e6:	005b      	lsls	r3, r3, #1
    26e8:	429a      	cmp	r2, r3
    26ea:	d823      	bhi.n	2734 <main+0x4cc>
			
			duty_cycle = (measured_voltage1 / (measured_voltage1 + measured_voltage2)) * 195;
    26ec:	4b55      	ldr	r3, [pc, #340]	; (2844 <main+0x5dc>)
    26ee:	22d8      	movs	r2, #216	; 0xd8
    26f0:	0052      	lsls	r2, r2, #1
    26f2:	18ba      	adds	r2, r7, r2
    26f4:	6811      	ldr	r1, [r2, #0]
    26f6:	22da      	movs	r2, #218	; 0xda
    26f8:	0052      	lsls	r2, r2, #1
    26fa:	18ba      	adds	r2, r7, r2
    26fc:	6810      	ldr	r0, [r2, #0]
    26fe:	4798      	blx	r3
    2700:	1c03      	adds	r3, r0, #0
    2702:	1c1a      	adds	r2, r3, #0
    2704:	4b50      	ldr	r3, [pc, #320]	; (2848 <main+0x5e0>)
    2706:	1c11      	adds	r1, r2, #0
    2708:	22da      	movs	r2, #218	; 0xda
    270a:	0052      	lsls	r2, r2, #1
    270c:	18ba      	adds	r2, r7, r2
    270e:	6810      	ldr	r0, [r2, #0]
    2710:	4798      	blx	r3
    2712:	1c03      	adds	r3, r0, #0
    2714:	1c1a      	adds	r2, r3, #0
    2716:	4b4d      	ldr	r3, [pc, #308]	; (284c <main+0x5e4>)
    2718:	494d      	ldr	r1, [pc, #308]	; (2850 <main+0x5e8>)
    271a:	1c10      	adds	r0, r2, #0
    271c:	4798      	blx	r3
    271e:	1c03      	adds	r3, r0, #0
    2720:	1c1a      	adds	r2, r3, #0
    2722:	23c0      	movs	r3, #192	; 0xc0
    2724:	33ff      	adds	r3, #255	; 0xff
    2726:	18fc      	adds	r4, r7, r3
    2728:	4b4a      	ldr	r3, [pc, #296]	; (2854 <main+0x5ec>)
    272a:	1c10      	adds	r0, r2, #0
    272c:	4798      	blx	r3
    272e:	0003      	movs	r3, r0
    2730:	7023      	strb	r3, [r4, #0]
    2732:	e063      	b.n	27fc <main+0x594>
			
			} 
			else if ((seconds_from_start >= 380)&&(seconds_from_start <= 950)){
    2734:	23de      	movs	r3, #222	; 0xde
    2736:	005b      	lsls	r3, r3, #1
    2738:	18fb      	adds	r3, r7, r3
    273a:	881a      	ldrh	r2, [r3, #0]
    273c:	237c      	movs	r3, #124	; 0x7c
    273e:	33ff      	adds	r3, #255	; 0xff
    2740:	429a      	cmp	r2, r3
    2742:	d92a      	bls.n	279a <main+0x532>
    2744:	23de      	movs	r3, #222	; 0xde
    2746:	005b      	lsls	r3, r3, #1
    2748:	18fb      	adds	r3, r7, r3
    274a:	881b      	ldrh	r3, [r3, #0]
    274c:	4a42      	ldr	r2, [pc, #264]	; (2858 <main+0x5f0>)
    274e:	4293      	cmp	r3, r2
    2750:	d823      	bhi.n	279a <main+0x532>
				duty_cycle = (measured_voltage2 / (measured_voltage1 + measured_voltage2)) * 195;
    2752:	4b3c      	ldr	r3, [pc, #240]	; (2844 <main+0x5dc>)
    2754:	22d8      	movs	r2, #216	; 0xd8
    2756:	0052      	lsls	r2, r2, #1
    2758:	18ba      	adds	r2, r7, r2
    275a:	6811      	ldr	r1, [r2, #0]
    275c:	22da      	movs	r2, #218	; 0xda
    275e:	0052      	lsls	r2, r2, #1
    2760:	18ba      	adds	r2, r7, r2
    2762:	6810      	ldr	r0, [r2, #0]
    2764:	4798      	blx	r3
    2766:	1c03      	adds	r3, r0, #0
    2768:	1c1a      	adds	r2, r3, #0
    276a:	4b37      	ldr	r3, [pc, #220]	; (2848 <main+0x5e0>)
    276c:	1c11      	adds	r1, r2, #0
    276e:	22d8      	movs	r2, #216	; 0xd8
    2770:	0052      	lsls	r2, r2, #1
    2772:	18ba      	adds	r2, r7, r2
    2774:	6810      	ldr	r0, [r2, #0]
    2776:	4798      	blx	r3
    2778:	1c03      	adds	r3, r0, #0
    277a:	1c1a      	adds	r2, r3, #0
    277c:	4b33      	ldr	r3, [pc, #204]	; (284c <main+0x5e4>)
    277e:	4934      	ldr	r1, [pc, #208]	; (2850 <main+0x5e8>)
    2780:	1c10      	adds	r0, r2, #0
    2782:	4798      	blx	r3
    2784:	1c03      	adds	r3, r0, #0
    2786:	1c1a      	adds	r2, r3, #0
    2788:	23c0      	movs	r3, #192	; 0xc0
    278a:	33ff      	adds	r3, #255	; 0xff
    278c:	18fc      	adds	r4, r7, r3
    278e:	4b31      	ldr	r3, [pc, #196]	; (2854 <main+0x5ec>)
    2790:	1c10      	adds	r0, r2, #0
    2792:	4798      	blx	r3
    2794:	0003      	movs	r3, r0
    2796:	7023      	strb	r3, [r4, #0]
    2798:	e030      	b.n	27fc <main+0x594>
			}
			else if ((seconds_from_start >= 950)&&(seconds_from_start <= 1350)){
    279a:	23de      	movs	r3, #222	; 0xde
    279c:	005b      	lsls	r3, r3, #1
    279e:	18fb      	adds	r3, r7, r3
    27a0:	881b      	ldrh	r3, [r3, #0]
    27a2:	4a2e      	ldr	r2, [pc, #184]	; (285c <main+0x5f4>)
    27a4:	4293      	cmp	r3, r2
    27a6:	d929      	bls.n	27fc <main+0x594>
    27a8:	23de      	movs	r3, #222	; 0xde
    27aa:	005b      	lsls	r3, r3, #1
    27ac:	18fb      	adds	r3, r7, r3
    27ae:	881b      	ldrh	r3, [r3, #0]
    27b0:	4a2b      	ldr	r2, [pc, #172]	; (2860 <main+0x5f8>)
    27b2:	4293      	cmp	r3, r2
    27b4:	d822      	bhi.n	27fc <main+0x594>
				duty_cycle = (measured_voltage1 / (measured_voltage1 + measured_voltage2)) * 195;
    27b6:	4b23      	ldr	r3, [pc, #140]	; (2844 <main+0x5dc>)
    27b8:	22d8      	movs	r2, #216	; 0xd8
    27ba:	0052      	lsls	r2, r2, #1
    27bc:	18ba      	adds	r2, r7, r2
    27be:	6811      	ldr	r1, [r2, #0]
    27c0:	22da      	movs	r2, #218	; 0xda
    27c2:	0052      	lsls	r2, r2, #1
    27c4:	18ba      	adds	r2, r7, r2
    27c6:	6810      	ldr	r0, [r2, #0]
    27c8:	4798      	blx	r3
    27ca:	1c03      	adds	r3, r0, #0
    27cc:	1c1a      	adds	r2, r3, #0
    27ce:	4b1e      	ldr	r3, [pc, #120]	; (2848 <main+0x5e0>)
    27d0:	1c11      	adds	r1, r2, #0
    27d2:	22da      	movs	r2, #218	; 0xda
    27d4:	0052      	lsls	r2, r2, #1
    27d6:	18ba      	adds	r2, r7, r2
    27d8:	6810      	ldr	r0, [r2, #0]
    27da:	4798      	blx	r3
    27dc:	1c03      	adds	r3, r0, #0
    27de:	1c1a      	adds	r2, r3, #0
    27e0:	4b1a      	ldr	r3, [pc, #104]	; (284c <main+0x5e4>)
    27e2:	491b      	ldr	r1, [pc, #108]	; (2850 <main+0x5e8>)
    27e4:	1c10      	adds	r0, r2, #0
    27e6:	4798      	blx	r3
    27e8:	1c03      	adds	r3, r0, #0
    27ea:	1c1a      	adds	r2, r3, #0
    27ec:	23c0      	movs	r3, #192	; 0xc0
    27ee:	33ff      	adds	r3, #255	; 0xff
    27f0:	18fc      	adds	r4, r7, r3
    27f2:	4b18      	ldr	r3, [pc, #96]	; (2854 <main+0x5ec>)
    27f4:	1c10      	adds	r0, r2, #0
    27f6:	4798      	blx	r3
    27f8:	0003      	movs	r3, r0
    27fa:	7023      	strb	r3, [r4, #0]
			}
 
		
		
		
		TCC0->CC[0].reg = duty_cycle;
    27fc:	4b19      	ldr	r3, [pc, #100]	; (2864 <main+0x5fc>)
    27fe:	22c0      	movs	r2, #192	; 0xc0
    2800:	32ff      	adds	r2, #255	; 0xff
    2802:	18ba      	adds	r2, r7, r2
    2804:	7812      	ldrb	r2, [r2, #0]
    2806:	645a      	str	r2, [r3, #68]	; 0x44
		TCC0->CC[1].reg = duty_cycle;
    2808:	4b16      	ldr	r3, [pc, #88]	; (2864 <main+0x5fc>)
    280a:	22c0      	movs	r2, #192	; 0xc0
    280c:	32ff      	adds	r2, #255	; 0xff
    280e:	18ba      	adds	r2, r7, r2
    2810:	7812      	ldrb	r2, [r2, #0]
    2812:	649a      	str	r2, [r3, #72]	; 0x48
		

		TCC1->CC[0].reg = duty_cycle;
    2814:	4b14      	ldr	r3, [pc, #80]	; (2868 <main+0x600>)
    2816:	22c0      	movs	r2, #192	; 0xc0
    2818:	32ff      	adds	r2, #255	; 0xff
    281a:	18ba      	adds	r2, r7, r2
    281c:	7812      	ldrb	r2, [r2, #0]
    281e:	645a      	str	r2, [r3, #68]	; 0x44
		TCC1->CC[1].reg = duty_cycle;
    2820:	4b11      	ldr	r3, [pc, #68]	; (2868 <main+0x600>)
    2822:	22c0      	movs	r2, #192	; 0xc0
    2824:	32ff      	adds	r2, #255	; 0xff
    2826:	18ba      	adds	r2, r7, r2
    2828:	7812      	ldrb	r2, [r2, #0]
    282a:	649a      	str	r2, [r3, #72]	; 0x48
		

		TCC0->COUNT.reg = 0;
    282c:	4b0d      	ldr	r3, [pc, #52]	; (2864 <main+0x5fc>)
    282e:	2200      	movs	r2, #0
    2830:	635a      	str	r2, [r3, #52]	; 0x34
		TCC1->COUNT.reg = offset;
    2832:	4b0d      	ldr	r3, [pc, #52]	; (2868 <main+0x600>)
    2834:	22dd      	movs	r2, #221	; 0xdd
    2836:	0052      	lsls	r2, r2, #1
    2838:	18ba      	adds	r2, r7, r2
    283a:	7812      	ldrb	r2, [r2, #0]
    283c:	b252      	sxtb	r2, r2
    283e:	635a      	str	r2, [r3, #52]	; 0x34
		measured_voltage1 = measure_voltage(&adc0_instance, ADC_POSITIVE_INPUT_PIN1, 2.0);
    2840:	e6dd      	b.n	25fe <main+0x396>
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	000029b5 	.word	0x000029b5
    2848:	00002cd9 	.word	0x00002cd9
    284c:	00002f69 	.word	0x00002f69
    2850:	43430000 	.word	0x43430000
    2854:	00002985 	.word	0x00002985
    2858:	000003b6 	.word	0x000003b6
    285c:	000003b5 	.word	0x000003b5
    2860:	00000546 	.word	0x00000546
    2864:	42001400 	.word	0x42001400
    2868:	42001800 	.word	0x42001800

0000286c <__udivsi3>:
    286c:	2200      	movs	r2, #0
    286e:	0843      	lsrs	r3, r0, #1
    2870:	428b      	cmp	r3, r1
    2872:	d374      	bcc.n	295e <__udivsi3+0xf2>
    2874:	0903      	lsrs	r3, r0, #4
    2876:	428b      	cmp	r3, r1
    2878:	d35f      	bcc.n	293a <__udivsi3+0xce>
    287a:	0a03      	lsrs	r3, r0, #8
    287c:	428b      	cmp	r3, r1
    287e:	d344      	bcc.n	290a <__udivsi3+0x9e>
    2880:	0b03      	lsrs	r3, r0, #12
    2882:	428b      	cmp	r3, r1
    2884:	d328      	bcc.n	28d8 <__udivsi3+0x6c>
    2886:	0c03      	lsrs	r3, r0, #16
    2888:	428b      	cmp	r3, r1
    288a:	d30d      	bcc.n	28a8 <__udivsi3+0x3c>
    288c:	22ff      	movs	r2, #255	; 0xff
    288e:	0209      	lsls	r1, r1, #8
    2890:	ba12      	rev	r2, r2
    2892:	0c03      	lsrs	r3, r0, #16
    2894:	428b      	cmp	r3, r1
    2896:	d302      	bcc.n	289e <__udivsi3+0x32>
    2898:	1212      	asrs	r2, r2, #8
    289a:	0209      	lsls	r1, r1, #8
    289c:	d065      	beq.n	296a <__udivsi3+0xfe>
    289e:	0b03      	lsrs	r3, r0, #12
    28a0:	428b      	cmp	r3, r1
    28a2:	d319      	bcc.n	28d8 <__udivsi3+0x6c>
    28a4:	e000      	b.n	28a8 <__udivsi3+0x3c>
    28a6:	0a09      	lsrs	r1, r1, #8
    28a8:	0bc3      	lsrs	r3, r0, #15
    28aa:	428b      	cmp	r3, r1
    28ac:	d301      	bcc.n	28b2 <__udivsi3+0x46>
    28ae:	03cb      	lsls	r3, r1, #15
    28b0:	1ac0      	subs	r0, r0, r3
    28b2:	4152      	adcs	r2, r2
    28b4:	0b83      	lsrs	r3, r0, #14
    28b6:	428b      	cmp	r3, r1
    28b8:	d301      	bcc.n	28be <__udivsi3+0x52>
    28ba:	038b      	lsls	r3, r1, #14
    28bc:	1ac0      	subs	r0, r0, r3
    28be:	4152      	adcs	r2, r2
    28c0:	0b43      	lsrs	r3, r0, #13
    28c2:	428b      	cmp	r3, r1
    28c4:	d301      	bcc.n	28ca <__udivsi3+0x5e>
    28c6:	034b      	lsls	r3, r1, #13
    28c8:	1ac0      	subs	r0, r0, r3
    28ca:	4152      	adcs	r2, r2
    28cc:	0b03      	lsrs	r3, r0, #12
    28ce:	428b      	cmp	r3, r1
    28d0:	d301      	bcc.n	28d6 <__udivsi3+0x6a>
    28d2:	030b      	lsls	r3, r1, #12
    28d4:	1ac0      	subs	r0, r0, r3
    28d6:	4152      	adcs	r2, r2
    28d8:	0ac3      	lsrs	r3, r0, #11
    28da:	428b      	cmp	r3, r1
    28dc:	d301      	bcc.n	28e2 <__udivsi3+0x76>
    28de:	02cb      	lsls	r3, r1, #11
    28e0:	1ac0      	subs	r0, r0, r3
    28e2:	4152      	adcs	r2, r2
    28e4:	0a83      	lsrs	r3, r0, #10
    28e6:	428b      	cmp	r3, r1
    28e8:	d301      	bcc.n	28ee <__udivsi3+0x82>
    28ea:	028b      	lsls	r3, r1, #10
    28ec:	1ac0      	subs	r0, r0, r3
    28ee:	4152      	adcs	r2, r2
    28f0:	0a43      	lsrs	r3, r0, #9
    28f2:	428b      	cmp	r3, r1
    28f4:	d301      	bcc.n	28fa <__udivsi3+0x8e>
    28f6:	024b      	lsls	r3, r1, #9
    28f8:	1ac0      	subs	r0, r0, r3
    28fa:	4152      	adcs	r2, r2
    28fc:	0a03      	lsrs	r3, r0, #8
    28fe:	428b      	cmp	r3, r1
    2900:	d301      	bcc.n	2906 <__udivsi3+0x9a>
    2902:	020b      	lsls	r3, r1, #8
    2904:	1ac0      	subs	r0, r0, r3
    2906:	4152      	adcs	r2, r2
    2908:	d2cd      	bcs.n	28a6 <__udivsi3+0x3a>
    290a:	09c3      	lsrs	r3, r0, #7
    290c:	428b      	cmp	r3, r1
    290e:	d301      	bcc.n	2914 <__udivsi3+0xa8>
    2910:	01cb      	lsls	r3, r1, #7
    2912:	1ac0      	subs	r0, r0, r3
    2914:	4152      	adcs	r2, r2
    2916:	0983      	lsrs	r3, r0, #6
    2918:	428b      	cmp	r3, r1
    291a:	d301      	bcc.n	2920 <__udivsi3+0xb4>
    291c:	018b      	lsls	r3, r1, #6
    291e:	1ac0      	subs	r0, r0, r3
    2920:	4152      	adcs	r2, r2
    2922:	0943      	lsrs	r3, r0, #5
    2924:	428b      	cmp	r3, r1
    2926:	d301      	bcc.n	292c <__udivsi3+0xc0>
    2928:	014b      	lsls	r3, r1, #5
    292a:	1ac0      	subs	r0, r0, r3
    292c:	4152      	adcs	r2, r2
    292e:	0903      	lsrs	r3, r0, #4
    2930:	428b      	cmp	r3, r1
    2932:	d301      	bcc.n	2938 <__udivsi3+0xcc>
    2934:	010b      	lsls	r3, r1, #4
    2936:	1ac0      	subs	r0, r0, r3
    2938:	4152      	adcs	r2, r2
    293a:	08c3      	lsrs	r3, r0, #3
    293c:	428b      	cmp	r3, r1
    293e:	d301      	bcc.n	2944 <__udivsi3+0xd8>
    2940:	00cb      	lsls	r3, r1, #3
    2942:	1ac0      	subs	r0, r0, r3
    2944:	4152      	adcs	r2, r2
    2946:	0883      	lsrs	r3, r0, #2
    2948:	428b      	cmp	r3, r1
    294a:	d301      	bcc.n	2950 <__udivsi3+0xe4>
    294c:	008b      	lsls	r3, r1, #2
    294e:	1ac0      	subs	r0, r0, r3
    2950:	4152      	adcs	r2, r2
    2952:	0843      	lsrs	r3, r0, #1
    2954:	428b      	cmp	r3, r1
    2956:	d301      	bcc.n	295c <__udivsi3+0xf0>
    2958:	004b      	lsls	r3, r1, #1
    295a:	1ac0      	subs	r0, r0, r3
    295c:	4152      	adcs	r2, r2
    295e:	1a41      	subs	r1, r0, r1
    2960:	d200      	bcs.n	2964 <__udivsi3+0xf8>
    2962:	4601      	mov	r1, r0
    2964:	4152      	adcs	r2, r2
    2966:	4610      	mov	r0, r2
    2968:	4770      	bx	lr
    296a:	e7ff      	b.n	296c <__udivsi3+0x100>
    296c:	b501      	push	{r0, lr}
    296e:	2000      	movs	r0, #0
    2970:	f000 f806 	bl	2980 <__aeabi_idiv0>
    2974:	bd02      	pop	{r1, pc}
    2976:	46c0      	nop			; (mov r8, r8)

00002978 <__aeabi_uidivmod>:
    2978:	2900      	cmp	r1, #0
    297a:	d0f7      	beq.n	296c <__udivsi3+0x100>
    297c:	e776      	b.n	286c <__udivsi3>
    297e:	4770      	bx	lr

00002980 <__aeabi_idiv0>:
    2980:	4770      	bx	lr
    2982:	46c0      	nop			; (mov r8, r8)

00002984 <__aeabi_f2uiz>:
    2984:	219e      	movs	r1, #158	; 0x9e
    2986:	b510      	push	{r4, lr}
    2988:	05c9      	lsls	r1, r1, #23
    298a:	1c04      	adds	r4, r0, #0
    298c:	f001 fcca 	bl	4324 <__aeabi_fcmpge>
    2990:	2800      	cmp	r0, #0
    2992:	d103      	bne.n	299c <__aeabi_f2uiz+0x18>
    2994:	1c20      	adds	r0, r4, #0
    2996:	f000 fda3 	bl	34e0 <__aeabi_f2iz>
    299a:	bd10      	pop	{r4, pc}
    299c:	219e      	movs	r1, #158	; 0x9e
    299e:	1c20      	adds	r0, r4, #0
    29a0:	05c9      	lsls	r1, r1, #23
    29a2:	f000 fc01 	bl	31a8 <__aeabi_fsub>
    29a6:	f000 fd9b 	bl	34e0 <__aeabi_f2iz>
    29aa:	2380      	movs	r3, #128	; 0x80
    29ac:	061b      	lsls	r3, r3, #24
    29ae:	469c      	mov	ip, r3
    29b0:	4460      	add	r0, ip
    29b2:	e7f2      	b.n	299a <__aeabi_f2uiz+0x16>

000029b4 <__aeabi_fadd>:
    29b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b6:	46c6      	mov	lr, r8
    29b8:	024e      	lsls	r6, r1, #9
    29ba:	0247      	lsls	r7, r0, #9
    29bc:	0a76      	lsrs	r6, r6, #9
    29be:	0a7b      	lsrs	r3, r7, #9
    29c0:	0044      	lsls	r4, r0, #1
    29c2:	0fc5      	lsrs	r5, r0, #31
    29c4:	00f7      	lsls	r7, r6, #3
    29c6:	0048      	lsls	r0, r1, #1
    29c8:	4698      	mov	r8, r3
    29ca:	b500      	push	{lr}
    29cc:	0e24      	lsrs	r4, r4, #24
    29ce:	002a      	movs	r2, r5
    29d0:	00db      	lsls	r3, r3, #3
    29d2:	0e00      	lsrs	r0, r0, #24
    29d4:	0fc9      	lsrs	r1, r1, #31
    29d6:	46bc      	mov	ip, r7
    29d8:	428d      	cmp	r5, r1
    29da:	d067      	beq.n	2aac <__aeabi_fadd+0xf8>
    29dc:	1a22      	subs	r2, r4, r0
    29de:	2a00      	cmp	r2, #0
    29e0:	dc00      	bgt.n	29e4 <__aeabi_fadd+0x30>
    29e2:	e0a5      	b.n	2b30 <__aeabi_fadd+0x17c>
    29e4:	2800      	cmp	r0, #0
    29e6:	d13a      	bne.n	2a5e <__aeabi_fadd+0xaa>
    29e8:	2f00      	cmp	r7, #0
    29ea:	d100      	bne.n	29ee <__aeabi_fadd+0x3a>
    29ec:	e093      	b.n	2b16 <__aeabi_fadd+0x162>
    29ee:	1e51      	subs	r1, r2, #1
    29f0:	2900      	cmp	r1, #0
    29f2:	d000      	beq.n	29f6 <__aeabi_fadd+0x42>
    29f4:	e0bc      	b.n	2b70 <__aeabi_fadd+0x1bc>
    29f6:	2401      	movs	r4, #1
    29f8:	1bdb      	subs	r3, r3, r7
    29fa:	015a      	lsls	r2, r3, #5
    29fc:	d546      	bpl.n	2a8c <__aeabi_fadd+0xd8>
    29fe:	019b      	lsls	r3, r3, #6
    2a00:	099e      	lsrs	r6, r3, #6
    2a02:	0030      	movs	r0, r6
    2a04:	f001 fc98 	bl	4338 <__clzsi2>
    2a08:	3805      	subs	r0, #5
    2a0a:	4086      	lsls	r6, r0
    2a0c:	4284      	cmp	r4, r0
    2a0e:	dd00      	ble.n	2a12 <__aeabi_fadd+0x5e>
    2a10:	e09d      	b.n	2b4e <__aeabi_fadd+0x19a>
    2a12:	1b04      	subs	r4, r0, r4
    2a14:	0032      	movs	r2, r6
    2a16:	2020      	movs	r0, #32
    2a18:	3401      	adds	r4, #1
    2a1a:	40e2      	lsrs	r2, r4
    2a1c:	1b04      	subs	r4, r0, r4
    2a1e:	40a6      	lsls	r6, r4
    2a20:	0033      	movs	r3, r6
    2a22:	1e5e      	subs	r6, r3, #1
    2a24:	41b3      	sbcs	r3, r6
    2a26:	2400      	movs	r4, #0
    2a28:	4313      	orrs	r3, r2
    2a2a:	075a      	lsls	r2, r3, #29
    2a2c:	d004      	beq.n	2a38 <__aeabi_fadd+0x84>
    2a2e:	220f      	movs	r2, #15
    2a30:	401a      	ands	r2, r3
    2a32:	2a04      	cmp	r2, #4
    2a34:	d000      	beq.n	2a38 <__aeabi_fadd+0x84>
    2a36:	3304      	adds	r3, #4
    2a38:	015a      	lsls	r2, r3, #5
    2a3a:	d529      	bpl.n	2a90 <__aeabi_fadd+0xdc>
    2a3c:	3401      	adds	r4, #1
    2a3e:	2cff      	cmp	r4, #255	; 0xff
    2a40:	d100      	bne.n	2a44 <__aeabi_fadd+0x90>
    2a42:	e081      	b.n	2b48 <__aeabi_fadd+0x194>
    2a44:	002a      	movs	r2, r5
    2a46:	019b      	lsls	r3, r3, #6
    2a48:	0a5b      	lsrs	r3, r3, #9
    2a4a:	b2e4      	uxtb	r4, r4
    2a4c:	025b      	lsls	r3, r3, #9
    2a4e:	05e4      	lsls	r4, r4, #23
    2a50:	0a58      	lsrs	r0, r3, #9
    2a52:	07d2      	lsls	r2, r2, #31
    2a54:	4320      	orrs	r0, r4
    2a56:	4310      	orrs	r0, r2
    2a58:	bc04      	pop	{r2}
    2a5a:	4690      	mov	r8, r2
    2a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5e:	2cff      	cmp	r4, #255	; 0xff
    2a60:	d0e3      	beq.n	2a2a <__aeabi_fadd+0x76>
    2a62:	2180      	movs	r1, #128	; 0x80
    2a64:	0038      	movs	r0, r7
    2a66:	04c9      	lsls	r1, r1, #19
    2a68:	4308      	orrs	r0, r1
    2a6a:	4684      	mov	ip, r0
    2a6c:	2a1b      	cmp	r2, #27
    2a6e:	dd00      	ble.n	2a72 <__aeabi_fadd+0xbe>
    2a70:	e082      	b.n	2b78 <__aeabi_fadd+0x1c4>
    2a72:	2020      	movs	r0, #32
    2a74:	4661      	mov	r1, ip
    2a76:	40d1      	lsrs	r1, r2
    2a78:	1a82      	subs	r2, r0, r2
    2a7a:	4660      	mov	r0, ip
    2a7c:	4090      	lsls	r0, r2
    2a7e:	0002      	movs	r2, r0
    2a80:	1e50      	subs	r0, r2, #1
    2a82:	4182      	sbcs	r2, r0
    2a84:	430a      	orrs	r2, r1
    2a86:	1a9b      	subs	r3, r3, r2
    2a88:	015a      	lsls	r2, r3, #5
    2a8a:	d4b8      	bmi.n	29fe <__aeabi_fadd+0x4a>
    2a8c:	075a      	lsls	r2, r3, #29
    2a8e:	d1ce      	bne.n	2a2e <__aeabi_fadd+0x7a>
    2a90:	08de      	lsrs	r6, r3, #3
    2a92:	002a      	movs	r2, r5
    2a94:	2cff      	cmp	r4, #255	; 0xff
    2a96:	d13a      	bne.n	2b0e <__aeabi_fadd+0x15a>
    2a98:	2e00      	cmp	r6, #0
    2a9a:	d100      	bne.n	2a9e <__aeabi_fadd+0xea>
    2a9c:	e0ae      	b.n	2bfc <__aeabi_fadd+0x248>
    2a9e:	2380      	movs	r3, #128	; 0x80
    2aa0:	03db      	lsls	r3, r3, #15
    2aa2:	4333      	orrs	r3, r6
    2aa4:	025b      	lsls	r3, r3, #9
    2aa6:	0a5b      	lsrs	r3, r3, #9
    2aa8:	24ff      	movs	r4, #255	; 0xff
    2aaa:	e7cf      	b.n	2a4c <__aeabi_fadd+0x98>
    2aac:	1a21      	subs	r1, r4, r0
    2aae:	2900      	cmp	r1, #0
    2ab0:	dd52      	ble.n	2b58 <__aeabi_fadd+0x1a4>
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d031      	beq.n	2b1a <__aeabi_fadd+0x166>
    2ab6:	2cff      	cmp	r4, #255	; 0xff
    2ab8:	d0b7      	beq.n	2a2a <__aeabi_fadd+0x76>
    2aba:	2080      	movs	r0, #128	; 0x80
    2abc:	003e      	movs	r6, r7
    2abe:	04c0      	lsls	r0, r0, #19
    2ac0:	4306      	orrs	r6, r0
    2ac2:	46b4      	mov	ip, r6
    2ac4:	291b      	cmp	r1, #27
    2ac6:	dd00      	ble.n	2aca <__aeabi_fadd+0x116>
    2ac8:	e0aa      	b.n	2c20 <__aeabi_fadd+0x26c>
    2aca:	2620      	movs	r6, #32
    2acc:	4660      	mov	r0, ip
    2ace:	40c8      	lsrs	r0, r1
    2ad0:	1a71      	subs	r1, r6, r1
    2ad2:	4666      	mov	r6, ip
    2ad4:	408e      	lsls	r6, r1
    2ad6:	0031      	movs	r1, r6
    2ad8:	1e4e      	subs	r6, r1, #1
    2ada:	41b1      	sbcs	r1, r6
    2adc:	4301      	orrs	r1, r0
    2ade:	185b      	adds	r3, r3, r1
    2ae0:	0159      	lsls	r1, r3, #5
    2ae2:	d5d3      	bpl.n	2a8c <__aeabi_fadd+0xd8>
    2ae4:	3401      	adds	r4, #1
    2ae6:	2cff      	cmp	r4, #255	; 0xff
    2ae8:	d100      	bne.n	2aec <__aeabi_fadd+0x138>
    2aea:	e087      	b.n	2bfc <__aeabi_fadd+0x248>
    2aec:	2201      	movs	r2, #1
    2aee:	4978      	ldr	r1, [pc, #480]	; (2cd0 <__aeabi_fadd+0x31c>)
    2af0:	401a      	ands	r2, r3
    2af2:	085b      	lsrs	r3, r3, #1
    2af4:	400b      	ands	r3, r1
    2af6:	4313      	orrs	r3, r2
    2af8:	e797      	b.n	2a2a <__aeabi_fadd+0x76>
    2afa:	2c00      	cmp	r4, #0
    2afc:	d000      	beq.n	2b00 <__aeabi_fadd+0x14c>
    2afe:	e0a7      	b.n	2c50 <__aeabi_fadd+0x29c>
    2b00:	2b00      	cmp	r3, #0
    2b02:	d000      	beq.n	2b06 <__aeabi_fadd+0x152>
    2b04:	e0b6      	b.n	2c74 <__aeabi_fadd+0x2c0>
    2b06:	1e3b      	subs	r3, r7, #0
    2b08:	d162      	bne.n	2bd0 <__aeabi_fadd+0x21c>
    2b0a:	2600      	movs	r6, #0
    2b0c:	2200      	movs	r2, #0
    2b0e:	0273      	lsls	r3, r6, #9
    2b10:	0a5b      	lsrs	r3, r3, #9
    2b12:	b2e4      	uxtb	r4, r4
    2b14:	e79a      	b.n	2a4c <__aeabi_fadd+0x98>
    2b16:	0014      	movs	r4, r2
    2b18:	e787      	b.n	2a2a <__aeabi_fadd+0x76>
    2b1a:	2f00      	cmp	r7, #0
    2b1c:	d04d      	beq.n	2bba <__aeabi_fadd+0x206>
    2b1e:	1e48      	subs	r0, r1, #1
    2b20:	2800      	cmp	r0, #0
    2b22:	d157      	bne.n	2bd4 <__aeabi_fadd+0x220>
    2b24:	4463      	add	r3, ip
    2b26:	2401      	movs	r4, #1
    2b28:	015a      	lsls	r2, r3, #5
    2b2a:	d5af      	bpl.n	2a8c <__aeabi_fadd+0xd8>
    2b2c:	2402      	movs	r4, #2
    2b2e:	e7dd      	b.n	2aec <__aeabi_fadd+0x138>
    2b30:	2a00      	cmp	r2, #0
    2b32:	d124      	bne.n	2b7e <__aeabi_fadd+0x1ca>
    2b34:	1c62      	adds	r2, r4, #1
    2b36:	b2d2      	uxtb	r2, r2
    2b38:	2a01      	cmp	r2, #1
    2b3a:	ddde      	ble.n	2afa <__aeabi_fadd+0x146>
    2b3c:	1bde      	subs	r6, r3, r7
    2b3e:	0172      	lsls	r2, r6, #5
    2b40:	d535      	bpl.n	2bae <__aeabi_fadd+0x1fa>
    2b42:	1afe      	subs	r6, r7, r3
    2b44:	000d      	movs	r5, r1
    2b46:	e75c      	b.n	2a02 <__aeabi_fadd+0x4e>
    2b48:	002a      	movs	r2, r5
    2b4a:	2300      	movs	r3, #0
    2b4c:	e77e      	b.n	2a4c <__aeabi_fadd+0x98>
    2b4e:	0033      	movs	r3, r6
    2b50:	4a60      	ldr	r2, [pc, #384]	; (2cd4 <__aeabi_fadd+0x320>)
    2b52:	1a24      	subs	r4, r4, r0
    2b54:	4013      	ands	r3, r2
    2b56:	e768      	b.n	2a2a <__aeabi_fadd+0x76>
    2b58:	2900      	cmp	r1, #0
    2b5a:	d163      	bne.n	2c24 <__aeabi_fadd+0x270>
    2b5c:	1c61      	adds	r1, r4, #1
    2b5e:	b2c8      	uxtb	r0, r1
    2b60:	2801      	cmp	r0, #1
    2b62:	dd4e      	ble.n	2c02 <__aeabi_fadd+0x24e>
    2b64:	29ff      	cmp	r1, #255	; 0xff
    2b66:	d049      	beq.n	2bfc <__aeabi_fadd+0x248>
    2b68:	4463      	add	r3, ip
    2b6a:	085b      	lsrs	r3, r3, #1
    2b6c:	000c      	movs	r4, r1
    2b6e:	e75c      	b.n	2a2a <__aeabi_fadd+0x76>
    2b70:	2aff      	cmp	r2, #255	; 0xff
    2b72:	d041      	beq.n	2bf8 <__aeabi_fadd+0x244>
    2b74:	000a      	movs	r2, r1
    2b76:	e779      	b.n	2a6c <__aeabi_fadd+0xb8>
    2b78:	2201      	movs	r2, #1
    2b7a:	1a9b      	subs	r3, r3, r2
    2b7c:	e784      	b.n	2a88 <__aeabi_fadd+0xd4>
    2b7e:	2c00      	cmp	r4, #0
    2b80:	d01d      	beq.n	2bbe <__aeabi_fadd+0x20a>
    2b82:	28ff      	cmp	r0, #255	; 0xff
    2b84:	d022      	beq.n	2bcc <__aeabi_fadd+0x218>
    2b86:	2480      	movs	r4, #128	; 0x80
    2b88:	04e4      	lsls	r4, r4, #19
    2b8a:	4252      	negs	r2, r2
    2b8c:	4323      	orrs	r3, r4
    2b8e:	2a1b      	cmp	r2, #27
    2b90:	dd00      	ble.n	2b94 <__aeabi_fadd+0x1e0>
    2b92:	e08a      	b.n	2caa <__aeabi_fadd+0x2f6>
    2b94:	001c      	movs	r4, r3
    2b96:	2520      	movs	r5, #32
    2b98:	40d4      	lsrs	r4, r2
    2b9a:	1aaa      	subs	r2, r5, r2
    2b9c:	4093      	lsls	r3, r2
    2b9e:	1e5a      	subs	r2, r3, #1
    2ba0:	4193      	sbcs	r3, r2
    2ba2:	4323      	orrs	r3, r4
    2ba4:	4662      	mov	r2, ip
    2ba6:	0004      	movs	r4, r0
    2ba8:	1ad3      	subs	r3, r2, r3
    2baa:	000d      	movs	r5, r1
    2bac:	e725      	b.n	29fa <__aeabi_fadd+0x46>
    2bae:	2e00      	cmp	r6, #0
    2bb0:	d000      	beq.n	2bb4 <__aeabi_fadd+0x200>
    2bb2:	e726      	b.n	2a02 <__aeabi_fadd+0x4e>
    2bb4:	2200      	movs	r2, #0
    2bb6:	2400      	movs	r4, #0
    2bb8:	e7a9      	b.n	2b0e <__aeabi_fadd+0x15a>
    2bba:	000c      	movs	r4, r1
    2bbc:	e735      	b.n	2a2a <__aeabi_fadd+0x76>
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d04d      	beq.n	2c5e <__aeabi_fadd+0x2aa>
    2bc2:	43d2      	mvns	r2, r2
    2bc4:	2a00      	cmp	r2, #0
    2bc6:	d0ed      	beq.n	2ba4 <__aeabi_fadd+0x1f0>
    2bc8:	28ff      	cmp	r0, #255	; 0xff
    2bca:	d1e0      	bne.n	2b8e <__aeabi_fadd+0x1da>
    2bcc:	4663      	mov	r3, ip
    2bce:	24ff      	movs	r4, #255	; 0xff
    2bd0:	000d      	movs	r5, r1
    2bd2:	e72a      	b.n	2a2a <__aeabi_fadd+0x76>
    2bd4:	29ff      	cmp	r1, #255	; 0xff
    2bd6:	d00f      	beq.n	2bf8 <__aeabi_fadd+0x244>
    2bd8:	0001      	movs	r1, r0
    2bda:	e773      	b.n	2ac4 <__aeabi_fadd+0x110>
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d061      	beq.n	2ca4 <__aeabi_fadd+0x2f0>
    2be0:	24ff      	movs	r4, #255	; 0xff
    2be2:	2f00      	cmp	r7, #0
    2be4:	d100      	bne.n	2be8 <__aeabi_fadd+0x234>
    2be6:	e720      	b.n	2a2a <__aeabi_fadd+0x76>
    2be8:	2280      	movs	r2, #128	; 0x80
    2bea:	4641      	mov	r1, r8
    2bec:	03d2      	lsls	r2, r2, #15
    2bee:	4211      	tst	r1, r2
    2bf0:	d002      	beq.n	2bf8 <__aeabi_fadd+0x244>
    2bf2:	4216      	tst	r6, r2
    2bf4:	d100      	bne.n	2bf8 <__aeabi_fadd+0x244>
    2bf6:	003b      	movs	r3, r7
    2bf8:	24ff      	movs	r4, #255	; 0xff
    2bfa:	e716      	b.n	2a2a <__aeabi_fadd+0x76>
    2bfc:	24ff      	movs	r4, #255	; 0xff
    2bfe:	2300      	movs	r3, #0
    2c00:	e724      	b.n	2a4c <__aeabi_fadd+0x98>
    2c02:	2c00      	cmp	r4, #0
    2c04:	d1ea      	bne.n	2bdc <__aeabi_fadd+0x228>
    2c06:	2b00      	cmp	r3, #0
    2c08:	d058      	beq.n	2cbc <__aeabi_fadd+0x308>
    2c0a:	2f00      	cmp	r7, #0
    2c0c:	d100      	bne.n	2c10 <__aeabi_fadd+0x25c>
    2c0e:	e70c      	b.n	2a2a <__aeabi_fadd+0x76>
    2c10:	4463      	add	r3, ip
    2c12:	015a      	lsls	r2, r3, #5
    2c14:	d400      	bmi.n	2c18 <__aeabi_fadd+0x264>
    2c16:	e739      	b.n	2a8c <__aeabi_fadd+0xd8>
    2c18:	4a2e      	ldr	r2, [pc, #184]	; (2cd4 <__aeabi_fadd+0x320>)
    2c1a:	000c      	movs	r4, r1
    2c1c:	4013      	ands	r3, r2
    2c1e:	e704      	b.n	2a2a <__aeabi_fadd+0x76>
    2c20:	2101      	movs	r1, #1
    2c22:	e75c      	b.n	2ade <__aeabi_fadd+0x12a>
    2c24:	2c00      	cmp	r4, #0
    2c26:	d11e      	bne.n	2c66 <__aeabi_fadd+0x2b2>
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d040      	beq.n	2cae <__aeabi_fadd+0x2fa>
    2c2c:	43c9      	mvns	r1, r1
    2c2e:	2900      	cmp	r1, #0
    2c30:	d00b      	beq.n	2c4a <__aeabi_fadd+0x296>
    2c32:	28ff      	cmp	r0, #255	; 0xff
    2c34:	d036      	beq.n	2ca4 <__aeabi_fadd+0x2f0>
    2c36:	291b      	cmp	r1, #27
    2c38:	dc47      	bgt.n	2cca <__aeabi_fadd+0x316>
    2c3a:	001c      	movs	r4, r3
    2c3c:	2620      	movs	r6, #32
    2c3e:	40cc      	lsrs	r4, r1
    2c40:	1a71      	subs	r1, r6, r1
    2c42:	408b      	lsls	r3, r1
    2c44:	1e59      	subs	r1, r3, #1
    2c46:	418b      	sbcs	r3, r1
    2c48:	4323      	orrs	r3, r4
    2c4a:	4463      	add	r3, ip
    2c4c:	0004      	movs	r4, r0
    2c4e:	e747      	b.n	2ae0 <__aeabi_fadd+0x12c>
    2c50:	2b00      	cmp	r3, #0
    2c52:	d118      	bne.n	2c86 <__aeabi_fadd+0x2d2>
    2c54:	1e3b      	subs	r3, r7, #0
    2c56:	d02d      	beq.n	2cb4 <__aeabi_fadd+0x300>
    2c58:	000d      	movs	r5, r1
    2c5a:	24ff      	movs	r4, #255	; 0xff
    2c5c:	e6e5      	b.n	2a2a <__aeabi_fadd+0x76>
    2c5e:	003b      	movs	r3, r7
    2c60:	0004      	movs	r4, r0
    2c62:	000d      	movs	r5, r1
    2c64:	e6e1      	b.n	2a2a <__aeabi_fadd+0x76>
    2c66:	28ff      	cmp	r0, #255	; 0xff
    2c68:	d01c      	beq.n	2ca4 <__aeabi_fadd+0x2f0>
    2c6a:	2480      	movs	r4, #128	; 0x80
    2c6c:	04e4      	lsls	r4, r4, #19
    2c6e:	4249      	negs	r1, r1
    2c70:	4323      	orrs	r3, r4
    2c72:	e7e0      	b.n	2c36 <__aeabi_fadd+0x282>
    2c74:	2f00      	cmp	r7, #0
    2c76:	d100      	bne.n	2c7a <__aeabi_fadd+0x2c6>
    2c78:	e6d7      	b.n	2a2a <__aeabi_fadd+0x76>
    2c7a:	1bde      	subs	r6, r3, r7
    2c7c:	0172      	lsls	r2, r6, #5
    2c7e:	d51f      	bpl.n	2cc0 <__aeabi_fadd+0x30c>
    2c80:	1afb      	subs	r3, r7, r3
    2c82:	000d      	movs	r5, r1
    2c84:	e6d1      	b.n	2a2a <__aeabi_fadd+0x76>
    2c86:	24ff      	movs	r4, #255	; 0xff
    2c88:	2f00      	cmp	r7, #0
    2c8a:	d100      	bne.n	2c8e <__aeabi_fadd+0x2da>
    2c8c:	e6cd      	b.n	2a2a <__aeabi_fadd+0x76>
    2c8e:	2280      	movs	r2, #128	; 0x80
    2c90:	4640      	mov	r0, r8
    2c92:	03d2      	lsls	r2, r2, #15
    2c94:	4210      	tst	r0, r2
    2c96:	d0af      	beq.n	2bf8 <__aeabi_fadd+0x244>
    2c98:	4216      	tst	r6, r2
    2c9a:	d1ad      	bne.n	2bf8 <__aeabi_fadd+0x244>
    2c9c:	003b      	movs	r3, r7
    2c9e:	000d      	movs	r5, r1
    2ca0:	24ff      	movs	r4, #255	; 0xff
    2ca2:	e6c2      	b.n	2a2a <__aeabi_fadd+0x76>
    2ca4:	4663      	mov	r3, ip
    2ca6:	24ff      	movs	r4, #255	; 0xff
    2ca8:	e6bf      	b.n	2a2a <__aeabi_fadd+0x76>
    2caa:	2301      	movs	r3, #1
    2cac:	e77a      	b.n	2ba4 <__aeabi_fadd+0x1f0>
    2cae:	003b      	movs	r3, r7
    2cb0:	0004      	movs	r4, r0
    2cb2:	e6ba      	b.n	2a2a <__aeabi_fadd+0x76>
    2cb4:	2680      	movs	r6, #128	; 0x80
    2cb6:	2200      	movs	r2, #0
    2cb8:	03f6      	lsls	r6, r6, #15
    2cba:	e6f0      	b.n	2a9e <__aeabi_fadd+0xea>
    2cbc:	003b      	movs	r3, r7
    2cbe:	e6b4      	b.n	2a2a <__aeabi_fadd+0x76>
    2cc0:	1e33      	subs	r3, r6, #0
    2cc2:	d000      	beq.n	2cc6 <__aeabi_fadd+0x312>
    2cc4:	e6e2      	b.n	2a8c <__aeabi_fadd+0xd8>
    2cc6:	2200      	movs	r2, #0
    2cc8:	e721      	b.n	2b0e <__aeabi_fadd+0x15a>
    2cca:	2301      	movs	r3, #1
    2ccc:	e7bd      	b.n	2c4a <__aeabi_fadd+0x296>
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	7dffffff 	.word	0x7dffffff
    2cd4:	fbffffff 	.word	0xfbffffff

00002cd8 <__aeabi_fdiv>:
    2cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cda:	4657      	mov	r7, sl
    2cdc:	464e      	mov	r6, r9
    2cde:	46de      	mov	lr, fp
    2ce0:	4645      	mov	r5, r8
    2ce2:	b5e0      	push	{r5, r6, r7, lr}
    2ce4:	0244      	lsls	r4, r0, #9
    2ce6:	0043      	lsls	r3, r0, #1
    2ce8:	0fc6      	lsrs	r6, r0, #31
    2cea:	b083      	sub	sp, #12
    2cec:	1c0f      	adds	r7, r1, #0
    2cee:	0a64      	lsrs	r4, r4, #9
    2cf0:	0e1b      	lsrs	r3, r3, #24
    2cf2:	46b2      	mov	sl, r6
    2cf4:	d053      	beq.n	2d9e <__aeabi_fdiv+0xc6>
    2cf6:	2bff      	cmp	r3, #255	; 0xff
    2cf8:	d027      	beq.n	2d4a <__aeabi_fdiv+0x72>
    2cfa:	2280      	movs	r2, #128	; 0x80
    2cfc:	00e4      	lsls	r4, r4, #3
    2cfe:	04d2      	lsls	r2, r2, #19
    2d00:	4314      	orrs	r4, r2
    2d02:	227f      	movs	r2, #127	; 0x7f
    2d04:	4252      	negs	r2, r2
    2d06:	4690      	mov	r8, r2
    2d08:	4498      	add	r8, r3
    2d0a:	2300      	movs	r3, #0
    2d0c:	4699      	mov	r9, r3
    2d0e:	469b      	mov	fp, r3
    2d10:	027d      	lsls	r5, r7, #9
    2d12:	0078      	lsls	r0, r7, #1
    2d14:	0ffb      	lsrs	r3, r7, #31
    2d16:	0a6d      	lsrs	r5, r5, #9
    2d18:	0e00      	lsrs	r0, r0, #24
    2d1a:	9300      	str	r3, [sp, #0]
    2d1c:	d024      	beq.n	2d68 <__aeabi_fdiv+0x90>
    2d1e:	28ff      	cmp	r0, #255	; 0xff
    2d20:	d046      	beq.n	2db0 <__aeabi_fdiv+0xd8>
    2d22:	2380      	movs	r3, #128	; 0x80
    2d24:	2100      	movs	r1, #0
    2d26:	00ed      	lsls	r5, r5, #3
    2d28:	04db      	lsls	r3, r3, #19
    2d2a:	431d      	orrs	r5, r3
    2d2c:	387f      	subs	r0, #127	; 0x7f
    2d2e:	4647      	mov	r7, r8
    2d30:	1a38      	subs	r0, r7, r0
    2d32:	464f      	mov	r7, r9
    2d34:	430f      	orrs	r7, r1
    2d36:	00bf      	lsls	r7, r7, #2
    2d38:	46b9      	mov	r9, r7
    2d3a:	0033      	movs	r3, r6
    2d3c:	9a00      	ldr	r2, [sp, #0]
    2d3e:	4f87      	ldr	r7, [pc, #540]	; (2f5c <__aeabi_fdiv+0x284>)
    2d40:	4053      	eors	r3, r2
    2d42:	464a      	mov	r2, r9
    2d44:	58ba      	ldr	r2, [r7, r2]
    2d46:	9301      	str	r3, [sp, #4]
    2d48:	4697      	mov	pc, r2
    2d4a:	2c00      	cmp	r4, #0
    2d4c:	d14e      	bne.n	2dec <__aeabi_fdiv+0x114>
    2d4e:	2308      	movs	r3, #8
    2d50:	4699      	mov	r9, r3
    2d52:	33f7      	adds	r3, #247	; 0xf7
    2d54:	4698      	mov	r8, r3
    2d56:	3bfd      	subs	r3, #253	; 0xfd
    2d58:	469b      	mov	fp, r3
    2d5a:	027d      	lsls	r5, r7, #9
    2d5c:	0078      	lsls	r0, r7, #1
    2d5e:	0ffb      	lsrs	r3, r7, #31
    2d60:	0a6d      	lsrs	r5, r5, #9
    2d62:	0e00      	lsrs	r0, r0, #24
    2d64:	9300      	str	r3, [sp, #0]
    2d66:	d1da      	bne.n	2d1e <__aeabi_fdiv+0x46>
    2d68:	2d00      	cmp	r5, #0
    2d6a:	d126      	bne.n	2dba <__aeabi_fdiv+0xe2>
    2d6c:	2000      	movs	r0, #0
    2d6e:	2101      	movs	r1, #1
    2d70:	0033      	movs	r3, r6
    2d72:	9a00      	ldr	r2, [sp, #0]
    2d74:	4f7a      	ldr	r7, [pc, #488]	; (2f60 <__aeabi_fdiv+0x288>)
    2d76:	4053      	eors	r3, r2
    2d78:	4642      	mov	r2, r8
    2d7a:	1a10      	subs	r0, r2, r0
    2d7c:	464a      	mov	r2, r9
    2d7e:	430a      	orrs	r2, r1
    2d80:	0092      	lsls	r2, r2, #2
    2d82:	58ba      	ldr	r2, [r7, r2]
    2d84:	001d      	movs	r5, r3
    2d86:	4697      	mov	pc, r2
    2d88:	9b00      	ldr	r3, [sp, #0]
    2d8a:	002c      	movs	r4, r5
    2d8c:	469a      	mov	sl, r3
    2d8e:	468b      	mov	fp, r1
    2d90:	465b      	mov	r3, fp
    2d92:	2b02      	cmp	r3, #2
    2d94:	d131      	bne.n	2dfa <__aeabi_fdiv+0x122>
    2d96:	4653      	mov	r3, sl
    2d98:	21ff      	movs	r1, #255	; 0xff
    2d9a:	2400      	movs	r4, #0
    2d9c:	e038      	b.n	2e10 <__aeabi_fdiv+0x138>
    2d9e:	2c00      	cmp	r4, #0
    2da0:	d117      	bne.n	2dd2 <__aeabi_fdiv+0xfa>
    2da2:	2304      	movs	r3, #4
    2da4:	4699      	mov	r9, r3
    2da6:	2300      	movs	r3, #0
    2da8:	4698      	mov	r8, r3
    2daa:	3301      	adds	r3, #1
    2dac:	469b      	mov	fp, r3
    2dae:	e7af      	b.n	2d10 <__aeabi_fdiv+0x38>
    2db0:	20ff      	movs	r0, #255	; 0xff
    2db2:	2d00      	cmp	r5, #0
    2db4:	d10b      	bne.n	2dce <__aeabi_fdiv+0xf6>
    2db6:	2102      	movs	r1, #2
    2db8:	e7da      	b.n	2d70 <__aeabi_fdiv+0x98>
    2dba:	0028      	movs	r0, r5
    2dbc:	f001 fabc 	bl	4338 <__clzsi2>
    2dc0:	1f43      	subs	r3, r0, #5
    2dc2:	409d      	lsls	r5, r3
    2dc4:	2376      	movs	r3, #118	; 0x76
    2dc6:	425b      	negs	r3, r3
    2dc8:	1a18      	subs	r0, r3, r0
    2dca:	2100      	movs	r1, #0
    2dcc:	e7af      	b.n	2d2e <__aeabi_fdiv+0x56>
    2dce:	2103      	movs	r1, #3
    2dd0:	e7ad      	b.n	2d2e <__aeabi_fdiv+0x56>
    2dd2:	0020      	movs	r0, r4
    2dd4:	f001 fab0 	bl	4338 <__clzsi2>
    2dd8:	1f43      	subs	r3, r0, #5
    2dda:	409c      	lsls	r4, r3
    2ddc:	2376      	movs	r3, #118	; 0x76
    2dde:	425b      	negs	r3, r3
    2de0:	1a1b      	subs	r3, r3, r0
    2de2:	4698      	mov	r8, r3
    2de4:	2300      	movs	r3, #0
    2de6:	4699      	mov	r9, r3
    2de8:	469b      	mov	fp, r3
    2dea:	e791      	b.n	2d10 <__aeabi_fdiv+0x38>
    2dec:	230c      	movs	r3, #12
    2dee:	4699      	mov	r9, r3
    2df0:	33f3      	adds	r3, #243	; 0xf3
    2df2:	4698      	mov	r8, r3
    2df4:	3bfc      	subs	r3, #252	; 0xfc
    2df6:	469b      	mov	fp, r3
    2df8:	e78a      	b.n	2d10 <__aeabi_fdiv+0x38>
    2dfa:	2b03      	cmp	r3, #3
    2dfc:	d100      	bne.n	2e00 <__aeabi_fdiv+0x128>
    2dfe:	e0a5      	b.n	2f4c <__aeabi_fdiv+0x274>
    2e00:	4655      	mov	r5, sl
    2e02:	2b01      	cmp	r3, #1
    2e04:	d000      	beq.n	2e08 <__aeabi_fdiv+0x130>
    2e06:	e081      	b.n	2f0c <__aeabi_fdiv+0x234>
    2e08:	2301      	movs	r3, #1
    2e0a:	2100      	movs	r1, #0
    2e0c:	2400      	movs	r4, #0
    2e0e:	402b      	ands	r3, r5
    2e10:	0264      	lsls	r4, r4, #9
    2e12:	05c9      	lsls	r1, r1, #23
    2e14:	0a60      	lsrs	r0, r4, #9
    2e16:	07db      	lsls	r3, r3, #31
    2e18:	4308      	orrs	r0, r1
    2e1a:	4318      	orrs	r0, r3
    2e1c:	b003      	add	sp, #12
    2e1e:	bc3c      	pop	{r2, r3, r4, r5}
    2e20:	4690      	mov	r8, r2
    2e22:	4699      	mov	r9, r3
    2e24:	46a2      	mov	sl, r4
    2e26:	46ab      	mov	fp, r5
    2e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e2a:	2480      	movs	r4, #128	; 0x80
    2e2c:	2300      	movs	r3, #0
    2e2e:	03e4      	lsls	r4, r4, #15
    2e30:	21ff      	movs	r1, #255	; 0xff
    2e32:	e7ed      	b.n	2e10 <__aeabi_fdiv+0x138>
    2e34:	21ff      	movs	r1, #255	; 0xff
    2e36:	2400      	movs	r4, #0
    2e38:	e7ea      	b.n	2e10 <__aeabi_fdiv+0x138>
    2e3a:	2301      	movs	r3, #1
    2e3c:	1a59      	subs	r1, r3, r1
    2e3e:	291b      	cmp	r1, #27
    2e40:	dd66      	ble.n	2f10 <__aeabi_fdiv+0x238>
    2e42:	9a01      	ldr	r2, [sp, #4]
    2e44:	4013      	ands	r3, r2
    2e46:	2100      	movs	r1, #0
    2e48:	2400      	movs	r4, #0
    2e4a:	e7e1      	b.n	2e10 <__aeabi_fdiv+0x138>
    2e4c:	2380      	movs	r3, #128	; 0x80
    2e4e:	03db      	lsls	r3, r3, #15
    2e50:	421c      	tst	r4, r3
    2e52:	d038      	beq.n	2ec6 <__aeabi_fdiv+0x1ee>
    2e54:	421d      	tst	r5, r3
    2e56:	d051      	beq.n	2efc <__aeabi_fdiv+0x224>
    2e58:	431c      	orrs	r4, r3
    2e5a:	0264      	lsls	r4, r4, #9
    2e5c:	0a64      	lsrs	r4, r4, #9
    2e5e:	0033      	movs	r3, r6
    2e60:	21ff      	movs	r1, #255	; 0xff
    2e62:	e7d5      	b.n	2e10 <__aeabi_fdiv+0x138>
    2e64:	0163      	lsls	r3, r4, #5
    2e66:	016c      	lsls	r4, r5, #5
    2e68:	42a3      	cmp	r3, r4
    2e6a:	d23b      	bcs.n	2ee4 <__aeabi_fdiv+0x20c>
    2e6c:	261b      	movs	r6, #27
    2e6e:	2100      	movs	r1, #0
    2e70:	3801      	subs	r0, #1
    2e72:	2501      	movs	r5, #1
    2e74:	001f      	movs	r7, r3
    2e76:	0049      	lsls	r1, r1, #1
    2e78:	005b      	lsls	r3, r3, #1
    2e7a:	2f00      	cmp	r7, #0
    2e7c:	db01      	blt.n	2e82 <__aeabi_fdiv+0x1aa>
    2e7e:	429c      	cmp	r4, r3
    2e80:	d801      	bhi.n	2e86 <__aeabi_fdiv+0x1ae>
    2e82:	1b1b      	subs	r3, r3, r4
    2e84:	4329      	orrs	r1, r5
    2e86:	3e01      	subs	r6, #1
    2e88:	2e00      	cmp	r6, #0
    2e8a:	d1f3      	bne.n	2e74 <__aeabi_fdiv+0x19c>
    2e8c:	001c      	movs	r4, r3
    2e8e:	1e63      	subs	r3, r4, #1
    2e90:	419c      	sbcs	r4, r3
    2e92:	430c      	orrs	r4, r1
    2e94:	0001      	movs	r1, r0
    2e96:	317f      	adds	r1, #127	; 0x7f
    2e98:	2900      	cmp	r1, #0
    2e9a:	ddce      	ble.n	2e3a <__aeabi_fdiv+0x162>
    2e9c:	0763      	lsls	r3, r4, #29
    2e9e:	d004      	beq.n	2eaa <__aeabi_fdiv+0x1d2>
    2ea0:	230f      	movs	r3, #15
    2ea2:	4023      	ands	r3, r4
    2ea4:	2b04      	cmp	r3, #4
    2ea6:	d000      	beq.n	2eaa <__aeabi_fdiv+0x1d2>
    2ea8:	3404      	adds	r4, #4
    2eaa:	0123      	lsls	r3, r4, #4
    2eac:	d503      	bpl.n	2eb6 <__aeabi_fdiv+0x1de>
    2eae:	0001      	movs	r1, r0
    2eb0:	4b2c      	ldr	r3, [pc, #176]	; (2f64 <__aeabi_fdiv+0x28c>)
    2eb2:	3180      	adds	r1, #128	; 0x80
    2eb4:	401c      	ands	r4, r3
    2eb6:	29fe      	cmp	r1, #254	; 0xfe
    2eb8:	dd0d      	ble.n	2ed6 <__aeabi_fdiv+0x1fe>
    2eba:	2301      	movs	r3, #1
    2ebc:	9a01      	ldr	r2, [sp, #4]
    2ebe:	21ff      	movs	r1, #255	; 0xff
    2ec0:	4013      	ands	r3, r2
    2ec2:	2400      	movs	r4, #0
    2ec4:	e7a4      	b.n	2e10 <__aeabi_fdiv+0x138>
    2ec6:	2380      	movs	r3, #128	; 0x80
    2ec8:	03db      	lsls	r3, r3, #15
    2eca:	431c      	orrs	r4, r3
    2ecc:	0264      	lsls	r4, r4, #9
    2ece:	0a64      	lsrs	r4, r4, #9
    2ed0:	0033      	movs	r3, r6
    2ed2:	21ff      	movs	r1, #255	; 0xff
    2ed4:	e79c      	b.n	2e10 <__aeabi_fdiv+0x138>
    2ed6:	2301      	movs	r3, #1
    2ed8:	9a01      	ldr	r2, [sp, #4]
    2eda:	01a4      	lsls	r4, r4, #6
    2edc:	0a64      	lsrs	r4, r4, #9
    2ede:	b2c9      	uxtb	r1, r1
    2ee0:	4013      	ands	r3, r2
    2ee2:	e795      	b.n	2e10 <__aeabi_fdiv+0x138>
    2ee4:	1b1b      	subs	r3, r3, r4
    2ee6:	261a      	movs	r6, #26
    2ee8:	2101      	movs	r1, #1
    2eea:	e7c2      	b.n	2e72 <__aeabi_fdiv+0x19a>
    2eec:	9b00      	ldr	r3, [sp, #0]
    2eee:	468b      	mov	fp, r1
    2ef0:	469a      	mov	sl, r3
    2ef2:	2400      	movs	r4, #0
    2ef4:	e74c      	b.n	2d90 <__aeabi_fdiv+0xb8>
    2ef6:	0263      	lsls	r3, r4, #9
    2ef8:	d5e5      	bpl.n	2ec6 <__aeabi_fdiv+0x1ee>
    2efa:	2500      	movs	r5, #0
    2efc:	2480      	movs	r4, #128	; 0x80
    2efe:	03e4      	lsls	r4, r4, #15
    2f00:	432c      	orrs	r4, r5
    2f02:	0264      	lsls	r4, r4, #9
    2f04:	0a64      	lsrs	r4, r4, #9
    2f06:	9b00      	ldr	r3, [sp, #0]
    2f08:	21ff      	movs	r1, #255	; 0xff
    2f0a:	e781      	b.n	2e10 <__aeabi_fdiv+0x138>
    2f0c:	9501      	str	r5, [sp, #4]
    2f0e:	e7c1      	b.n	2e94 <__aeabi_fdiv+0x1bc>
    2f10:	0023      	movs	r3, r4
    2f12:	2020      	movs	r0, #32
    2f14:	40cb      	lsrs	r3, r1
    2f16:	1a41      	subs	r1, r0, r1
    2f18:	408c      	lsls	r4, r1
    2f1a:	1e61      	subs	r1, r4, #1
    2f1c:	418c      	sbcs	r4, r1
    2f1e:	431c      	orrs	r4, r3
    2f20:	0763      	lsls	r3, r4, #29
    2f22:	d004      	beq.n	2f2e <__aeabi_fdiv+0x256>
    2f24:	230f      	movs	r3, #15
    2f26:	4023      	ands	r3, r4
    2f28:	2b04      	cmp	r3, #4
    2f2a:	d000      	beq.n	2f2e <__aeabi_fdiv+0x256>
    2f2c:	3404      	adds	r4, #4
    2f2e:	0163      	lsls	r3, r4, #5
    2f30:	d505      	bpl.n	2f3e <__aeabi_fdiv+0x266>
    2f32:	2301      	movs	r3, #1
    2f34:	9a01      	ldr	r2, [sp, #4]
    2f36:	2101      	movs	r1, #1
    2f38:	4013      	ands	r3, r2
    2f3a:	2400      	movs	r4, #0
    2f3c:	e768      	b.n	2e10 <__aeabi_fdiv+0x138>
    2f3e:	2301      	movs	r3, #1
    2f40:	9a01      	ldr	r2, [sp, #4]
    2f42:	01a4      	lsls	r4, r4, #6
    2f44:	0a64      	lsrs	r4, r4, #9
    2f46:	4013      	ands	r3, r2
    2f48:	2100      	movs	r1, #0
    2f4a:	e761      	b.n	2e10 <__aeabi_fdiv+0x138>
    2f4c:	2380      	movs	r3, #128	; 0x80
    2f4e:	03db      	lsls	r3, r3, #15
    2f50:	431c      	orrs	r4, r3
    2f52:	0264      	lsls	r4, r4, #9
    2f54:	0a64      	lsrs	r4, r4, #9
    2f56:	4653      	mov	r3, sl
    2f58:	21ff      	movs	r1, #255	; 0xff
    2f5a:	e759      	b.n	2e10 <__aeabi_fdiv+0x138>
    2f5c:	000046c0 	.word	0x000046c0
    2f60:	00004700 	.word	0x00004700
    2f64:	f7ffffff 	.word	0xf7ffffff

00002f68 <__aeabi_fmul>:
    2f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f6a:	4657      	mov	r7, sl
    2f6c:	464e      	mov	r6, r9
    2f6e:	4645      	mov	r5, r8
    2f70:	46de      	mov	lr, fp
    2f72:	b5e0      	push	{r5, r6, r7, lr}
    2f74:	0247      	lsls	r7, r0, #9
    2f76:	0046      	lsls	r6, r0, #1
    2f78:	4688      	mov	r8, r1
    2f7a:	0a7f      	lsrs	r7, r7, #9
    2f7c:	0e36      	lsrs	r6, r6, #24
    2f7e:	0fc4      	lsrs	r4, r0, #31
    2f80:	2e00      	cmp	r6, #0
    2f82:	d047      	beq.n	3014 <__aeabi_fmul+0xac>
    2f84:	2eff      	cmp	r6, #255	; 0xff
    2f86:	d024      	beq.n	2fd2 <__aeabi_fmul+0x6a>
    2f88:	00fb      	lsls	r3, r7, #3
    2f8a:	2780      	movs	r7, #128	; 0x80
    2f8c:	04ff      	lsls	r7, r7, #19
    2f8e:	431f      	orrs	r7, r3
    2f90:	2300      	movs	r3, #0
    2f92:	4699      	mov	r9, r3
    2f94:	469a      	mov	sl, r3
    2f96:	3e7f      	subs	r6, #127	; 0x7f
    2f98:	4643      	mov	r3, r8
    2f9a:	025d      	lsls	r5, r3, #9
    2f9c:	0058      	lsls	r0, r3, #1
    2f9e:	0fdb      	lsrs	r3, r3, #31
    2fa0:	0a6d      	lsrs	r5, r5, #9
    2fa2:	0e00      	lsrs	r0, r0, #24
    2fa4:	4698      	mov	r8, r3
    2fa6:	d043      	beq.n	3030 <__aeabi_fmul+0xc8>
    2fa8:	28ff      	cmp	r0, #255	; 0xff
    2faa:	d03b      	beq.n	3024 <__aeabi_fmul+0xbc>
    2fac:	00eb      	lsls	r3, r5, #3
    2fae:	2580      	movs	r5, #128	; 0x80
    2fb0:	2200      	movs	r2, #0
    2fb2:	04ed      	lsls	r5, r5, #19
    2fb4:	431d      	orrs	r5, r3
    2fb6:	387f      	subs	r0, #127	; 0x7f
    2fb8:	1836      	adds	r6, r6, r0
    2fba:	1c73      	adds	r3, r6, #1
    2fbc:	4641      	mov	r1, r8
    2fbe:	469b      	mov	fp, r3
    2fc0:	464b      	mov	r3, r9
    2fc2:	4061      	eors	r1, r4
    2fc4:	4313      	orrs	r3, r2
    2fc6:	2b0f      	cmp	r3, #15
    2fc8:	d864      	bhi.n	3094 <__aeabi_fmul+0x12c>
    2fca:	4875      	ldr	r0, [pc, #468]	; (31a0 <__aeabi_fmul+0x238>)
    2fcc:	009b      	lsls	r3, r3, #2
    2fce:	58c3      	ldr	r3, [r0, r3]
    2fd0:	469f      	mov	pc, r3
    2fd2:	2f00      	cmp	r7, #0
    2fd4:	d142      	bne.n	305c <__aeabi_fmul+0xf4>
    2fd6:	2308      	movs	r3, #8
    2fd8:	4699      	mov	r9, r3
    2fda:	3b06      	subs	r3, #6
    2fdc:	26ff      	movs	r6, #255	; 0xff
    2fde:	469a      	mov	sl, r3
    2fe0:	e7da      	b.n	2f98 <__aeabi_fmul+0x30>
    2fe2:	4641      	mov	r1, r8
    2fe4:	2a02      	cmp	r2, #2
    2fe6:	d028      	beq.n	303a <__aeabi_fmul+0xd2>
    2fe8:	2a03      	cmp	r2, #3
    2fea:	d100      	bne.n	2fee <__aeabi_fmul+0x86>
    2fec:	e0ce      	b.n	318c <__aeabi_fmul+0x224>
    2fee:	2a01      	cmp	r2, #1
    2ff0:	d000      	beq.n	2ff4 <__aeabi_fmul+0x8c>
    2ff2:	e0ac      	b.n	314e <__aeabi_fmul+0x1e6>
    2ff4:	4011      	ands	r1, r2
    2ff6:	2000      	movs	r0, #0
    2ff8:	2200      	movs	r2, #0
    2ffa:	b2cc      	uxtb	r4, r1
    2ffc:	0240      	lsls	r0, r0, #9
    2ffe:	05d2      	lsls	r2, r2, #23
    3000:	0a40      	lsrs	r0, r0, #9
    3002:	07e4      	lsls	r4, r4, #31
    3004:	4310      	orrs	r0, r2
    3006:	4320      	orrs	r0, r4
    3008:	bc3c      	pop	{r2, r3, r4, r5}
    300a:	4690      	mov	r8, r2
    300c:	4699      	mov	r9, r3
    300e:	46a2      	mov	sl, r4
    3010:	46ab      	mov	fp, r5
    3012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3014:	2f00      	cmp	r7, #0
    3016:	d115      	bne.n	3044 <__aeabi_fmul+0xdc>
    3018:	2304      	movs	r3, #4
    301a:	4699      	mov	r9, r3
    301c:	3b03      	subs	r3, #3
    301e:	2600      	movs	r6, #0
    3020:	469a      	mov	sl, r3
    3022:	e7b9      	b.n	2f98 <__aeabi_fmul+0x30>
    3024:	20ff      	movs	r0, #255	; 0xff
    3026:	2202      	movs	r2, #2
    3028:	2d00      	cmp	r5, #0
    302a:	d0c5      	beq.n	2fb8 <__aeabi_fmul+0x50>
    302c:	2203      	movs	r2, #3
    302e:	e7c3      	b.n	2fb8 <__aeabi_fmul+0x50>
    3030:	2d00      	cmp	r5, #0
    3032:	d119      	bne.n	3068 <__aeabi_fmul+0x100>
    3034:	2000      	movs	r0, #0
    3036:	2201      	movs	r2, #1
    3038:	e7be      	b.n	2fb8 <__aeabi_fmul+0x50>
    303a:	2401      	movs	r4, #1
    303c:	22ff      	movs	r2, #255	; 0xff
    303e:	400c      	ands	r4, r1
    3040:	2000      	movs	r0, #0
    3042:	e7db      	b.n	2ffc <__aeabi_fmul+0x94>
    3044:	0038      	movs	r0, r7
    3046:	f001 f977 	bl	4338 <__clzsi2>
    304a:	2676      	movs	r6, #118	; 0x76
    304c:	1f43      	subs	r3, r0, #5
    304e:	409f      	lsls	r7, r3
    3050:	2300      	movs	r3, #0
    3052:	4276      	negs	r6, r6
    3054:	1a36      	subs	r6, r6, r0
    3056:	4699      	mov	r9, r3
    3058:	469a      	mov	sl, r3
    305a:	e79d      	b.n	2f98 <__aeabi_fmul+0x30>
    305c:	230c      	movs	r3, #12
    305e:	4699      	mov	r9, r3
    3060:	3b09      	subs	r3, #9
    3062:	26ff      	movs	r6, #255	; 0xff
    3064:	469a      	mov	sl, r3
    3066:	e797      	b.n	2f98 <__aeabi_fmul+0x30>
    3068:	0028      	movs	r0, r5
    306a:	f001 f965 	bl	4338 <__clzsi2>
    306e:	1f43      	subs	r3, r0, #5
    3070:	409d      	lsls	r5, r3
    3072:	2376      	movs	r3, #118	; 0x76
    3074:	425b      	negs	r3, r3
    3076:	1a18      	subs	r0, r3, r0
    3078:	2200      	movs	r2, #0
    307a:	e79d      	b.n	2fb8 <__aeabi_fmul+0x50>
    307c:	2080      	movs	r0, #128	; 0x80
    307e:	2400      	movs	r4, #0
    3080:	03c0      	lsls	r0, r0, #15
    3082:	22ff      	movs	r2, #255	; 0xff
    3084:	e7ba      	b.n	2ffc <__aeabi_fmul+0x94>
    3086:	003d      	movs	r5, r7
    3088:	4652      	mov	r2, sl
    308a:	e7ab      	b.n	2fe4 <__aeabi_fmul+0x7c>
    308c:	003d      	movs	r5, r7
    308e:	0021      	movs	r1, r4
    3090:	4652      	mov	r2, sl
    3092:	e7a7      	b.n	2fe4 <__aeabi_fmul+0x7c>
    3094:	0c3b      	lsrs	r3, r7, #16
    3096:	469c      	mov	ip, r3
    3098:	042a      	lsls	r2, r5, #16
    309a:	0c12      	lsrs	r2, r2, #16
    309c:	0c2b      	lsrs	r3, r5, #16
    309e:	0014      	movs	r4, r2
    30a0:	4660      	mov	r0, ip
    30a2:	4665      	mov	r5, ip
    30a4:	043f      	lsls	r7, r7, #16
    30a6:	0c3f      	lsrs	r7, r7, #16
    30a8:	437c      	muls	r4, r7
    30aa:	4342      	muls	r2, r0
    30ac:	435d      	muls	r5, r3
    30ae:	437b      	muls	r3, r7
    30b0:	0c27      	lsrs	r7, r4, #16
    30b2:	189b      	adds	r3, r3, r2
    30b4:	18ff      	adds	r7, r7, r3
    30b6:	42ba      	cmp	r2, r7
    30b8:	d903      	bls.n	30c2 <__aeabi_fmul+0x15a>
    30ba:	2380      	movs	r3, #128	; 0x80
    30bc:	025b      	lsls	r3, r3, #9
    30be:	469c      	mov	ip, r3
    30c0:	4465      	add	r5, ip
    30c2:	0424      	lsls	r4, r4, #16
    30c4:	043a      	lsls	r2, r7, #16
    30c6:	0c24      	lsrs	r4, r4, #16
    30c8:	1912      	adds	r2, r2, r4
    30ca:	0193      	lsls	r3, r2, #6
    30cc:	1e5c      	subs	r4, r3, #1
    30ce:	41a3      	sbcs	r3, r4
    30d0:	0c3f      	lsrs	r7, r7, #16
    30d2:	0e92      	lsrs	r2, r2, #26
    30d4:	197d      	adds	r5, r7, r5
    30d6:	431a      	orrs	r2, r3
    30d8:	01ad      	lsls	r5, r5, #6
    30da:	4315      	orrs	r5, r2
    30dc:	012b      	lsls	r3, r5, #4
    30de:	d504      	bpl.n	30ea <__aeabi_fmul+0x182>
    30e0:	2301      	movs	r3, #1
    30e2:	465e      	mov	r6, fp
    30e4:	086a      	lsrs	r2, r5, #1
    30e6:	401d      	ands	r5, r3
    30e8:	4315      	orrs	r5, r2
    30ea:	0032      	movs	r2, r6
    30ec:	327f      	adds	r2, #127	; 0x7f
    30ee:	2a00      	cmp	r2, #0
    30f0:	dd25      	ble.n	313e <__aeabi_fmul+0x1d6>
    30f2:	076b      	lsls	r3, r5, #29
    30f4:	d004      	beq.n	3100 <__aeabi_fmul+0x198>
    30f6:	230f      	movs	r3, #15
    30f8:	402b      	ands	r3, r5
    30fa:	2b04      	cmp	r3, #4
    30fc:	d000      	beq.n	3100 <__aeabi_fmul+0x198>
    30fe:	3504      	adds	r5, #4
    3100:	012b      	lsls	r3, r5, #4
    3102:	d503      	bpl.n	310c <__aeabi_fmul+0x1a4>
    3104:	0032      	movs	r2, r6
    3106:	4b27      	ldr	r3, [pc, #156]	; (31a4 <__aeabi_fmul+0x23c>)
    3108:	3280      	adds	r2, #128	; 0x80
    310a:	401d      	ands	r5, r3
    310c:	2afe      	cmp	r2, #254	; 0xfe
    310e:	dc94      	bgt.n	303a <__aeabi_fmul+0xd2>
    3110:	2401      	movs	r4, #1
    3112:	01a8      	lsls	r0, r5, #6
    3114:	0a40      	lsrs	r0, r0, #9
    3116:	b2d2      	uxtb	r2, r2
    3118:	400c      	ands	r4, r1
    311a:	e76f      	b.n	2ffc <__aeabi_fmul+0x94>
    311c:	2080      	movs	r0, #128	; 0x80
    311e:	03c0      	lsls	r0, r0, #15
    3120:	4207      	tst	r7, r0
    3122:	d007      	beq.n	3134 <__aeabi_fmul+0x1cc>
    3124:	4205      	tst	r5, r0
    3126:	d105      	bne.n	3134 <__aeabi_fmul+0x1cc>
    3128:	4328      	orrs	r0, r5
    312a:	0240      	lsls	r0, r0, #9
    312c:	0a40      	lsrs	r0, r0, #9
    312e:	4644      	mov	r4, r8
    3130:	22ff      	movs	r2, #255	; 0xff
    3132:	e763      	b.n	2ffc <__aeabi_fmul+0x94>
    3134:	4338      	orrs	r0, r7
    3136:	0240      	lsls	r0, r0, #9
    3138:	0a40      	lsrs	r0, r0, #9
    313a:	22ff      	movs	r2, #255	; 0xff
    313c:	e75e      	b.n	2ffc <__aeabi_fmul+0x94>
    313e:	2401      	movs	r4, #1
    3140:	1aa3      	subs	r3, r4, r2
    3142:	2b1b      	cmp	r3, #27
    3144:	dd05      	ble.n	3152 <__aeabi_fmul+0x1ea>
    3146:	400c      	ands	r4, r1
    3148:	2200      	movs	r2, #0
    314a:	2000      	movs	r0, #0
    314c:	e756      	b.n	2ffc <__aeabi_fmul+0x94>
    314e:	465e      	mov	r6, fp
    3150:	e7cb      	b.n	30ea <__aeabi_fmul+0x182>
    3152:	002a      	movs	r2, r5
    3154:	2020      	movs	r0, #32
    3156:	40da      	lsrs	r2, r3
    3158:	1ac3      	subs	r3, r0, r3
    315a:	409d      	lsls	r5, r3
    315c:	002b      	movs	r3, r5
    315e:	1e5d      	subs	r5, r3, #1
    3160:	41ab      	sbcs	r3, r5
    3162:	4313      	orrs	r3, r2
    3164:	075a      	lsls	r2, r3, #29
    3166:	d004      	beq.n	3172 <__aeabi_fmul+0x20a>
    3168:	220f      	movs	r2, #15
    316a:	401a      	ands	r2, r3
    316c:	2a04      	cmp	r2, #4
    316e:	d000      	beq.n	3172 <__aeabi_fmul+0x20a>
    3170:	3304      	adds	r3, #4
    3172:	015a      	lsls	r2, r3, #5
    3174:	d504      	bpl.n	3180 <__aeabi_fmul+0x218>
    3176:	2401      	movs	r4, #1
    3178:	2201      	movs	r2, #1
    317a:	400c      	ands	r4, r1
    317c:	2000      	movs	r0, #0
    317e:	e73d      	b.n	2ffc <__aeabi_fmul+0x94>
    3180:	2401      	movs	r4, #1
    3182:	019b      	lsls	r3, r3, #6
    3184:	0a58      	lsrs	r0, r3, #9
    3186:	400c      	ands	r4, r1
    3188:	2200      	movs	r2, #0
    318a:	e737      	b.n	2ffc <__aeabi_fmul+0x94>
    318c:	2080      	movs	r0, #128	; 0x80
    318e:	2401      	movs	r4, #1
    3190:	03c0      	lsls	r0, r0, #15
    3192:	4328      	orrs	r0, r5
    3194:	0240      	lsls	r0, r0, #9
    3196:	0a40      	lsrs	r0, r0, #9
    3198:	400c      	ands	r4, r1
    319a:	22ff      	movs	r2, #255	; 0xff
    319c:	e72e      	b.n	2ffc <__aeabi_fmul+0x94>
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	00004740 	.word	0x00004740
    31a4:	f7ffffff 	.word	0xf7ffffff

000031a8 <__aeabi_fsub>:
    31a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31aa:	464f      	mov	r7, r9
    31ac:	46d6      	mov	lr, sl
    31ae:	4646      	mov	r6, r8
    31b0:	0044      	lsls	r4, r0, #1
    31b2:	b5c0      	push	{r6, r7, lr}
    31b4:	0fc2      	lsrs	r2, r0, #31
    31b6:	0247      	lsls	r7, r0, #9
    31b8:	0248      	lsls	r0, r1, #9
    31ba:	0a40      	lsrs	r0, r0, #9
    31bc:	4684      	mov	ip, r0
    31be:	4666      	mov	r6, ip
    31c0:	0a7b      	lsrs	r3, r7, #9
    31c2:	0048      	lsls	r0, r1, #1
    31c4:	0fc9      	lsrs	r1, r1, #31
    31c6:	469a      	mov	sl, r3
    31c8:	0e24      	lsrs	r4, r4, #24
    31ca:	0015      	movs	r5, r2
    31cc:	00db      	lsls	r3, r3, #3
    31ce:	0e00      	lsrs	r0, r0, #24
    31d0:	4689      	mov	r9, r1
    31d2:	00f6      	lsls	r6, r6, #3
    31d4:	28ff      	cmp	r0, #255	; 0xff
    31d6:	d100      	bne.n	31da <__aeabi_fsub+0x32>
    31d8:	e08f      	b.n	32fa <__aeabi_fsub+0x152>
    31da:	2101      	movs	r1, #1
    31dc:	464f      	mov	r7, r9
    31de:	404f      	eors	r7, r1
    31e0:	0039      	movs	r1, r7
    31e2:	4291      	cmp	r1, r2
    31e4:	d066      	beq.n	32b4 <__aeabi_fsub+0x10c>
    31e6:	1a22      	subs	r2, r4, r0
    31e8:	2a00      	cmp	r2, #0
    31ea:	dc00      	bgt.n	31ee <__aeabi_fsub+0x46>
    31ec:	e09d      	b.n	332a <__aeabi_fsub+0x182>
    31ee:	2800      	cmp	r0, #0
    31f0:	d13d      	bne.n	326e <__aeabi_fsub+0xc6>
    31f2:	2e00      	cmp	r6, #0
    31f4:	d100      	bne.n	31f8 <__aeabi_fsub+0x50>
    31f6:	e08b      	b.n	3310 <__aeabi_fsub+0x168>
    31f8:	1e51      	subs	r1, r2, #1
    31fa:	2900      	cmp	r1, #0
    31fc:	d000      	beq.n	3200 <__aeabi_fsub+0x58>
    31fe:	e0b5      	b.n	336c <__aeabi_fsub+0x1c4>
    3200:	2401      	movs	r4, #1
    3202:	1b9b      	subs	r3, r3, r6
    3204:	015a      	lsls	r2, r3, #5
    3206:	d544      	bpl.n	3292 <__aeabi_fsub+0xea>
    3208:	019b      	lsls	r3, r3, #6
    320a:	099f      	lsrs	r7, r3, #6
    320c:	0038      	movs	r0, r7
    320e:	f001 f893 	bl	4338 <__clzsi2>
    3212:	3805      	subs	r0, #5
    3214:	4087      	lsls	r7, r0
    3216:	4284      	cmp	r4, r0
    3218:	dd00      	ble.n	321c <__aeabi_fsub+0x74>
    321a:	e096      	b.n	334a <__aeabi_fsub+0x1a2>
    321c:	1b04      	subs	r4, r0, r4
    321e:	003a      	movs	r2, r7
    3220:	2020      	movs	r0, #32
    3222:	3401      	adds	r4, #1
    3224:	40e2      	lsrs	r2, r4
    3226:	1b04      	subs	r4, r0, r4
    3228:	40a7      	lsls	r7, r4
    322a:	003b      	movs	r3, r7
    322c:	1e5f      	subs	r7, r3, #1
    322e:	41bb      	sbcs	r3, r7
    3230:	2400      	movs	r4, #0
    3232:	4313      	orrs	r3, r2
    3234:	075a      	lsls	r2, r3, #29
    3236:	d004      	beq.n	3242 <__aeabi_fsub+0x9a>
    3238:	220f      	movs	r2, #15
    323a:	401a      	ands	r2, r3
    323c:	2a04      	cmp	r2, #4
    323e:	d000      	beq.n	3242 <__aeabi_fsub+0x9a>
    3240:	3304      	adds	r3, #4
    3242:	015a      	lsls	r2, r3, #5
    3244:	d527      	bpl.n	3296 <__aeabi_fsub+0xee>
    3246:	3401      	adds	r4, #1
    3248:	2cff      	cmp	r4, #255	; 0xff
    324a:	d100      	bne.n	324e <__aeabi_fsub+0xa6>
    324c:	e079      	b.n	3342 <__aeabi_fsub+0x19a>
    324e:	2201      	movs	r2, #1
    3250:	019b      	lsls	r3, r3, #6
    3252:	0a5b      	lsrs	r3, r3, #9
    3254:	b2e4      	uxtb	r4, r4
    3256:	402a      	ands	r2, r5
    3258:	025b      	lsls	r3, r3, #9
    325a:	05e4      	lsls	r4, r4, #23
    325c:	0a58      	lsrs	r0, r3, #9
    325e:	07d2      	lsls	r2, r2, #31
    3260:	4320      	orrs	r0, r4
    3262:	4310      	orrs	r0, r2
    3264:	bc1c      	pop	{r2, r3, r4}
    3266:	4690      	mov	r8, r2
    3268:	4699      	mov	r9, r3
    326a:	46a2      	mov	sl, r4
    326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    326e:	2cff      	cmp	r4, #255	; 0xff
    3270:	d0e0      	beq.n	3234 <__aeabi_fsub+0x8c>
    3272:	2180      	movs	r1, #128	; 0x80
    3274:	04c9      	lsls	r1, r1, #19
    3276:	430e      	orrs	r6, r1
    3278:	2a1b      	cmp	r2, #27
    327a:	dc7b      	bgt.n	3374 <__aeabi_fsub+0x1cc>
    327c:	0031      	movs	r1, r6
    327e:	2020      	movs	r0, #32
    3280:	40d1      	lsrs	r1, r2
    3282:	1a82      	subs	r2, r0, r2
    3284:	4096      	lsls	r6, r2
    3286:	1e72      	subs	r2, r6, #1
    3288:	4196      	sbcs	r6, r2
    328a:	430e      	orrs	r6, r1
    328c:	1b9b      	subs	r3, r3, r6
    328e:	015a      	lsls	r2, r3, #5
    3290:	d4ba      	bmi.n	3208 <__aeabi_fsub+0x60>
    3292:	075a      	lsls	r2, r3, #29
    3294:	d1d0      	bne.n	3238 <__aeabi_fsub+0x90>
    3296:	2201      	movs	r2, #1
    3298:	08df      	lsrs	r7, r3, #3
    329a:	402a      	ands	r2, r5
    329c:	2cff      	cmp	r4, #255	; 0xff
    329e:	d133      	bne.n	3308 <__aeabi_fsub+0x160>
    32a0:	2f00      	cmp	r7, #0
    32a2:	d100      	bne.n	32a6 <__aeabi_fsub+0xfe>
    32a4:	e0a8      	b.n	33f8 <__aeabi_fsub+0x250>
    32a6:	2380      	movs	r3, #128	; 0x80
    32a8:	03db      	lsls	r3, r3, #15
    32aa:	433b      	orrs	r3, r7
    32ac:	025b      	lsls	r3, r3, #9
    32ae:	0a5b      	lsrs	r3, r3, #9
    32b0:	24ff      	movs	r4, #255	; 0xff
    32b2:	e7d1      	b.n	3258 <__aeabi_fsub+0xb0>
    32b4:	1a21      	subs	r1, r4, r0
    32b6:	2900      	cmp	r1, #0
    32b8:	dd4c      	ble.n	3354 <__aeabi_fsub+0x1ac>
    32ba:	2800      	cmp	r0, #0
    32bc:	d02a      	beq.n	3314 <__aeabi_fsub+0x16c>
    32be:	2cff      	cmp	r4, #255	; 0xff
    32c0:	d0b8      	beq.n	3234 <__aeabi_fsub+0x8c>
    32c2:	2080      	movs	r0, #128	; 0x80
    32c4:	04c0      	lsls	r0, r0, #19
    32c6:	4306      	orrs	r6, r0
    32c8:	291b      	cmp	r1, #27
    32ca:	dd00      	ble.n	32ce <__aeabi_fsub+0x126>
    32cc:	e0af      	b.n	342e <__aeabi_fsub+0x286>
    32ce:	0030      	movs	r0, r6
    32d0:	2720      	movs	r7, #32
    32d2:	40c8      	lsrs	r0, r1
    32d4:	1a79      	subs	r1, r7, r1
    32d6:	408e      	lsls	r6, r1
    32d8:	1e71      	subs	r1, r6, #1
    32da:	418e      	sbcs	r6, r1
    32dc:	4306      	orrs	r6, r0
    32de:	199b      	adds	r3, r3, r6
    32e0:	0159      	lsls	r1, r3, #5
    32e2:	d5d6      	bpl.n	3292 <__aeabi_fsub+0xea>
    32e4:	3401      	adds	r4, #1
    32e6:	2cff      	cmp	r4, #255	; 0xff
    32e8:	d100      	bne.n	32ec <__aeabi_fsub+0x144>
    32ea:	e085      	b.n	33f8 <__aeabi_fsub+0x250>
    32ec:	2201      	movs	r2, #1
    32ee:	497a      	ldr	r1, [pc, #488]	; (34d8 <__aeabi_fsub+0x330>)
    32f0:	401a      	ands	r2, r3
    32f2:	085b      	lsrs	r3, r3, #1
    32f4:	400b      	ands	r3, r1
    32f6:	4313      	orrs	r3, r2
    32f8:	e79c      	b.n	3234 <__aeabi_fsub+0x8c>
    32fa:	2e00      	cmp	r6, #0
    32fc:	d000      	beq.n	3300 <__aeabi_fsub+0x158>
    32fe:	e770      	b.n	31e2 <__aeabi_fsub+0x3a>
    3300:	e76b      	b.n	31da <__aeabi_fsub+0x32>
    3302:	1e3b      	subs	r3, r7, #0
    3304:	d1c5      	bne.n	3292 <__aeabi_fsub+0xea>
    3306:	2200      	movs	r2, #0
    3308:	027b      	lsls	r3, r7, #9
    330a:	0a5b      	lsrs	r3, r3, #9
    330c:	b2e4      	uxtb	r4, r4
    330e:	e7a3      	b.n	3258 <__aeabi_fsub+0xb0>
    3310:	0014      	movs	r4, r2
    3312:	e78f      	b.n	3234 <__aeabi_fsub+0x8c>
    3314:	2e00      	cmp	r6, #0
    3316:	d04d      	beq.n	33b4 <__aeabi_fsub+0x20c>
    3318:	1e48      	subs	r0, r1, #1
    331a:	2800      	cmp	r0, #0
    331c:	d157      	bne.n	33ce <__aeabi_fsub+0x226>
    331e:	199b      	adds	r3, r3, r6
    3320:	2401      	movs	r4, #1
    3322:	015a      	lsls	r2, r3, #5
    3324:	d5b5      	bpl.n	3292 <__aeabi_fsub+0xea>
    3326:	2402      	movs	r4, #2
    3328:	e7e0      	b.n	32ec <__aeabi_fsub+0x144>
    332a:	2a00      	cmp	r2, #0
    332c:	d125      	bne.n	337a <__aeabi_fsub+0x1d2>
    332e:	1c62      	adds	r2, r4, #1
    3330:	b2d2      	uxtb	r2, r2
    3332:	2a01      	cmp	r2, #1
    3334:	dd72      	ble.n	341c <__aeabi_fsub+0x274>
    3336:	1b9f      	subs	r7, r3, r6
    3338:	017a      	lsls	r2, r7, #5
    333a:	d535      	bpl.n	33a8 <__aeabi_fsub+0x200>
    333c:	1af7      	subs	r7, r6, r3
    333e:	000d      	movs	r5, r1
    3340:	e764      	b.n	320c <__aeabi_fsub+0x64>
    3342:	2201      	movs	r2, #1
    3344:	2300      	movs	r3, #0
    3346:	402a      	ands	r2, r5
    3348:	e786      	b.n	3258 <__aeabi_fsub+0xb0>
    334a:	003b      	movs	r3, r7
    334c:	4a63      	ldr	r2, [pc, #396]	; (34dc <__aeabi_fsub+0x334>)
    334e:	1a24      	subs	r4, r4, r0
    3350:	4013      	ands	r3, r2
    3352:	e76f      	b.n	3234 <__aeabi_fsub+0x8c>
    3354:	2900      	cmp	r1, #0
    3356:	d16c      	bne.n	3432 <__aeabi_fsub+0x28a>
    3358:	1c61      	adds	r1, r4, #1
    335a:	b2c8      	uxtb	r0, r1
    335c:	2801      	cmp	r0, #1
    335e:	dd4e      	ble.n	33fe <__aeabi_fsub+0x256>
    3360:	29ff      	cmp	r1, #255	; 0xff
    3362:	d049      	beq.n	33f8 <__aeabi_fsub+0x250>
    3364:	199b      	adds	r3, r3, r6
    3366:	085b      	lsrs	r3, r3, #1
    3368:	000c      	movs	r4, r1
    336a:	e763      	b.n	3234 <__aeabi_fsub+0x8c>
    336c:	2aff      	cmp	r2, #255	; 0xff
    336e:	d041      	beq.n	33f4 <__aeabi_fsub+0x24c>
    3370:	000a      	movs	r2, r1
    3372:	e781      	b.n	3278 <__aeabi_fsub+0xd0>
    3374:	2601      	movs	r6, #1
    3376:	1b9b      	subs	r3, r3, r6
    3378:	e789      	b.n	328e <__aeabi_fsub+0xe6>
    337a:	2c00      	cmp	r4, #0
    337c:	d01c      	beq.n	33b8 <__aeabi_fsub+0x210>
    337e:	28ff      	cmp	r0, #255	; 0xff
    3380:	d021      	beq.n	33c6 <__aeabi_fsub+0x21e>
    3382:	2480      	movs	r4, #128	; 0x80
    3384:	04e4      	lsls	r4, r4, #19
    3386:	4252      	negs	r2, r2
    3388:	4323      	orrs	r3, r4
    338a:	2a1b      	cmp	r2, #27
    338c:	dd00      	ble.n	3390 <__aeabi_fsub+0x1e8>
    338e:	e096      	b.n	34be <__aeabi_fsub+0x316>
    3390:	001c      	movs	r4, r3
    3392:	2520      	movs	r5, #32
    3394:	40d4      	lsrs	r4, r2
    3396:	1aaa      	subs	r2, r5, r2
    3398:	4093      	lsls	r3, r2
    339a:	1e5a      	subs	r2, r3, #1
    339c:	4193      	sbcs	r3, r2
    339e:	4323      	orrs	r3, r4
    33a0:	1af3      	subs	r3, r6, r3
    33a2:	0004      	movs	r4, r0
    33a4:	000d      	movs	r5, r1
    33a6:	e72d      	b.n	3204 <__aeabi_fsub+0x5c>
    33a8:	2f00      	cmp	r7, #0
    33aa:	d000      	beq.n	33ae <__aeabi_fsub+0x206>
    33ac:	e72e      	b.n	320c <__aeabi_fsub+0x64>
    33ae:	2200      	movs	r2, #0
    33b0:	2400      	movs	r4, #0
    33b2:	e7a9      	b.n	3308 <__aeabi_fsub+0x160>
    33b4:	000c      	movs	r4, r1
    33b6:	e73d      	b.n	3234 <__aeabi_fsub+0x8c>
    33b8:	2b00      	cmp	r3, #0
    33ba:	d058      	beq.n	346e <__aeabi_fsub+0x2c6>
    33bc:	43d2      	mvns	r2, r2
    33be:	2a00      	cmp	r2, #0
    33c0:	d0ee      	beq.n	33a0 <__aeabi_fsub+0x1f8>
    33c2:	28ff      	cmp	r0, #255	; 0xff
    33c4:	d1e1      	bne.n	338a <__aeabi_fsub+0x1e2>
    33c6:	0033      	movs	r3, r6
    33c8:	24ff      	movs	r4, #255	; 0xff
    33ca:	000d      	movs	r5, r1
    33cc:	e732      	b.n	3234 <__aeabi_fsub+0x8c>
    33ce:	29ff      	cmp	r1, #255	; 0xff
    33d0:	d010      	beq.n	33f4 <__aeabi_fsub+0x24c>
    33d2:	0001      	movs	r1, r0
    33d4:	e778      	b.n	32c8 <__aeabi_fsub+0x120>
    33d6:	2b00      	cmp	r3, #0
    33d8:	d06e      	beq.n	34b8 <__aeabi_fsub+0x310>
    33da:	24ff      	movs	r4, #255	; 0xff
    33dc:	2e00      	cmp	r6, #0
    33de:	d100      	bne.n	33e2 <__aeabi_fsub+0x23a>
    33e0:	e728      	b.n	3234 <__aeabi_fsub+0x8c>
    33e2:	2280      	movs	r2, #128	; 0x80
    33e4:	4651      	mov	r1, sl
    33e6:	03d2      	lsls	r2, r2, #15
    33e8:	4211      	tst	r1, r2
    33ea:	d003      	beq.n	33f4 <__aeabi_fsub+0x24c>
    33ec:	4661      	mov	r1, ip
    33ee:	4211      	tst	r1, r2
    33f0:	d100      	bne.n	33f4 <__aeabi_fsub+0x24c>
    33f2:	0033      	movs	r3, r6
    33f4:	24ff      	movs	r4, #255	; 0xff
    33f6:	e71d      	b.n	3234 <__aeabi_fsub+0x8c>
    33f8:	24ff      	movs	r4, #255	; 0xff
    33fa:	2300      	movs	r3, #0
    33fc:	e72c      	b.n	3258 <__aeabi_fsub+0xb0>
    33fe:	2c00      	cmp	r4, #0
    3400:	d1e9      	bne.n	33d6 <__aeabi_fsub+0x22e>
    3402:	2b00      	cmp	r3, #0
    3404:	d063      	beq.n	34ce <__aeabi_fsub+0x326>
    3406:	2e00      	cmp	r6, #0
    3408:	d100      	bne.n	340c <__aeabi_fsub+0x264>
    340a:	e713      	b.n	3234 <__aeabi_fsub+0x8c>
    340c:	199b      	adds	r3, r3, r6
    340e:	015a      	lsls	r2, r3, #5
    3410:	d400      	bmi.n	3414 <__aeabi_fsub+0x26c>
    3412:	e73e      	b.n	3292 <__aeabi_fsub+0xea>
    3414:	4a31      	ldr	r2, [pc, #196]	; (34dc <__aeabi_fsub+0x334>)
    3416:	000c      	movs	r4, r1
    3418:	4013      	ands	r3, r2
    341a:	e70b      	b.n	3234 <__aeabi_fsub+0x8c>
    341c:	2c00      	cmp	r4, #0
    341e:	d11e      	bne.n	345e <__aeabi_fsub+0x2b6>
    3420:	2b00      	cmp	r3, #0
    3422:	d12f      	bne.n	3484 <__aeabi_fsub+0x2dc>
    3424:	2e00      	cmp	r6, #0
    3426:	d04f      	beq.n	34c8 <__aeabi_fsub+0x320>
    3428:	0033      	movs	r3, r6
    342a:	000d      	movs	r5, r1
    342c:	e702      	b.n	3234 <__aeabi_fsub+0x8c>
    342e:	2601      	movs	r6, #1
    3430:	e755      	b.n	32de <__aeabi_fsub+0x136>
    3432:	2c00      	cmp	r4, #0
    3434:	d11f      	bne.n	3476 <__aeabi_fsub+0x2ce>
    3436:	2b00      	cmp	r3, #0
    3438:	d043      	beq.n	34c2 <__aeabi_fsub+0x31a>
    343a:	43c9      	mvns	r1, r1
    343c:	2900      	cmp	r1, #0
    343e:	d00b      	beq.n	3458 <__aeabi_fsub+0x2b0>
    3440:	28ff      	cmp	r0, #255	; 0xff
    3442:	d039      	beq.n	34b8 <__aeabi_fsub+0x310>
    3444:	291b      	cmp	r1, #27
    3446:	dc44      	bgt.n	34d2 <__aeabi_fsub+0x32a>
    3448:	001c      	movs	r4, r3
    344a:	2720      	movs	r7, #32
    344c:	40cc      	lsrs	r4, r1
    344e:	1a79      	subs	r1, r7, r1
    3450:	408b      	lsls	r3, r1
    3452:	1e59      	subs	r1, r3, #1
    3454:	418b      	sbcs	r3, r1
    3456:	4323      	orrs	r3, r4
    3458:	199b      	adds	r3, r3, r6
    345a:	0004      	movs	r4, r0
    345c:	e740      	b.n	32e0 <__aeabi_fsub+0x138>
    345e:	2b00      	cmp	r3, #0
    3460:	d11a      	bne.n	3498 <__aeabi_fsub+0x2f0>
    3462:	2e00      	cmp	r6, #0
    3464:	d124      	bne.n	34b0 <__aeabi_fsub+0x308>
    3466:	2780      	movs	r7, #128	; 0x80
    3468:	2200      	movs	r2, #0
    346a:	03ff      	lsls	r7, r7, #15
    346c:	e71b      	b.n	32a6 <__aeabi_fsub+0xfe>
    346e:	0033      	movs	r3, r6
    3470:	0004      	movs	r4, r0
    3472:	000d      	movs	r5, r1
    3474:	e6de      	b.n	3234 <__aeabi_fsub+0x8c>
    3476:	28ff      	cmp	r0, #255	; 0xff
    3478:	d01e      	beq.n	34b8 <__aeabi_fsub+0x310>
    347a:	2480      	movs	r4, #128	; 0x80
    347c:	04e4      	lsls	r4, r4, #19
    347e:	4249      	negs	r1, r1
    3480:	4323      	orrs	r3, r4
    3482:	e7df      	b.n	3444 <__aeabi_fsub+0x29c>
    3484:	2e00      	cmp	r6, #0
    3486:	d100      	bne.n	348a <__aeabi_fsub+0x2e2>
    3488:	e6d4      	b.n	3234 <__aeabi_fsub+0x8c>
    348a:	1b9f      	subs	r7, r3, r6
    348c:	017a      	lsls	r2, r7, #5
    348e:	d400      	bmi.n	3492 <__aeabi_fsub+0x2ea>
    3490:	e737      	b.n	3302 <__aeabi_fsub+0x15a>
    3492:	1af3      	subs	r3, r6, r3
    3494:	000d      	movs	r5, r1
    3496:	e6cd      	b.n	3234 <__aeabi_fsub+0x8c>
    3498:	24ff      	movs	r4, #255	; 0xff
    349a:	2e00      	cmp	r6, #0
    349c:	d100      	bne.n	34a0 <__aeabi_fsub+0x2f8>
    349e:	e6c9      	b.n	3234 <__aeabi_fsub+0x8c>
    34a0:	2280      	movs	r2, #128	; 0x80
    34a2:	4650      	mov	r0, sl
    34a4:	03d2      	lsls	r2, r2, #15
    34a6:	4210      	tst	r0, r2
    34a8:	d0a4      	beq.n	33f4 <__aeabi_fsub+0x24c>
    34aa:	4660      	mov	r0, ip
    34ac:	4210      	tst	r0, r2
    34ae:	d1a1      	bne.n	33f4 <__aeabi_fsub+0x24c>
    34b0:	0033      	movs	r3, r6
    34b2:	000d      	movs	r5, r1
    34b4:	24ff      	movs	r4, #255	; 0xff
    34b6:	e6bd      	b.n	3234 <__aeabi_fsub+0x8c>
    34b8:	0033      	movs	r3, r6
    34ba:	24ff      	movs	r4, #255	; 0xff
    34bc:	e6ba      	b.n	3234 <__aeabi_fsub+0x8c>
    34be:	2301      	movs	r3, #1
    34c0:	e76e      	b.n	33a0 <__aeabi_fsub+0x1f8>
    34c2:	0033      	movs	r3, r6
    34c4:	0004      	movs	r4, r0
    34c6:	e6b5      	b.n	3234 <__aeabi_fsub+0x8c>
    34c8:	2700      	movs	r7, #0
    34ca:	2200      	movs	r2, #0
    34cc:	e71c      	b.n	3308 <__aeabi_fsub+0x160>
    34ce:	0033      	movs	r3, r6
    34d0:	e6b0      	b.n	3234 <__aeabi_fsub+0x8c>
    34d2:	2301      	movs	r3, #1
    34d4:	e7c0      	b.n	3458 <__aeabi_fsub+0x2b0>
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	7dffffff 	.word	0x7dffffff
    34dc:	fbffffff 	.word	0xfbffffff

000034e0 <__aeabi_f2iz>:
    34e0:	0241      	lsls	r1, r0, #9
    34e2:	0043      	lsls	r3, r0, #1
    34e4:	0fc2      	lsrs	r2, r0, #31
    34e6:	0a49      	lsrs	r1, r1, #9
    34e8:	0e1b      	lsrs	r3, r3, #24
    34ea:	2000      	movs	r0, #0
    34ec:	2b7e      	cmp	r3, #126	; 0x7e
    34ee:	dd0d      	ble.n	350c <__aeabi_f2iz+0x2c>
    34f0:	2b9d      	cmp	r3, #157	; 0x9d
    34f2:	dc0c      	bgt.n	350e <__aeabi_f2iz+0x2e>
    34f4:	2080      	movs	r0, #128	; 0x80
    34f6:	0400      	lsls	r0, r0, #16
    34f8:	4301      	orrs	r1, r0
    34fa:	2b95      	cmp	r3, #149	; 0x95
    34fc:	dc0a      	bgt.n	3514 <__aeabi_f2iz+0x34>
    34fe:	2096      	movs	r0, #150	; 0x96
    3500:	1ac3      	subs	r3, r0, r3
    3502:	40d9      	lsrs	r1, r3
    3504:	4248      	negs	r0, r1
    3506:	2a00      	cmp	r2, #0
    3508:	d100      	bne.n	350c <__aeabi_f2iz+0x2c>
    350a:	0008      	movs	r0, r1
    350c:	4770      	bx	lr
    350e:	4b03      	ldr	r3, [pc, #12]	; (351c <__aeabi_f2iz+0x3c>)
    3510:	18d0      	adds	r0, r2, r3
    3512:	e7fb      	b.n	350c <__aeabi_f2iz+0x2c>
    3514:	3b96      	subs	r3, #150	; 0x96
    3516:	4099      	lsls	r1, r3
    3518:	e7f4      	b.n	3504 <__aeabi_f2iz+0x24>
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	7fffffff 	.word	0x7fffffff

00003520 <__aeabi_ddiv>:
    3520:	b5f0      	push	{r4, r5, r6, r7, lr}
    3522:	4657      	mov	r7, sl
    3524:	4645      	mov	r5, r8
    3526:	46de      	mov	lr, fp
    3528:	464e      	mov	r6, r9
    352a:	b5e0      	push	{r5, r6, r7, lr}
    352c:	004c      	lsls	r4, r1, #1
    352e:	030e      	lsls	r6, r1, #12
    3530:	b087      	sub	sp, #28
    3532:	4683      	mov	fp, r0
    3534:	4692      	mov	sl, r2
    3536:	001d      	movs	r5, r3
    3538:	4680      	mov	r8, r0
    353a:	0b36      	lsrs	r6, r6, #12
    353c:	0d64      	lsrs	r4, r4, #21
    353e:	0fcf      	lsrs	r7, r1, #31
    3540:	2c00      	cmp	r4, #0
    3542:	d04f      	beq.n	35e4 <__aeabi_ddiv+0xc4>
    3544:	4b6f      	ldr	r3, [pc, #444]	; (3704 <__aeabi_ddiv+0x1e4>)
    3546:	429c      	cmp	r4, r3
    3548:	d035      	beq.n	35b6 <__aeabi_ddiv+0x96>
    354a:	2380      	movs	r3, #128	; 0x80
    354c:	0f42      	lsrs	r2, r0, #29
    354e:	041b      	lsls	r3, r3, #16
    3550:	00f6      	lsls	r6, r6, #3
    3552:	4313      	orrs	r3, r2
    3554:	4333      	orrs	r3, r6
    3556:	4699      	mov	r9, r3
    3558:	00c3      	lsls	r3, r0, #3
    355a:	4698      	mov	r8, r3
    355c:	4b6a      	ldr	r3, [pc, #424]	; (3708 <__aeabi_ddiv+0x1e8>)
    355e:	2600      	movs	r6, #0
    3560:	469c      	mov	ip, r3
    3562:	2300      	movs	r3, #0
    3564:	4464      	add	r4, ip
    3566:	9303      	str	r3, [sp, #12]
    3568:	032b      	lsls	r3, r5, #12
    356a:	0b1b      	lsrs	r3, r3, #12
    356c:	469b      	mov	fp, r3
    356e:	006b      	lsls	r3, r5, #1
    3570:	0fed      	lsrs	r5, r5, #31
    3572:	4650      	mov	r0, sl
    3574:	0d5b      	lsrs	r3, r3, #21
    3576:	9501      	str	r5, [sp, #4]
    3578:	d05e      	beq.n	3638 <__aeabi_ddiv+0x118>
    357a:	4a62      	ldr	r2, [pc, #392]	; (3704 <__aeabi_ddiv+0x1e4>)
    357c:	4293      	cmp	r3, r2
    357e:	d053      	beq.n	3628 <__aeabi_ddiv+0x108>
    3580:	465a      	mov	r2, fp
    3582:	00d1      	lsls	r1, r2, #3
    3584:	2280      	movs	r2, #128	; 0x80
    3586:	0f40      	lsrs	r0, r0, #29
    3588:	0412      	lsls	r2, r2, #16
    358a:	4302      	orrs	r2, r0
    358c:	430a      	orrs	r2, r1
    358e:	4693      	mov	fp, r2
    3590:	4652      	mov	r2, sl
    3592:	00d1      	lsls	r1, r2, #3
    3594:	4a5c      	ldr	r2, [pc, #368]	; (3708 <__aeabi_ddiv+0x1e8>)
    3596:	4694      	mov	ip, r2
    3598:	2200      	movs	r2, #0
    359a:	4463      	add	r3, ip
    359c:	0038      	movs	r0, r7
    359e:	4068      	eors	r0, r5
    35a0:	4684      	mov	ip, r0
    35a2:	9002      	str	r0, [sp, #8]
    35a4:	1ae4      	subs	r4, r4, r3
    35a6:	4316      	orrs	r6, r2
    35a8:	2e0f      	cmp	r6, #15
    35aa:	d900      	bls.n	35ae <__aeabi_ddiv+0x8e>
    35ac:	e0b4      	b.n	3718 <__aeabi_ddiv+0x1f8>
    35ae:	4b57      	ldr	r3, [pc, #348]	; (370c <__aeabi_ddiv+0x1ec>)
    35b0:	00b6      	lsls	r6, r6, #2
    35b2:	599b      	ldr	r3, [r3, r6]
    35b4:	469f      	mov	pc, r3
    35b6:	0003      	movs	r3, r0
    35b8:	4333      	orrs	r3, r6
    35ba:	4699      	mov	r9, r3
    35bc:	d16c      	bne.n	3698 <__aeabi_ddiv+0x178>
    35be:	2300      	movs	r3, #0
    35c0:	4698      	mov	r8, r3
    35c2:	3302      	adds	r3, #2
    35c4:	2608      	movs	r6, #8
    35c6:	9303      	str	r3, [sp, #12]
    35c8:	e7ce      	b.n	3568 <__aeabi_ddiv+0x48>
    35ca:	46cb      	mov	fp, r9
    35cc:	4641      	mov	r1, r8
    35ce:	9a03      	ldr	r2, [sp, #12]
    35d0:	9701      	str	r7, [sp, #4]
    35d2:	2a02      	cmp	r2, #2
    35d4:	d165      	bne.n	36a2 <__aeabi_ddiv+0x182>
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	4c4a      	ldr	r4, [pc, #296]	; (3704 <__aeabi_ddiv+0x1e4>)
    35da:	469c      	mov	ip, r3
    35dc:	2300      	movs	r3, #0
    35de:	2200      	movs	r2, #0
    35e0:	4698      	mov	r8, r3
    35e2:	e06b      	b.n	36bc <__aeabi_ddiv+0x19c>
    35e4:	0003      	movs	r3, r0
    35e6:	4333      	orrs	r3, r6
    35e8:	4699      	mov	r9, r3
    35ea:	d04e      	beq.n	368a <__aeabi_ddiv+0x16a>
    35ec:	2e00      	cmp	r6, #0
    35ee:	d100      	bne.n	35f2 <__aeabi_ddiv+0xd2>
    35f0:	e1bc      	b.n	396c <__aeabi_ddiv+0x44c>
    35f2:	0030      	movs	r0, r6
    35f4:	f000 fea0 	bl	4338 <__clzsi2>
    35f8:	0003      	movs	r3, r0
    35fa:	3b0b      	subs	r3, #11
    35fc:	2b1c      	cmp	r3, #28
    35fe:	dd00      	ble.n	3602 <__aeabi_ddiv+0xe2>
    3600:	e1ac      	b.n	395c <__aeabi_ddiv+0x43c>
    3602:	221d      	movs	r2, #29
    3604:	1ad3      	subs	r3, r2, r3
    3606:	465a      	mov	r2, fp
    3608:	0001      	movs	r1, r0
    360a:	40da      	lsrs	r2, r3
    360c:	3908      	subs	r1, #8
    360e:	408e      	lsls	r6, r1
    3610:	0013      	movs	r3, r2
    3612:	4333      	orrs	r3, r6
    3614:	4699      	mov	r9, r3
    3616:	465b      	mov	r3, fp
    3618:	408b      	lsls	r3, r1
    361a:	4698      	mov	r8, r3
    361c:	2300      	movs	r3, #0
    361e:	4c3c      	ldr	r4, [pc, #240]	; (3710 <__aeabi_ddiv+0x1f0>)
    3620:	2600      	movs	r6, #0
    3622:	1a24      	subs	r4, r4, r0
    3624:	9303      	str	r3, [sp, #12]
    3626:	e79f      	b.n	3568 <__aeabi_ddiv+0x48>
    3628:	4651      	mov	r1, sl
    362a:	465a      	mov	r2, fp
    362c:	4311      	orrs	r1, r2
    362e:	d129      	bne.n	3684 <__aeabi_ddiv+0x164>
    3630:	2200      	movs	r2, #0
    3632:	4693      	mov	fp, r2
    3634:	3202      	adds	r2, #2
    3636:	e7b1      	b.n	359c <__aeabi_ddiv+0x7c>
    3638:	4659      	mov	r1, fp
    363a:	4301      	orrs	r1, r0
    363c:	d01e      	beq.n	367c <__aeabi_ddiv+0x15c>
    363e:	465b      	mov	r3, fp
    3640:	2b00      	cmp	r3, #0
    3642:	d100      	bne.n	3646 <__aeabi_ddiv+0x126>
    3644:	e19e      	b.n	3984 <__aeabi_ddiv+0x464>
    3646:	4658      	mov	r0, fp
    3648:	f000 fe76 	bl	4338 <__clzsi2>
    364c:	0003      	movs	r3, r0
    364e:	3b0b      	subs	r3, #11
    3650:	2b1c      	cmp	r3, #28
    3652:	dd00      	ble.n	3656 <__aeabi_ddiv+0x136>
    3654:	e18f      	b.n	3976 <__aeabi_ddiv+0x456>
    3656:	0002      	movs	r2, r0
    3658:	4659      	mov	r1, fp
    365a:	3a08      	subs	r2, #8
    365c:	4091      	lsls	r1, r2
    365e:	468b      	mov	fp, r1
    3660:	211d      	movs	r1, #29
    3662:	1acb      	subs	r3, r1, r3
    3664:	4651      	mov	r1, sl
    3666:	40d9      	lsrs	r1, r3
    3668:	000b      	movs	r3, r1
    366a:	4659      	mov	r1, fp
    366c:	430b      	orrs	r3, r1
    366e:	4651      	mov	r1, sl
    3670:	469b      	mov	fp, r3
    3672:	4091      	lsls	r1, r2
    3674:	4b26      	ldr	r3, [pc, #152]	; (3710 <__aeabi_ddiv+0x1f0>)
    3676:	2200      	movs	r2, #0
    3678:	1a1b      	subs	r3, r3, r0
    367a:	e78f      	b.n	359c <__aeabi_ddiv+0x7c>
    367c:	2300      	movs	r3, #0
    367e:	2201      	movs	r2, #1
    3680:	469b      	mov	fp, r3
    3682:	e78b      	b.n	359c <__aeabi_ddiv+0x7c>
    3684:	4651      	mov	r1, sl
    3686:	2203      	movs	r2, #3
    3688:	e788      	b.n	359c <__aeabi_ddiv+0x7c>
    368a:	2300      	movs	r3, #0
    368c:	4698      	mov	r8, r3
    368e:	3301      	adds	r3, #1
    3690:	2604      	movs	r6, #4
    3692:	2400      	movs	r4, #0
    3694:	9303      	str	r3, [sp, #12]
    3696:	e767      	b.n	3568 <__aeabi_ddiv+0x48>
    3698:	2303      	movs	r3, #3
    369a:	46b1      	mov	r9, r6
    369c:	9303      	str	r3, [sp, #12]
    369e:	260c      	movs	r6, #12
    36a0:	e762      	b.n	3568 <__aeabi_ddiv+0x48>
    36a2:	2a03      	cmp	r2, #3
    36a4:	d100      	bne.n	36a8 <__aeabi_ddiv+0x188>
    36a6:	e25c      	b.n	3b62 <__aeabi_ddiv+0x642>
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	2a01      	cmp	r2, #1
    36ac:	d000      	beq.n	36b0 <__aeabi_ddiv+0x190>
    36ae:	e1e4      	b.n	3a7a <__aeabi_ddiv+0x55a>
    36b0:	4013      	ands	r3, r2
    36b2:	469c      	mov	ip, r3
    36b4:	2300      	movs	r3, #0
    36b6:	2400      	movs	r4, #0
    36b8:	2200      	movs	r2, #0
    36ba:	4698      	mov	r8, r3
    36bc:	2100      	movs	r1, #0
    36be:	0312      	lsls	r2, r2, #12
    36c0:	0b13      	lsrs	r3, r2, #12
    36c2:	0d0a      	lsrs	r2, r1, #20
    36c4:	0512      	lsls	r2, r2, #20
    36c6:	431a      	orrs	r2, r3
    36c8:	0523      	lsls	r3, r4, #20
    36ca:	4c12      	ldr	r4, [pc, #72]	; (3714 <__aeabi_ddiv+0x1f4>)
    36cc:	4640      	mov	r0, r8
    36ce:	4022      	ands	r2, r4
    36d0:	4313      	orrs	r3, r2
    36d2:	4662      	mov	r2, ip
    36d4:	005b      	lsls	r3, r3, #1
    36d6:	07d2      	lsls	r2, r2, #31
    36d8:	085b      	lsrs	r3, r3, #1
    36da:	4313      	orrs	r3, r2
    36dc:	0019      	movs	r1, r3
    36de:	b007      	add	sp, #28
    36e0:	bc3c      	pop	{r2, r3, r4, r5}
    36e2:	4690      	mov	r8, r2
    36e4:	4699      	mov	r9, r3
    36e6:	46a2      	mov	sl, r4
    36e8:	46ab      	mov	fp, r5
    36ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ec:	2300      	movs	r3, #0
    36ee:	2280      	movs	r2, #128	; 0x80
    36f0:	469c      	mov	ip, r3
    36f2:	0312      	lsls	r2, r2, #12
    36f4:	4698      	mov	r8, r3
    36f6:	4c03      	ldr	r4, [pc, #12]	; (3704 <__aeabi_ddiv+0x1e4>)
    36f8:	e7e0      	b.n	36bc <__aeabi_ddiv+0x19c>
    36fa:	2300      	movs	r3, #0
    36fc:	4c01      	ldr	r4, [pc, #4]	; (3704 <__aeabi_ddiv+0x1e4>)
    36fe:	2200      	movs	r2, #0
    3700:	4698      	mov	r8, r3
    3702:	e7db      	b.n	36bc <__aeabi_ddiv+0x19c>
    3704:	000007ff 	.word	0x000007ff
    3708:	fffffc01 	.word	0xfffffc01
    370c:	00004780 	.word	0x00004780
    3710:	fffffc0d 	.word	0xfffffc0d
    3714:	800fffff 	.word	0x800fffff
    3718:	45d9      	cmp	r9, fp
    371a:	d900      	bls.n	371e <__aeabi_ddiv+0x1fe>
    371c:	e139      	b.n	3992 <__aeabi_ddiv+0x472>
    371e:	d100      	bne.n	3722 <__aeabi_ddiv+0x202>
    3720:	e134      	b.n	398c <__aeabi_ddiv+0x46c>
    3722:	2300      	movs	r3, #0
    3724:	4646      	mov	r6, r8
    3726:	464d      	mov	r5, r9
    3728:	469a      	mov	sl, r3
    372a:	3c01      	subs	r4, #1
    372c:	465b      	mov	r3, fp
    372e:	0e0a      	lsrs	r2, r1, #24
    3730:	021b      	lsls	r3, r3, #8
    3732:	431a      	orrs	r2, r3
    3734:	020b      	lsls	r3, r1, #8
    3736:	0c17      	lsrs	r7, r2, #16
    3738:	9303      	str	r3, [sp, #12]
    373a:	0413      	lsls	r3, r2, #16
    373c:	0c1b      	lsrs	r3, r3, #16
    373e:	0039      	movs	r1, r7
    3740:	0028      	movs	r0, r5
    3742:	4690      	mov	r8, r2
    3744:	9301      	str	r3, [sp, #4]
    3746:	f7ff f891 	bl	286c <__udivsi3>
    374a:	0002      	movs	r2, r0
    374c:	9b01      	ldr	r3, [sp, #4]
    374e:	4683      	mov	fp, r0
    3750:	435a      	muls	r2, r3
    3752:	0028      	movs	r0, r5
    3754:	0039      	movs	r1, r7
    3756:	4691      	mov	r9, r2
    3758:	f7ff f90e 	bl	2978 <__aeabi_uidivmod>
    375c:	0c35      	lsrs	r5, r6, #16
    375e:	0409      	lsls	r1, r1, #16
    3760:	430d      	orrs	r5, r1
    3762:	45a9      	cmp	r9, r5
    3764:	d90d      	bls.n	3782 <__aeabi_ddiv+0x262>
    3766:	465b      	mov	r3, fp
    3768:	4445      	add	r5, r8
    376a:	3b01      	subs	r3, #1
    376c:	45a8      	cmp	r8, r5
    376e:	d900      	bls.n	3772 <__aeabi_ddiv+0x252>
    3770:	e13a      	b.n	39e8 <__aeabi_ddiv+0x4c8>
    3772:	45a9      	cmp	r9, r5
    3774:	d800      	bhi.n	3778 <__aeabi_ddiv+0x258>
    3776:	e137      	b.n	39e8 <__aeabi_ddiv+0x4c8>
    3778:	2302      	movs	r3, #2
    377a:	425b      	negs	r3, r3
    377c:	469c      	mov	ip, r3
    377e:	4445      	add	r5, r8
    3780:	44e3      	add	fp, ip
    3782:	464b      	mov	r3, r9
    3784:	1aeb      	subs	r3, r5, r3
    3786:	0039      	movs	r1, r7
    3788:	0018      	movs	r0, r3
    378a:	9304      	str	r3, [sp, #16]
    378c:	f7ff f86e 	bl	286c <__udivsi3>
    3790:	9b01      	ldr	r3, [sp, #4]
    3792:	0005      	movs	r5, r0
    3794:	4343      	muls	r3, r0
    3796:	0039      	movs	r1, r7
    3798:	9804      	ldr	r0, [sp, #16]
    379a:	4699      	mov	r9, r3
    379c:	f7ff f8ec 	bl	2978 <__aeabi_uidivmod>
    37a0:	0433      	lsls	r3, r6, #16
    37a2:	0409      	lsls	r1, r1, #16
    37a4:	0c1b      	lsrs	r3, r3, #16
    37a6:	430b      	orrs	r3, r1
    37a8:	4599      	cmp	r9, r3
    37aa:	d909      	bls.n	37c0 <__aeabi_ddiv+0x2a0>
    37ac:	4443      	add	r3, r8
    37ae:	1e6a      	subs	r2, r5, #1
    37b0:	4598      	cmp	r8, r3
    37b2:	d900      	bls.n	37b6 <__aeabi_ddiv+0x296>
    37b4:	e11a      	b.n	39ec <__aeabi_ddiv+0x4cc>
    37b6:	4599      	cmp	r9, r3
    37b8:	d800      	bhi.n	37bc <__aeabi_ddiv+0x29c>
    37ba:	e117      	b.n	39ec <__aeabi_ddiv+0x4cc>
    37bc:	3d02      	subs	r5, #2
    37be:	4443      	add	r3, r8
    37c0:	464a      	mov	r2, r9
    37c2:	1a9b      	subs	r3, r3, r2
    37c4:	465a      	mov	r2, fp
    37c6:	0412      	lsls	r2, r2, #16
    37c8:	432a      	orrs	r2, r5
    37ca:	9903      	ldr	r1, [sp, #12]
    37cc:	4693      	mov	fp, r2
    37ce:	0c10      	lsrs	r0, r2, #16
    37d0:	0c0a      	lsrs	r2, r1, #16
    37d2:	4691      	mov	r9, r2
    37d4:	0409      	lsls	r1, r1, #16
    37d6:	465a      	mov	r2, fp
    37d8:	0c09      	lsrs	r1, r1, #16
    37da:	464e      	mov	r6, r9
    37dc:	000d      	movs	r5, r1
    37de:	0412      	lsls	r2, r2, #16
    37e0:	0c12      	lsrs	r2, r2, #16
    37e2:	4345      	muls	r5, r0
    37e4:	9105      	str	r1, [sp, #20]
    37e6:	4351      	muls	r1, r2
    37e8:	4372      	muls	r2, r6
    37ea:	4370      	muls	r0, r6
    37ec:	1952      	adds	r2, r2, r5
    37ee:	0c0e      	lsrs	r6, r1, #16
    37f0:	18b2      	adds	r2, r6, r2
    37f2:	4295      	cmp	r5, r2
    37f4:	d903      	bls.n	37fe <__aeabi_ddiv+0x2de>
    37f6:	2580      	movs	r5, #128	; 0x80
    37f8:	026d      	lsls	r5, r5, #9
    37fa:	46ac      	mov	ip, r5
    37fc:	4460      	add	r0, ip
    37fe:	0c15      	lsrs	r5, r2, #16
    3800:	0409      	lsls	r1, r1, #16
    3802:	0412      	lsls	r2, r2, #16
    3804:	0c09      	lsrs	r1, r1, #16
    3806:	1828      	adds	r0, r5, r0
    3808:	1852      	adds	r2, r2, r1
    380a:	4283      	cmp	r3, r0
    380c:	d200      	bcs.n	3810 <__aeabi_ddiv+0x2f0>
    380e:	e0ce      	b.n	39ae <__aeabi_ddiv+0x48e>
    3810:	d100      	bne.n	3814 <__aeabi_ddiv+0x2f4>
    3812:	e0c8      	b.n	39a6 <__aeabi_ddiv+0x486>
    3814:	1a1d      	subs	r5, r3, r0
    3816:	4653      	mov	r3, sl
    3818:	1a9e      	subs	r6, r3, r2
    381a:	45b2      	cmp	sl, r6
    381c:	4192      	sbcs	r2, r2
    381e:	4252      	negs	r2, r2
    3820:	1aab      	subs	r3, r5, r2
    3822:	469a      	mov	sl, r3
    3824:	4598      	cmp	r8, r3
    3826:	d100      	bne.n	382a <__aeabi_ddiv+0x30a>
    3828:	e117      	b.n	3a5a <__aeabi_ddiv+0x53a>
    382a:	0039      	movs	r1, r7
    382c:	0018      	movs	r0, r3
    382e:	f7ff f81d 	bl	286c <__udivsi3>
    3832:	9b01      	ldr	r3, [sp, #4]
    3834:	0005      	movs	r5, r0
    3836:	4343      	muls	r3, r0
    3838:	0039      	movs	r1, r7
    383a:	4650      	mov	r0, sl
    383c:	9304      	str	r3, [sp, #16]
    383e:	f7ff f89b 	bl	2978 <__aeabi_uidivmod>
    3842:	9804      	ldr	r0, [sp, #16]
    3844:	040b      	lsls	r3, r1, #16
    3846:	0c31      	lsrs	r1, r6, #16
    3848:	4319      	orrs	r1, r3
    384a:	4288      	cmp	r0, r1
    384c:	d909      	bls.n	3862 <__aeabi_ddiv+0x342>
    384e:	4441      	add	r1, r8
    3850:	1e6b      	subs	r3, r5, #1
    3852:	4588      	cmp	r8, r1
    3854:	d900      	bls.n	3858 <__aeabi_ddiv+0x338>
    3856:	e107      	b.n	3a68 <__aeabi_ddiv+0x548>
    3858:	4288      	cmp	r0, r1
    385a:	d800      	bhi.n	385e <__aeabi_ddiv+0x33e>
    385c:	e104      	b.n	3a68 <__aeabi_ddiv+0x548>
    385e:	3d02      	subs	r5, #2
    3860:	4441      	add	r1, r8
    3862:	9b04      	ldr	r3, [sp, #16]
    3864:	1acb      	subs	r3, r1, r3
    3866:	0018      	movs	r0, r3
    3868:	0039      	movs	r1, r7
    386a:	9304      	str	r3, [sp, #16]
    386c:	f7fe fffe 	bl	286c <__udivsi3>
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	4682      	mov	sl, r0
    3874:	4343      	muls	r3, r0
    3876:	0039      	movs	r1, r7
    3878:	9804      	ldr	r0, [sp, #16]
    387a:	9301      	str	r3, [sp, #4]
    387c:	f7ff f87c 	bl	2978 <__aeabi_uidivmod>
    3880:	9801      	ldr	r0, [sp, #4]
    3882:	040b      	lsls	r3, r1, #16
    3884:	0431      	lsls	r1, r6, #16
    3886:	0c09      	lsrs	r1, r1, #16
    3888:	4319      	orrs	r1, r3
    388a:	4288      	cmp	r0, r1
    388c:	d90d      	bls.n	38aa <__aeabi_ddiv+0x38a>
    388e:	4653      	mov	r3, sl
    3890:	4441      	add	r1, r8
    3892:	3b01      	subs	r3, #1
    3894:	4588      	cmp	r8, r1
    3896:	d900      	bls.n	389a <__aeabi_ddiv+0x37a>
    3898:	e0e8      	b.n	3a6c <__aeabi_ddiv+0x54c>
    389a:	4288      	cmp	r0, r1
    389c:	d800      	bhi.n	38a0 <__aeabi_ddiv+0x380>
    389e:	e0e5      	b.n	3a6c <__aeabi_ddiv+0x54c>
    38a0:	2302      	movs	r3, #2
    38a2:	425b      	negs	r3, r3
    38a4:	469c      	mov	ip, r3
    38a6:	4441      	add	r1, r8
    38a8:	44e2      	add	sl, ip
    38aa:	9b01      	ldr	r3, [sp, #4]
    38ac:	042d      	lsls	r5, r5, #16
    38ae:	1ace      	subs	r6, r1, r3
    38b0:	4651      	mov	r1, sl
    38b2:	4329      	orrs	r1, r5
    38b4:	9d05      	ldr	r5, [sp, #20]
    38b6:	464f      	mov	r7, r9
    38b8:	002a      	movs	r2, r5
    38ba:	040b      	lsls	r3, r1, #16
    38bc:	0c08      	lsrs	r0, r1, #16
    38be:	0c1b      	lsrs	r3, r3, #16
    38c0:	435a      	muls	r2, r3
    38c2:	4345      	muls	r5, r0
    38c4:	437b      	muls	r3, r7
    38c6:	4378      	muls	r0, r7
    38c8:	195b      	adds	r3, r3, r5
    38ca:	0c17      	lsrs	r7, r2, #16
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	429d      	cmp	r5, r3
    38d0:	d903      	bls.n	38da <__aeabi_ddiv+0x3ba>
    38d2:	2580      	movs	r5, #128	; 0x80
    38d4:	026d      	lsls	r5, r5, #9
    38d6:	46ac      	mov	ip, r5
    38d8:	4460      	add	r0, ip
    38da:	0c1d      	lsrs	r5, r3, #16
    38dc:	0412      	lsls	r2, r2, #16
    38de:	041b      	lsls	r3, r3, #16
    38e0:	0c12      	lsrs	r2, r2, #16
    38e2:	1828      	adds	r0, r5, r0
    38e4:	189b      	adds	r3, r3, r2
    38e6:	4286      	cmp	r6, r0
    38e8:	d200      	bcs.n	38ec <__aeabi_ddiv+0x3cc>
    38ea:	e093      	b.n	3a14 <__aeabi_ddiv+0x4f4>
    38ec:	d100      	bne.n	38f0 <__aeabi_ddiv+0x3d0>
    38ee:	e08e      	b.n	3a0e <__aeabi_ddiv+0x4ee>
    38f0:	2301      	movs	r3, #1
    38f2:	4319      	orrs	r1, r3
    38f4:	4ba0      	ldr	r3, [pc, #640]	; (3b78 <__aeabi_ddiv+0x658>)
    38f6:	18e3      	adds	r3, r4, r3
    38f8:	2b00      	cmp	r3, #0
    38fa:	dc00      	bgt.n	38fe <__aeabi_ddiv+0x3de>
    38fc:	e099      	b.n	3a32 <__aeabi_ddiv+0x512>
    38fe:	074a      	lsls	r2, r1, #29
    3900:	d000      	beq.n	3904 <__aeabi_ddiv+0x3e4>
    3902:	e09e      	b.n	3a42 <__aeabi_ddiv+0x522>
    3904:	465a      	mov	r2, fp
    3906:	01d2      	lsls	r2, r2, #7
    3908:	d506      	bpl.n	3918 <__aeabi_ddiv+0x3f8>
    390a:	465a      	mov	r2, fp
    390c:	4b9b      	ldr	r3, [pc, #620]	; (3b7c <__aeabi_ddiv+0x65c>)
    390e:	401a      	ands	r2, r3
    3910:	2380      	movs	r3, #128	; 0x80
    3912:	4693      	mov	fp, r2
    3914:	00db      	lsls	r3, r3, #3
    3916:	18e3      	adds	r3, r4, r3
    3918:	4a99      	ldr	r2, [pc, #612]	; (3b80 <__aeabi_ddiv+0x660>)
    391a:	4293      	cmp	r3, r2
    391c:	dd68      	ble.n	39f0 <__aeabi_ddiv+0x4d0>
    391e:	2301      	movs	r3, #1
    3920:	9a02      	ldr	r2, [sp, #8]
    3922:	4c98      	ldr	r4, [pc, #608]	; (3b84 <__aeabi_ddiv+0x664>)
    3924:	401a      	ands	r2, r3
    3926:	2300      	movs	r3, #0
    3928:	4694      	mov	ip, r2
    392a:	4698      	mov	r8, r3
    392c:	2200      	movs	r2, #0
    392e:	e6c5      	b.n	36bc <__aeabi_ddiv+0x19c>
    3930:	2280      	movs	r2, #128	; 0x80
    3932:	464b      	mov	r3, r9
    3934:	0312      	lsls	r2, r2, #12
    3936:	4213      	tst	r3, r2
    3938:	d00a      	beq.n	3950 <__aeabi_ddiv+0x430>
    393a:	465b      	mov	r3, fp
    393c:	4213      	tst	r3, r2
    393e:	d106      	bne.n	394e <__aeabi_ddiv+0x42e>
    3940:	431a      	orrs	r2, r3
    3942:	0312      	lsls	r2, r2, #12
    3944:	0b12      	lsrs	r2, r2, #12
    3946:	46ac      	mov	ip, r5
    3948:	4688      	mov	r8, r1
    394a:	4c8e      	ldr	r4, [pc, #568]	; (3b84 <__aeabi_ddiv+0x664>)
    394c:	e6b6      	b.n	36bc <__aeabi_ddiv+0x19c>
    394e:	464b      	mov	r3, r9
    3950:	431a      	orrs	r2, r3
    3952:	0312      	lsls	r2, r2, #12
    3954:	0b12      	lsrs	r2, r2, #12
    3956:	46bc      	mov	ip, r7
    3958:	4c8a      	ldr	r4, [pc, #552]	; (3b84 <__aeabi_ddiv+0x664>)
    395a:	e6af      	b.n	36bc <__aeabi_ddiv+0x19c>
    395c:	0003      	movs	r3, r0
    395e:	465a      	mov	r2, fp
    3960:	3b28      	subs	r3, #40	; 0x28
    3962:	409a      	lsls	r2, r3
    3964:	2300      	movs	r3, #0
    3966:	4691      	mov	r9, r2
    3968:	4698      	mov	r8, r3
    396a:	e657      	b.n	361c <__aeabi_ddiv+0xfc>
    396c:	4658      	mov	r0, fp
    396e:	f000 fce3 	bl	4338 <__clzsi2>
    3972:	3020      	adds	r0, #32
    3974:	e640      	b.n	35f8 <__aeabi_ddiv+0xd8>
    3976:	0003      	movs	r3, r0
    3978:	4652      	mov	r2, sl
    397a:	3b28      	subs	r3, #40	; 0x28
    397c:	409a      	lsls	r2, r3
    397e:	2100      	movs	r1, #0
    3980:	4693      	mov	fp, r2
    3982:	e677      	b.n	3674 <__aeabi_ddiv+0x154>
    3984:	f000 fcd8 	bl	4338 <__clzsi2>
    3988:	3020      	adds	r0, #32
    398a:	e65f      	b.n	364c <__aeabi_ddiv+0x12c>
    398c:	4588      	cmp	r8, r1
    398e:	d200      	bcs.n	3992 <__aeabi_ddiv+0x472>
    3990:	e6c7      	b.n	3722 <__aeabi_ddiv+0x202>
    3992:	464b      	mov	r3, r9
    3994:	07de      	lsls	r6, r3, #31
    3996:	085d      	lsrs	r5, r3, #1
    3998:	4643      	mov	r3, r8
    399a:	085b      	lsrs	r3, r3, #1
    399c:	431e      	orrs	r6, r3
    399e:	4643      	mov	r3, r8
    39a0:	07db      	lsls	r3, r3, #31
    39a2:	469a      	mov	sl, r3
    39a4:	e6c2      	b.n	372c <__aeabi_ddiv+0x20c>
    39a6:	2500      	movs	r5, #0
    39a8:	4592      	cmp	sl, r2
    39aa:	d300      	bcc.n	39ae <__aeabi_ddiv+0x48e>
    39ac:	e733      	b.n	3816 <__aeabi_ddiv+0x2f6>
    39ae:	9e03      	ldr	r6, [sp, #12]
    39b0:	4659      	mov	r1, fp
    39b2:	46b4      	mov	ip, r6
    39b4:	44e2      	add	sl, ip
    39b6:	45b2      	cmp	sl, r6
    39b8:	41ad      	sbcs	r5, r5
    39ba:	426d      	negs	r5, r5
    39bc:	4445      	add	r5, r8
    39be:	18eb      	adds	r3, r5, r3
    39c0:	3901      	subs	r1, #1
    39c2:	4598      	cmp	r8, r3
    39c4:	d207      	bcs.n	39d6 <__aeabi_ddiv+0x4b6>
    39c6:	4298      	cmp	r0, r3
    39c8:	d900      	bls.n	39cc <__aeabi_ddiv+0x4ac>
    39ca:	e07f      	b.n	3acc <__aeabi_ddiv+0x5ac>
    39cc:	d100      	bne.n	39d0 <__aeabi_ddiv+0x4b0>
    39ce:	e0bc      	b.n	3b4a <__aeabi_ddiv+0x62a>
    39d0:	1a1d      	subs	r5, r3, r0
    39d2:	468b      	mov	fp, r1
    39d4:	e71f      	b.n	3816 <__aeabi_ddiv+0x2f6>
    39d6:	4598      	cmp	r8, r3
    39d8:	d1fa      	bne.n	39d0 <__aeabi_ddiv+0x4b0>
    39da:	9d03      	ldr	r5, [sp, #12]
    39dc:	4555      	cmp	r5, sl
    39de:	d9f2      	bls.n	39c6 <__aeabi_ddiv+0x4a6>
    39e0:	4643      	mov	r3, r8
    39e2:	468b      	mov	fp, r1
    39e4:	1a1d      	subs	r5, r3, r0
    39e6:	e716      	b.n	3816 <__aeabi_ddiv+0x2f6>
    39e8:	469b      	mov	fp, r3
    39ea:	e6ca      	b.n	3782 <__aeabi_ddiv+0x262>
    39ec:	0015      	movs	r5, r2
    39ee:	e6e7      	b.n	37c0 <__aeabi_ddiv+0x2a0>
    39f0:	465a      	mov	r2, fp
    39f2:	08c9      	lsrs	r1, r1, #3
    39f4:	0752      	lsls	r2, r2, #29
    39f6:	430a      	orrs	r2, r1
    39f8:	055b      	lsls	r3, r3, #21
    39fa:	4690      	mov	r8, r2
    39fc:	0d5c      	lsrs	r4, r3, #21
    39fe:	465a      	mov	r2, fp
    3a00:	2301      	movs	r3, #1
    3a02:	9902      	ldr	r1, [sp, #8]
    3a04:	0252      	lsls	r2, r2, #9
    3a06:	4019      	ands	r1, r3
    3a08:	0b12      	lsrs	r2, r2, #12
    3a0a:	468c      	mov	ip, r1
    3a0c:	e656      	b.n	36bc <__aeabi_ddiv+0x19c>
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d100      	bne.n	3a14 <__aeabi_ddiv+0x4f4>
    3a12:	e76f      	b.n	38f4 <__aeabi_ddiv+0x3d4>
    3a14:	4446      	add	r6, r8
    3a16:	1e4a      	subs	r2, r1, #1
    3a18:	45b0      	cmp	r8, r6
    3a1a:	d929      	bls.n	3a70 <__aeabi_ddiv+0x550>
    3a1c:	0011      	movs	r1, r2
    3a1e:	4286      	cmp	r6, r0
    3a20:	d000      	beq.n	3a24 <__aeabi_ddiv+0x504>
    3a22:	e765      	b.n	38f0 <__aeabi_ddiv+0x3d0>
    3a24:	9a03      	ldr	r2, [sp, #12]
    3a26:	4293      	cmp	r3, r2
    3a28:	d000      	beq.n	3a2c <__aeabi_ddiv+0x50c>
    3a2a:	e761      	b.n	38f0 <__aeabi_ddiv+0x3d0>
    3a2c:	e762      	b.n	38f4 <__aeabi_ddiv+0x3d4>
    3a2e:	2101      	movs	r1, #1
    3a30:	4249      	negs	r1, r1
    3a32:	2001      	movs	r0, #1
    3a34:	1ac2      	subs	r2, r0, r3
    3a36:	2a38      	cmp	r2, #56	; 0x38
    3a38:	dd21      	ble.n	3a7e <__aeabi_ddiv+0x55e>
    3a3a:	9b02      	ldr	r3, [sp, #8]
    3a3c:	4003      	ands	r3, r0
    3a3e:	469c      	mov	ip, r3
    3a40:	e638      	b.n	36b4 <__aeabi_ddiv+0x194>
    3a42:	220f      	movs	r2, #15
    3a44:	400a      	ands	r2, r1
    3a46:	2a04      	cmp	r2, #4
    3a48:	d100      	bne.n	3a4c <__aeabi_ddiv+0x52c>
    3a4a:	e75b      	b.n	3904 <__aeabi_ddiv+0x3e4>
    3a4c:	000a      	movs	r2, r1
    3a4e:	1d11      	adds	r1, r2, #4
    3a50:	4291      	cmp	r1, r2
    3a52:	4192      	sbcs	r2, r2
    3a54:	4252      	negs	r2, r2
    3a56:	4493      	add	fp, r2
    3a58:	e754      	b.n	3904 <__aeabi_ddiv+0x3e4>
    3a5a:	4b47      	ldr	r3, [pc, #284]	; (3b78 <__aeabi_ddiv+0x658>)
    3a5c:	18e3      	adds	r3, r4, r3
    3a5e:	2b00      	cmp	r3, #0
    3a60:	dde5      	ble.n	3a2e <__aeabi_ddiv+0x50e>
    3a62:	2201      	movs	r2, #1
    3a64:	4252      	negs	r2, r2
    3a66:	e7f2      	b.n	3a4e <__aeabi_ddiv+0x52e>
    3a68:	001d      	movs	r5, r3
    3a6a:	e6fa      	b.n	3862 <__aeabi_ddiv+0x342>
    3a6c:	469a      	mov	sl, r3
    3a6e:	e71c      	b.n	38aa <__aeabi_ddiv+0x38a>
    3a70:	42b0      	cmp	r0, r6
    3a72:	d839      	bhi.n	3ae8 <__aeabi_ddiv+0x5c8>
    3a74:	d06e      	beq.n	3b54 <__aeabi_ddiv+0x634>
    3a76:	0011      	movs	r1, r2
    3a78:	e73a      	b.n	38f0 <__aeabi_ddiv+0x3d0>
    3a7a:	9302      	str	r3, [sp, #8]
    3a7c:	e73a      	b.n	38f4 <__aeabi_ddiv+0x3d4>
    3a7e:	2a1f      	cmp	r2, #31
    3a80:	dc3c      	bgt.n	3afc <__aeabi_ddiv+0x5dc>
    3a82:	2320      	movs	r3, #32
    3a84:	1a9b      	subs	r3, r3, r2
    3a86:	000c      	movs	r4, r1
    3a88:	4658      	mov	r0, fp
    3a8a:	4099      	lsls	r1, r3
    3a8c:	4098      	lsls	r0, r3
    3a8e:	1e4b      	subs	r3, r1, #1
    3a90:	4199      	sbcs	r1, r3
    3a92:	465b      	mov	r3, fp
    3a94:	40d4      	lsrs	r4, r2
    3a96:	40d3      	lsrs	r3, r2
    3a98:	4320      	orrs	r0, r4
    3a9a:	4308      	orrs	r0, r1
    3a9c:	001a      	movs	r2, r3
    3a9e:	0743      	lsls	r3, r0, #29
    3aa0:	d009      	beq.n	3ab6 <__aeabi_ddiv+0x596>
    3aa2:	230f      	movs	r3, #15
    3aa4:	4003      	ands	r3, r0
    3aa6:	2b04      	cmp	r3, #4
    3aa8:	d005      	beq.n	3ab6 <__aeabi_ddiv+0x596>
    3aaa:	0001      	movs	r1, r0
    3aac:	1d08      	adds	r0, r1, #4
    3aae:	4288      	cmp	r0, r1
    3ab0:	419b      	sbcs	r3, r3
    3ab2:	425b      	negs	r3, r3
    3ab4:	18d2      	adds	r2, r2, r3
    3ab6:	0213      	lsls	r3, r2, #8
    3ab8:	d53a      	bpl.n	3b30 <__aeabi_ddiv+0x610>
    3aba:	2301      	movs	r3, #1
    3abc:	9a02      	ldr	r2, [sp, #8]
    3abe:	2401      	movs	r4, #1
    3ac0:	401a      	ands	r2, r3
    3ac2:	2300      	movs	r3, #0
    3ac4:	4694      	mov	ip, r2
    3ac6:	4698      	mov	r8, r3
    3ac8:	2200      	movs	r2, #0
    3aca:	e5f7      	b.n	36bc <__aeabi_ddiv+0x19c>
    3acc:	2102      	movs	r1, #2
    3ace:	4249      	negs	r1, r1
    3ad0:	468c      	mov	ip, r1
    3ad2:	9d03      	ldr	r5, [sp, #12]
    3ad4:	44e3      	add	fp, ip
    3ad6:	46ac      	mov	ip, r5
    3ad8:	44e2      	add	sl, ip
    3ada:	45aa      	cmp	sl, r5
    3adc:	41ad      	sbcs	r5, r5
    3ade:	426d      	negs	r5, r5
    3ae0:	4445      	add	r5, r8
    3ae2:	18ed      	adds	r5, r5, r3
    3ae4:	1a2d      	subs	r5, r5, r0
    3ae6:	e696      	b.n	3816 <__aeabi_ddiv+0x2f6>
    3ae8:	1e8a      	subs	r2, r1, #2
    3aea:	9903      	ldr	r1, [sp, #12]
    3aec:	004d      	lsls	r5, r1, #1
    3aee:	428d      	cmp	r5, r1
    3af0:	4189      	sbcs	r1, r1
    3af2:	4249      	negs	r1, r1
    3af4:	4441      	add	r1, r8
    3af6:	1876      	adds	r6, r6, r1
    3af8:	9503      	str	r5, [sp, #12]
    3afa:	e78f      	b.n	3a1c <__aeabi_ddiv+0x4fc>
    3afc:	201f      	movs	r0, #31
    3afe:	4240      	negs	r0, r0
    3b00:	1ac3      	subs	r3, r0, r3
    3b02:	4658      	mov	r0, fp
    3b04:	40d8      	lsrs	r0, r3
    3b06:	0003      	movs	r3, r0
    3b08:	2a20      	cmp	r2, #32
    3b0a:	d028      	beq.n	3b5e <__aeabi_ddiv+0x63e>
    3b0c:	2040      	movs	r0, #64	; 0x40
    3b0e:	465d      	mov	r5, fp
    3b10:	1a82      	subs	r2, r0, r2
    3b12:	4095      	lsls	r5, r2
    3b14:	4329      	orrs	r1, r5
    3b16:	1e4a      	subs	r2, r1, #1
    3b18:	4191      	sbcs	r1, r2
    3b1a:	4319      	orrs	r1, r3
    3b1c:	2307      	movs	r3, #7
    3b1e:	2200      	movs	r2, #0
    3b20:	400b      	ands	r3, r1
    3b22:	d009      	beq.n	3b38 <__aeabi_ddiv+0x618>
    3b24:	230f      	movs	r3, #15
    3b26:	2200      	movs	r2, #0
    3b28:	400b      	ands	r3, r1
    3b2a:	0008      	movs	r0, r1
    3b2c:	2b04      	cmp	r3, #4
    3b2e:	d1bd      	bne.n	3aac <__aeabi_ddiv+0x58c>
    3b30:	0001      	movs	r1, r0
    3b32:	0753      	lsls	r3, r2, #29
    3b34:	0252      	lsls	r2, r2, #9
    3b36:	0b12      	lsrs	r2, r2, #12
    3b38:	08c9      	lsrs	r1, r1, #3
    3b3a:	4319      	orrs	r1, r3
    3b3c:	2301      	movs	r3, #1
    3b3e:	4688      	mov	r8, r1
    3b40:	9902      	ldr	r1, [sp, #8]
    3b42:	2400      	movs	r4, #0
    3b44:	4019      	ands	r1, r3
    3b46:	468c      	mov	ip, r1
    3b48:	e5b8      	b.n	36bc <__aeabi_ddiv+0x19c>
    3b4a:	4552      	cmp	r2, sl
    3b4c:	d8be      	bhi.n	3acc <__aeabi_ddiv+0x5ac>
    3b4e:	468b      	mov	fp, r1
    3b50:	2500      	movs	r5, #0
    3b52:	e660      	b.n	3816 <__aeabi_ddiv+0x2f6>
    3b54:	9d03      	ldr	r5, [sp, #12]
    3b56:	429d      	cmp	r5, r3
    3b58:	d3c6      	bcc.n	3ae8 <__aeabi_ddiv+0x5c8>
    3b5a:	0011      	movs	r1, r2
    3b5c:	e762      	b.n	3a24 <__aeabi_ddiv+0x504>
    3b5e:	2500      	movs	r5, #0
    3b60:	e7d8      	b.n	3b14 <__aeabi_ddiv+0x5f4>
    3b62:	2280      	movs	r2, #128	; 0x80
    3b64:	465b      	mov	r3, fp
    3b66:	0312      	lsls	r2, r2, #12
    3b68:	431a      	orrs	r2, r3
    3b6a:	9b01      	ldr	r3, [sp, #4]
    3b6c:	0312      	lsls	r2, r2, #12
    3b6e:	0b12      	lsrs	r2, r2, #12
    3b70:	469c      	mov	ip, r3
    3b72:	4688      	mov	r8, r1
    3b74:	4c03      	ldr	r4, [pc, #12]	; (3b84 <__aeabi_ddiv+0x664>)
    3b76:	e5a1      	b.n	36bc <__aeabi_ddiv+0x19c>
    3b78:	000003ff 	.word	0x000003ff
    3b7c:	feffffff 	.word	0xfeffffff
    3b80:	000007fe 	.word	0x000007fe
    3b84:	000007ff 	.word	0x000007ff

00003b88 <__aeabi_dmul>:
    3b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b8a:	4657      	mov	r7, sl
    3b8c:	4645      	mov	r5, r8
    3b8e:	46de      	mov	lr, fp
    3b90:	464e      	mov	r6, r9
    3b92:	b5e0      	push	{r5, r6, r7, lr}
    3b94:	030c      	lsls	r4, r1, #12
    3b96:	4698      	mov	r8, r3
    3b98:	004e      	lsls	r6, r1, #1
    3b9a:	0b23      	lsrs	r3, r4, #12
    3b9c:	b087      	sub	sp, #28
    3b9e:	0007      	movs	r7, r0
    3ba0:	4692      	mov	sl, r2
    3ba2:	469b      	mov	fp, r3
    3ba4:	0d76      	lsrs	r6, r6, #21
    3ba6:	0fcd      	lsrs	r5, r1, #31
    3ba8:	2e00      	cmp	r6, #0
    3baa:	d06b      	beq.n	3c84 <__aeabi_dmul+0xfc>
    3bac:	4b6d      	ldr	r3, [pc, #436]	; (3d64 <__aeabi_dmul+0x1dc>)
    3bae:	429e      	cmp	r6, r3
    3bb0:	d035      	beq.n	3c1e <__aeabi_dmul+0x96>
    3bb2:	2480      	movs	r4, #128	; 0x80
    3bb4:	465b      	mov	r3, fp
    3bb6:	0f42      	lsrs	r2, r0, #29
    3bb8:	0424      	lsls	r4, r4, #16
    3bba:	00db      	lsls	r3, r3, #3
    3bbc:	4314      	orrs	r4, r2
    3bbe:	431c      	orrs	r4, r3
    3bc0:	00c3      	lsls	r3, r0, #3
    3bc2:	4699      	mov	r9, r3
    3bc4:	4b68      	ldr	r3, [pc, #416]	; (3d68 <__aeabi_dmul+0x1e0>)
    3bc6:	46a3      	mov	fp, r4
    3bc8:	469c      	mov	ip, r3
    3bca:	2300      	movs	r3, #0
    3bcc:	2700      	movs	r7, #0
    3bce:	4466      	add	r6, ip
    3bd0:	9302      	str	r3, [sp, #8]
    3bd2:	4643      	mov	r3, r8
    3bd4:	031c      	lsls	r4, r3, #12
    3bd6:	005a      	lsls	r2, r3, #1
    3bd8:	0fdb      	lsrs	r3, r3, #31
    3bda:	4650      	mov	r0, sl
    3bdc:	0b24      	lsrs	r4, r4, #12
    3bde:	0d52      	lsrs	r2, r2, #21
    3be0:	4698      	mov	r8, r3
    3be2:	d100      	bne.n	3be6 <__aeabi_dmul+0x5e>
    3be4:	e076      	b.n	3cd4 <__aeabi_dmul+0x14c>
    3be6:	4b5f      	ldr	r3, [pc, #380]	; (3d64 <__aeabi_dmul+0x1dc>)
    3be8:	429a      	cmp	r2, r3
    3bea:	d06d      	beq.n	3cc8 <__aeabi_dmul+0x140>
    3bec:	2380      	movs	r3, #128	; 0x80
    3bee:	0f41      	lsrs	r1, r0, #29
    3bf0:	041b      	lsls	r3, r3, #16
    3bf2:	430b      	orrs	r3, r1
    3bf4:	495c      	ldr	r1, [pc, #368]	; (3d68 <__aeabi_dmul+0x1e0>)
    3bf6:	00e4      	lsls	r4, r4, #3
    3bf8:	468c      	mov	ip, r1
    3bfa:	431c      	orrs	r4, r3
    3bfc:	00c3      	lsls	r3, r0, #3
    3bfe:	2000      	movs	r0, #0
    3c00:	4462      	add	r2, ip
    3c02:	4641      	mov	r1, r8
    3c04:	18b6      	adds	r6, r6, r2
    3c06:	4069      	eors	r1, r5
    3c08:	1c72      	adds	r2, r6, #1
    3c0a:	9101      	str	r1, [sp, #4]
    3c0c:	4694      	mov	ip, r2
    3c0e:	4307      	orrs	r7, r0
    3c10:	2f0f      	cmp	r7, #15
    3c12:	d900      	bls.n	3c16 <__aeabi_dmul+0x8e>
    3c14:	e0b0      	b.n	3d78 <__aeabi_dmul+0x1f0>
    3c16:	4a55      	ldr	r2, [pc, #340]	; (3d6c <__aeabi_dmul+0x1e4>)
    3c18:	00bf      	lsls	r7, r7, #2
    3c1a:	59d2      	ldr	r2, [r2, r7]
    3c1c:	4697      	mov	pc, r2
    3c1e:	465b      	mov	r3, fp
    3c20:	4303      	orrs	r3, r0
    3c22:	4699      	mov	r9, r3
    3c24:	d000      	beq.n	3c28 <__aeabi_dmul+0xa0>
    3c26:	e087      	b.n	3d38 <__aeabi_dmul+0x1b0>
    3c28:	2300      	movs	r3, #0
    3c2a:	469b      	mov	fp, r3
    3c2c:	3302      	adds	r3, #2
    3c2e:	2708      	movs	r7, #8
    3c30:	9302      	str	r3, [sp, #8]
    3c32:	e7ce      	b.n	3bd2 <__aeabi_dmul+0x4a>
    3c34:	4642      	mov	r2, r8
    3c36:	9201      	str	r2, [sp, #4]
    3c38:	2802      	cmp	r0, #2
    3c3a:	d067      	beq.n	3d0c <__aeabi_dmul+0x184>
    3c3c:	2803      	cmp	r0, #3
    3c3e:	d100      	bne.n	3c42 <__aeabi_dmul+0xba>
    3c40:	e20e      	b.n	4060 <__aeabi_dmul+0x4d8>
    3c42:	2801      	cmp	r0, #1
    3c44:	d000      	beq.n	3c48 <__aeabi_dmul+0xc0>
    3c46:	e162      	b.n	3f0e <__aeabi_dmul+0x386>
    3c48:	2300      	movs	r3, #0
    3c4a:	2400      	movs	r4, #0
    3c4c:	2200      	movs	r2, #0
    3c4e:	4699      	mov	r9, r3
    3c50:	9901      	ldr	r1, [sp, #4]
    3c52:	4001      	ands	r1, r0
    3c54:	b2cd      	uxtb	r5, r1
    3c56:	2100      	movs	r1, #0
    3c58:	0312      	lsls	r2, r2, #12
    3c5a:	0d0b      	lsrs	r3, r1, #20
    3c5c:	0b12      	lsrs	r2, r2, #12
    3c5e:	051b      	lsls	r3, r3, #20
    3c60:	4313      	orrs	r3, r2
    3c62:	4a43      	ldr	r2, [pc, #268]	; (3d70 <__aeabi_dmul+0x1e8>)
    3c64:	0524      	lsls	r4, r4, #20
    3c66:	4013      	ands	r3, r2
    3c68:	431c      	orrs	r4, r3
    3c6a:	0064      	lsls	r4, r4, #1
    3c6c:	07ed      	lsls	r5, r5, #31
    3c6e:	0864      	lsrs	r4, r4, #1
    3c70:	432c      	orrs	r4, r5
    3c72:	4648      	mov	r0, r9
    3c74:	0021      	movs	r1, r4
    3c76:	b007      	add	sp, #28
    3c78:	bc3c      	pop	{r2, r3, r4, r5}
    3c7a:	4690      	mov	r8, r2
    3c7c:	4699      	mov	r9, r3
    3c7e:	46a2      	mov	sl, r4
    3c80:	46ab      	mov	fp, r5
    3c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c84:	4303      	orrs	r3, r0
    3c86:	4699      	mov	r9, r3
    3c88:	d04f      	beq.n	3d2a <__aeabi_dmul+0x1a2>
    3c8a:	465b      	mov	r3, fp
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d100      	bne.n	3c92 <__aeabi_dmul+0x10a>
    3c90:	e189      	b.n	3fa6 <__aeabi_dmul+0x41e>
    3c92:	4658      	mov	r0, fp
    3c94:	f000 fb50 	bl	4338 <__clzsi2>
    3c98:	0003      	movs	r3, r0
    3c9a:	3b0b      	subs	r3, #11
    3c9c:	2b1c      	cmp	r3, #28
    3c9e:	dd00      	ble.n	3ca2 <__aeabi_dmul+0x11a>
    3ca0:	e17a      	b.n	3f98 <__aeabi_dmul+0x410>
    3ca2:	221d      	movs	r2, #29
    3ca4:	1ad3      	subs	r3, r2, r3
    3ca6:	003a      	movs	r2, r7
    3ca8:	0001      	movs	r1, r0
    3caa:	465c      	mov	r4, fp
    3cac:	40da      	lsrs	r2, r3
    3cae:	3908      	subs	r1, #8
    3cb0:	408c      	lsls	r4, r1
    3cb2:	0013      	movs	r3, r2
    3cb4:	408f      	lsls	r7, r1
    3cb6:	4323      	orrs	r3, r4
    3cb8:	469b      	mov	fp, r3
    3cba:	46b9      	mov	r9, r7
    3cbc:	2300      	movs	r3, #0
    3cbe:	4e2d      	ldr	r6, [pc, #180]	; (3d74 <__aeabi_dmul+0x1ec>)
    3cc0:	2700      	movs	r7, #0
    3cc2:	1a36      	subs	r6, r6, r0
    3cc4:	9302      	str	r3, [sp, #8]
    3cc6:	e784      	b.n	3bd2 <__aeabi_dmul+0x4a>
    3cc8:	4653      	mov	r3, sl
    3cca:	4323      	orrs	r3, r4
    3ccc:	d12a      	bne.n	3d24 <__aeabi_dmul+0x19c>
    3cce:	2400      	movs	r4, #0
    3cd0:	2002      	movs	r0, #2
    3cd2:	e796      	b.n	3c02 <__aeabi_dmul+0x7a>
    3cd4:	4653      	mov	r3, sl
    3cd6:	4323      	orrs	r3, r4
    3cd8:	d020      	beq.n	3d1c <__aeabi_dmul+0x194>
    3cda:	2c00      	cmp	r4, #0
    3cdc:	d100      	bne.n	3ce0 <__aeabi_dmul+0x158>
    3cde:	e157      	b.n	3f90 <__aeabi_dmul+0x408>
    3ce0:	0020      	movs	r0, r4
    3ce2:	f000 fb29 	bl	4338 <__clzsi2>
    3ce6:	0003      	movs	r3, r0
    3ce8:	3b0b      	subs	r3, #11
    3cea:	2b1c      	cmp	r3, #28
    3cec:	dd00      	ble.n	3cf0 <__aeabi_dmul+0x168>
    3cee:	e149      	b.n	3f84 <__aeabi_dmul+0x3fc>
    3cf0:	211d      	movs	r1, #29
    3cf2:	1acb      	subs	r3, r1, r3
    3cf4:	4651      	mov	r1, sl
    3cf6:	0002      	movs	r2, r0
    3cf8:	40d9      	lsrs	r1, r3
    3cfa:	4653      	mov	r3, sl
    3cfc:	3a08      	subs	r2, #8
    3cfe:	4094      	lsls	r4, r2
    3d00:	4093      	lsls	r3, r2
    3d02:	430c      	orrs	r4, r1
    3d04:	4a1b      	ldr	r2, [pc, #108]	; (3d74 <__aeabi_dmul+0x1ec>)
    3d06:	1a12      	subs	r2, r2, r0
    3d08:	2000      	movs	r0, #0
    3d0a:	e77a      	b.n	3c02 <__aeabi_dmul+0x7a>
    3d0c:	2501      	movs	r5, #1
    3d0e:	9b01      	ldr	r3, [sp, #4]
    3d10:	4c14      	ldr	r4, [pc, #80]	; (3d64 <__aeabi_dmul+0x1dc>)
    3d12:	401d      	ands	r5, r3
    3d14:	2300      	movs	r3, #0
    3d16:	2200      	movs	r2, #0
    3d18:	4699      	mov	r9, r3
    3d1a:	e79c      	b.n	3c56 <__aeabi_dmul+0xce>
    3d1c:	2400      	movs	r4, #0
    3d1e:	2200      	movs	r2, #0
    3d20:	2001      	movs	r0, #1
    3d22:	e76e      	b.n	3c02 <__aeabi_dmul+0x7a>
    3d24:	4653      	mov	r3, sl
    3d26:	2003      	movs	r0, #3
    3d28:	e76b      	b.n	3c02 <__aeabi_dmul+0x7a>
    3d2a:	2300      	movs	r3, #0
    3d2c:	469b      	mov	fp, r3
    3d2e:	3301      	adds	r3, #1
    3d30:	2704      	movs	r7, #4
    3d32:	2600      	movs	r6, #0
    3d34:	9302      	str	r3, [sp, #8]
    3d36:	e74c      	b.n	3bd2 <__aeabi_dmul+0x4a>
    3d38:	2303      	movs	r3, #3
    3d3a:	4681      	mov	r9, r0
    3d3c:	270c      	movs	r7, #12
    3d3e:	9302      	str	r3, [sp, #8]
    3d40:	e747      	b.n	3bd2 <__aeabi_dmul+0x4a>
    3d42:	2280      	movs	r2, #128	; 0x80
    3d44:	2300      	movs	r3, #0
    3d46:	2500      	movs	r5, #0
    3d48:	0312      	lsls	r2, r2, #12
    3d4a:	4699      	mov	r9, r3
    3d4c:	4c05      	ldr	r4, [pc, #20]	; (3d64 <__aeabi_dmul+0x1dc>)
    3d4e:	e782      	b.n	3c56 <__aeabi_dmul+0xce>
    3d50:	465c      	mov	r4, fp
    3d52:	464b      	mov	r3, r9
    3d54:	9802      	ldr	r0, [sp, #8]
    3d56:	e76f      	b.n	3c38 <__aeabi_dmul+0xb0>
    3d58:	465c      	mov	r4, fp
    3d5a:	464b      	mov	r3, r9
    3d5c:	9501      	str	r5, [sp, #4]
    3d5e:	9802      	ldr	r0, [sp, #8]
    3d60:	e76a      	b.n	3c38 <__aeabi_dmul+0xb0>
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	000007ff 	.word	0x000007ff
    3d68:	fffffc01 	.word	0xfffffc01
    3d6c:	000047c0 	.word	0x000047c0
    3d70:	800fffff 	.word	0x800fffff
    3d74:	fffffc0d 	.word	0xfffffc0d
    3d78:	464a      	mov	r2, r9
    3d7a:	4649      	mov	r1, r9
    3d7c:	0c17      	lsrs	r7, r2, #16
    3d7e:	0c1a      	lsrs	r2, r3, #16
    3d80:	041b      	lsls	r3, r3, #16
    3d82:	0c1b      	lsrs	r3, r3, #16
    3d84:	0408      	lsls	r0, r1, #16
    3d86:	0019      	movs	r1, r3
    3d88:	0c00      	lsrs	r0, r0, #16
    3d8a:	4341      	muls	r1, r0
    3d8c:	0015      	movs	r5, r2
    3d8e:	4688      	mov	r8, r1
    3d90:	0019      	movs	r1, r3
    3d92:	437d      	muls	r5, r7
    3d94:	4379      	muls	r1, r7
    3d96:	9503      	str	r5, [sp, #12]
    3d98:	4689      	mov	r9, r1
    3d9a:	0029      	movs	r1, r5
    3d9c:	0015      	movs	r5, r2
    3d9e:	4345      	muls	r5, r0
    3da0:	444d      	add	r5, r9
    3da2:	9502      	str	r5, [sp, #8]
    3da4:	4645      	mov	r5, r8
    3da6:	0c2d      	lsrs	r5, r5, #16
    3da8:	46aa      	mov	sl, r5
    3daa:	9d02      	ldr	r5, [sp, #8]
    3dac:	4455      	add	r5, sl
    3dae:	45a9      	cmp	r9, r5
    3db0:	d906      	bls.n	3dc0 <__aeabi_dmul+0x238>
    3db2:	468a      	mov	sl, r1
    3db4:	2180      	movs	r1, #128	; 0x80
    3db6:	0249      	lsls	r1, r1, #9
    3db8:	4689      	mov	r9, r1
    3dba:	44ca      	add	sl, r9
    3dbc:	4651      	mov	r1, sl
    3dbe:	9103      	str	r1, [sp, #12]
    3dc0:	0c29      	lsrs	r1, r5, #16
    3dc2:	9104      	str	r1, [sp, #16]
    3dc4:	4641      	mov	r1, r8
    3dc6:	0409      	lsls	r1, r1, #16
    3dc8:	042d      	lsls	r5, r5, #16
    3dca:	0c09      	lsrs	r1, r1, #16
    3dcc:	4688      	mov	r8, r1
    3dce:	0029      	movs	r1, r5
    3dd0:	0c25      	lsrs	r5, r4, #16
    3dd2:	0424      	lsls	r4, r4, #16
    3dd4:	4441      	add	r1, r8
    3dd6:	0c24      	lsrs	r4, r4, #16
    3dd8:	9105      	str	r1, [sp, #20]
    3dda:	0021      	movs	r1, r4
    3ddc:	4341      	muls	r1, r0
    3dde:	4688      	mov	r8, r1
    3de0:	0021      	movs	r1, r4
    3de2:	4379      	muls	r1, r7
    3de4:	468a      	mov	sl, r1
    3de6:	4368      	muls	r0, r5
    3de8:	4641      	mov	r1, r8
    3dea:	4450      	add	r0, sl
    3dec:	4681      	mov	r9, r0
    3dee:	0c08      	lsrs	r0, r1, #16
    3df0:	4448      	add	r0, r9
    3df2:	436f      	muls	r7, r5
    3df4:	4582      	cmp	sl, r0
    3df6:	d903      	bls.n	3e00 <__aeabi_dmul+0x278>
    3df8:	2180      	movs	r1, #128	; 0x80
    3dfa:	0249      	lsls	r1, r1, #9
    3dfc:	4689      	mov	r9, r1
    3dfe:	444f      	add	r7, r9
    3e00:	0c01      	lsrs	r1, r0, #16
    3e02:	4689      	mov	r9, r1
    3e04:	0039      	movs	r1, r7
    3e06:	4449      	add	r1, r9
    3e08:	9102      	str	r1, [sp, #8]
    3e0a:	4641      	mov	r1, r8
    3e0c:	040f      	lsls	r7, r1, #16
    3e0e:	9904      	ldr	r1, [sp, #16]
    3e10:	0c3f      	lsrs	r7, r7, #16
    3e12:	4688      	mov	r8, r1
    3e14:	0400      	lsls	r0, r0, #16
    3e16:	19c0      	adds	r0, r0, r7
    3e18:	4480      	add	r8, r0
    3e1a:	4641      	mov	r1, r8
    3e1c:	9104      	str	r1, [sp, #16]
    3e1e:	4659      	mov	r1, fp
    3e20:	0c0f      	lsrs	r7, r1, #16
    3e22:	0409      	lsls	r1, r1, #16
    3e24:	0c09      	lsrs	r1, r1, #16
    3e26:	4688      	mov	r8, r1
    3e28:	4359      	muls	r1, r3
    3e2a:	468a      	mov	sl, r1
    3e2c:	0039      	movs	r1, r7
    3e2e:	4351      	muls	r1, r2
    3e30:	4689      	mov	r9, r1
    3e32:	4641      	mov	r1, r8
    3e34:	434a      	muls	r2, r1
    3e36:	4651      	mov	r1, sl
    3e38:	0c09      	lsrs	r1, r1, #16
    3e3a:	468b      	mov	fp, r1
    3e3c:	437b      	muls	r3, r7
    3e3e:	18d2      	adds	r2, r2, r3
    3e40:	445a      	add	r2, fp
    3e42:	4293      	cmp	r3, r2
    3e44:	d903      	bls.n	3e4e <__aeabi_dmul+0x2c6>
    3e46:	2380      	movs	r3, #128	; 0x80
    3e48:	025b      	lsls	r3, r3, #9
    3e4a:	469b      	mov	fp, r3
    3e4c:	44d9      	add	r9, fp
    3e4e:	4651      	mov	r1, sl
    3e50:	0409      	lsls	r1, r1, #16
    3e52:	0c09      	lsrs	r1, r1, #16
    3e54:	468a      	mov	sl, r1
    3e56:	4641      	mov	r1, r8
    3e58:	4361      	muls	r1, r4
    3e5a:	437c      	muls	r4, r7
    3e5c:	0c13      	lsrs	r3, r2, #16
    3e5e:	0412      	lsls	r2, r2, #16
    3e60:	444b      	add	r3, r9
    3e62:	4452      	add	r2, sl
    3e64:	46a1      	mov	r9, r4
    3e66:	468a      	mov	sl, r1
    3e68:	003c      	movs	r4, r7
    3e6a:	4641      	mov	r1, r8
    3e6c:	436c      	muls	r4, r5
    3e6e:	434d      	muls	r5, r1
    3e70:	4651      	mov	r1, sl
    3e72:	444d      	add	r5, r9
    3e74:	0c0f      	lsrs	r7, r1, #16
    3e76:	197d      	adds	r5, r7, r5
    3e78:	45a9      	cmp	r9, r5
    3e7a:	d903      	bls.n	3e84 <__aeabi_dmul+0x2fc>
    3e7c:	2180      	movs	r1, #128	; 0x80
    3e7e:	0249      	lsls	r1, r1, #9
    3e80:	4688      	mov	r8, r1
    3e82:	4444      	add	r4, r8
    3e84:	9f04      	ldr	r7, [sp, #16]
    3e86:	9903      	ldr	r1, [sp, #12]
    3e88:	46b8      	mov	r8, r7
    3e8a:	4441      	add	r1, r8
    3e8c:	468b      	mov	fp, r1
    3e8e:	4583      	cmp	fp, r0
    3e90:	4180      	sbcs	r0, r0
    3e92:	4241      	negs	r1, r0
    3e94:	4688      	mov	r8, r1
    3e96:	4651      	mov	r1, sl
    3e98:	0408      	lsls	r0, r1, #16
    3e9a:	042f      	lsls	r7, r5, #16
    3e9c:	0c00      	lsrs	r0, r0, #16
    3e9e:	183f      	adds	r7, r7, r0
    3ea0:	4658      	mov	r0, fp
    3ea2:	9902      	ldr	r1, [sp, #8]
    3ea4:	1810      	adds	r0, r2, r0
    3ea6:	4689      	mov	r9, r1
    3ea8:	4290      	cmp	r0, r2
    3eaa:	4192      	sbcs	r2, r2
    3eac:	444f      	add	r7, r9
    3eae:	46ba      	mov	sl, r7
    3eb0:	4252      	negs	r2, r2
    3eb2:	4699      	mov	r9, r3
    3eb4:	4693      	mov	fp, r2
    3eb6:	44c2      	add	sl, r8
    3eb8:	44d1      	add	r9, sl
    3eba:	44cb      	add	fp, r9
    3ebc:	428f      	cmp	r7, r1
    3ebe:	41bf      	sbcs	r7, r7
    3ec0:	45c2      	cmp	sl, r8
    3ec2:	4189      	sbcs	r1, r1
    3ec4:	4599      	cmp	r9, r3
    3ec6:	419b      	sbcs	r3, r3
    3ec8:	4593      	cmp	fp, r2
    3eca:	4192      	sbcs	r2, r2
    3ecc:	427f      	negs	r7, r7
    3ece:	4249      	negs	r1, r1
    3ed0:	0c2d      	lsrs	r5, r5, #16
    3ed2:	4252      	negs	r2, r2
    3ed4:	430f      	orrs	r7, r1
    3ed6:	425b      	negs	r3, r3
    3ed8:	4313      	orrs	r3, r2
    3eda:	197f      	adds	r7, r7, r5
    3edc:	18ff      	adds	r7, r7, r3
    3ede:	465b      	mov	r3, fp
    3ee0:	193c      	adds	r4, r7, r4
    3ee2:	0ddb      	lsrs	r3, r3, #23
    3ee4:	9a05      	ldr	r2, [sp, #20]
    3ee6:	0264      	lsls	r4, r4, #9
    3ee8:	431c      	orrs	r4, r3
    3eea:	0243      	lsls	r3, r0, #9
    3eec:	4313      	orrs	r3, r2
    3eee:	1e5d      	subs	r5, r3, #1
    3ef0:	41ab      	sbcs	r3, r5
    3ef2:	465a      	mov	r2, fp
    3ef4:	0dc0      	lsrs	r0, r0, #23
    3ef6:	4303      	orrs	r3, r0
    3ef8:	0252      	lsls	r2, r2, #9
    3efa:	4313      	orrs	r3, r2
    3efc:	01e2      	lsls	r2, r4, #7
    3efe:	d556      	bpl.n	3fae <__aeabi_dmul+0x426>
    3f00:	2001      	movs	r0, #1
    3f02:	085a      	lsrs	r2, r3, #1
    3f04:	4003      	ands	r3, r0
    3f06:	4313      	orrs	r3, r2
    3f08:	07e2      	lsls	r2, r4, #31
    3f0a:	4313      	orrs	r3, r2
    3f0c:	0864      	lsrs	r4, r4, #1
    3f0e:	485a      	ldr	r0, [pc, #360]	; (4078 <__aeabi_dmul+0x4f0>)
    3f10:	4460      	add	r0, ip
    3f12:	2800      	cmp	r0, #0
    3f14:	dd4d      	ble.n	3fb2 <__aeabi_dmul+0x42a>
    3f16:	075a      	lsls	r2, r3, #29
    3f18:	d009      	beq.n	3f2e <__aeabi_dmul+0x3a6>
    3f1a:	220f      	movs	r2, #15
    3f1c:	401a      	ands	r2, r3
    3f1e:	2a04      	cmp	r2, #4
    3f20:	d005      	beq.n	3f2e <__aeabi_dmul+0x3a6>
    3f22:	1d1a      	adds	r2, r3, #4
    3f24:	429a      	cmp	r2, r3
    3f26:	419b      	sbcs	r3, r3
    3f28:	425b      	negs	r3, r3
    3f2a:	18e4      	adds	r4, r4, r3
    3f2c:	0013      	movs	r3, r2
    3f2e:	01e2      	lsls	r2, r4, #7
    3f30:	d504      	bpl.n	3f3c <__aeabi_dmul+0x3b4>
    3f32:	2080      	movs	r0, #128	; 0x80
    3f34:	4a51      	ldr	r2, [pc, #324]	; (407c <__aeabi_dmul+0x4f4>)
    3f36:	00c0      	lsls	r0, r0, #3
    3f38:	4014      	ands	r4, r2
    3f3a:	4460      	add	r0, ip
    3f3c:	4a50      	ldr	r2, [pc, #320]	; (4080 <__aeabi_dmul+0x4f8>)
    3f3e:	4290      	cmp	r0, r2
    3f40:	dd00      	ble.n	3f44 <__aeabi_dmul+0x3bc>
    3f42:	e6e3      	b.n	3d0c <__aeabi_dmul+0x184>
    3f44:	2501      	movs	r5, #1
    3f46:	08db      	lsrs	r3, r3, #3
    3f48:	0762      	lsls	r2, r4, #29
    3f4a:	431a      	orrs	r2, r3
    3f4c:	0264      	lsls	r4, r4, #9
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	4691      	mov	r9, r2
    3f52:	0b22      	lsrs	r2, r4, #12
    3f54:	0544      	lsls	r4, r0, #21
    3f56:	0d64      	lsrs	r4, r4, #21
    3f58:	401d      	ands	r5, r3
    3f5a:	e67c      	b.n	3c56 <__aeabi_dmul+0xce>
    3f5c:	2280      	movs	r2, #128	; 0x80
    3f5e:	4659      	mov	r1, fp
    3f60:	0312      	lsls	r2, r2, #12
    3f62:	4211      	tst	r1, r2
    3f64:	d008      	beq.n	3f78 <__aeabi_dmul+0x3f0>
    3f66:	4214      	tst	r4, r2
    3f68:	d106      	bne.n	3f78 <__aeabi_dmul+0x3f0>
    3f6a:	4322      	orrs	r2, r4
    3f6c:	0312      	lsls	r2, r2, #12
    3f6e:	0b12      	lsrs	r2, r2, #12
    3f70:	4645      	mov	r5, r8
    3f72:	4699      	mov	r9, r3
    3f74:	4c43      	ldr	r4, [pc, #268]	; (4084 <__aeabi_dmul+0x4fc>)
    3f76:	e66e      	b.n	3c56 <__aeabi_dmul+0xce>
    3f78:	465b      	mov	r3, fp
    3f7a:	431a      	orrs	r2, r3
    3f7c:	0312      	lsls	r2, r2, #12
    3f7e:	0b12      	lsrs	r2, r2, #12
    3f80:	4c40      	ldr	r4, [pc, #256]	; (4084 <__aeabi_dmul+0x4fc>)
    3f82:	e668      	b.n	3c56 <__aeabi_dmul+0xce>
    3f84:	0003      	movs	r3, r0
    3f86:	4654      	mov	r4, sl
    3f88:	3b28      	subs	r3, #40	; 0x28
    3f8a:	409c      	lsls	r4, r3
    3f8c:	2300      	movs	r3, #0
    3f8e:	e6b9      	b.n	3d04 <__aeabi_dmul+0x17c>
    3f90:	f000 f9d2 	bl	4338 <__clzsi2>
    3f94:	3020      	adds	r0, #32
    3f96:	e6a6      	b.n	3ce6 <__aeabi_dmul+0x15e>
    3f98:	0003      	movs	r3, r0
    3f9a:	3b28      	subs	r3, #40	; 0x28
    3f9c:	409f      	lsls	r7, r3
    3f9e:	2300      	movs	r3, #0
    3fa0:	46bb      	mov	fp, r7
    3fa2:	4699      	mov	r9, r3
    3fa4:	e68a      	b.n	3cbc <__aeabi_dmul+0x134>
    3fa6:	f000 f9c7 	bl	4338 <__clzsi2>
    3faa:	3020      	adds	r0, #32
    3fac:	e674      	b.n	3c98 <__aeabi_dmul+0x110>
    3fae:	46b4      	mov	ip, r6
    3fb0:	e7ad      	b.n	3f0e <__aeabi_dmul+0x386>
    3fb2:	2501      	movs	r5, #1
    3fb4:	1a2a      	subs	r2, r5, r0
    3fb6:	2a38      	cmp	r2, #56	; 0x38
    3fb8:	dd06      	ble.n	3fc8 <__aeabi_dmul+0x440>
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	2400      	movs	r4, #0
    3fbe:	401d      	ands	r5, r3
    3fc0:	2300      	movs	r3, #0
    3fc2:	2200      	movs	r2, #0
    3fc4:	4699      	mov	r9, r3
    3fc6:	e646      	b.n	3c56 <__aeabi_dmul+0xce>
    3fc8:	2a1f      	cmp	r2, #31
    3fca:	dc21      	bgt.n	4010 <__aeabi_dmul+0x488>
    3fcc:	2520      	movs	r5, #32
    3fce:	0020      	movs	r0, r4
    3fd0:	1aad      	subs	r5, r5, r2
    3fd2:	001e      	movs	r6, r3
    3fd4:	40ab      	lsls	r3, r5
    3fd6:	40a8      	lsls	r0, r5
    3fd8:	40d6      	lsrs	r6, r2
    3fda:	1e5d      	subs	r5, r3, #1
    3fdc:	41ab      	sbcs	r3, r5
    3fde:	4330      	orrs	r0, r6
    3fe0:	4318      	orrs	r0, r3
    3fe2:	40d4      	lsrs	r4, r2
    3fe4:	0743      	lsls	r3, r0, #29
    3fe6:	d009      	beq.n	3ffc <__aeabi_dmul+0x474>
    3fe8:	230f      	movs	r3, #15
    3fea:	4003      	ands	r3, r0
    3fec:	2b04      	cmp	r3, #4
    3fee:	d005      	beq.n	3ffc <__aeabi_dmul+0x474>
    3ff0:	0003      	movs	r3, r0
    3ff2:	1d18      	adds	r0, r3, #4
    3ff4:	4298      	cmp	r0, r3
    3ff6:	419b      	sbcs	r3, r3
    3ff8:	425b      	negs	r3, r3
    3ffa:	18e4      	adds	r4, r4, r3
    3ffc:	0223      	lsls	r3, r4, #8
    3ffe:	d521      	bpl.n	4044 <__aeabi_dmul+0x4bc>
    4000:	2501      	movs	r5, #1
    4002:	9b01      	ldr	r3, [sp, #4]
    4004:	2401      	movs	r4, #1
    4006:	401d      	ands	r5, r3
    4008:	2300      	movs	r3, #0
    400a:	2200      	movs	r2, #0
    400c:	4699      	mov	r9, r3
    400e:	e622      	b.n	3c56 <__aeabi_dmul+0xce>
    4010:	251f      	movs	r5, #31
    4012:	0021      	movs	r1, r4
    4014:	426d      	negs	r5, r5
    4016:	1a28      	subs	r0, r5, r0
    4018:	40c1      	lsrs	r1, r0
    401a:	0008      	movs	r0, r1
    401c:	2a20      	cmp	r2, #32
    401e:	d01d      	beq.n	405c <__aeabi_dmul+0x4d4>
    4020:	355f      	adds	r5, #95	; 0x5f
    4022:	1aaa      	subs	r2, r5, r2
    4024:	4094      	lsls	r4, r2
    4026:	4323      	orrs	r3, r4
    4028:	1e5c      	subs	r4, r3, #1
    402a:	41a3      	sbcs	r3, r4
    402c:	2507      	movs	r5, #7
    402e:	4303      	orrs	r3, r0
    4030:	401d      	ands	r5, r3
    4032:	2200      	movs	r2, #0
    4034:	2d00      	cmp	r5, #0
    4036:	d009      	beq.n	404c <__aeabi_dmul+0x4c4>
    4038:	220f      	movs	r2, #15
    403a:	2400      	movs	r4, #0
    403c:	401a      	ands	r2, r3
    403e:	0018      	movs	r0, r3
    4040:	2a04      	cmp	r2, #4
    4042:	d1d6      	bne.n	3ff2 <__aeabi_dmul+0x46a>
    4044:	0003      	movs	r3, r0
    4046:	0765      	lsls	r5, r4, #29
    4048:	0264      	lsls	r4, r4, #9
    404a:	0b22      	lsrs	r2, r4, #12
    404c:	08db      	lsrs	r3, r3, #3
    404e:	432b      	orrs	r3, r5
    4050:	2501      	movs	r5, #1
    4052:	4699      	mov	r9, r3
    4054:	9b01      	ldr	r3, [sp, #4]
    4056:	2400      	movs	r4, #0
    4058:	401d      	ands	r5, r3
    405a:	e5fc      	b.n	3c56 <__aeabi_dmul+0xce>
    405c:	2400      	movs	r4, #0
    405e:	e7e2      	b.n	4026 <__aeabi_dmul+0x49e>
    4060:	2280      	movs	r2, #128	; 0x80
    4062:	2501      	movs	r5, #1
    4064:	0312      	lsls	r2, r2, #12
    4066:	4322      	orrs	r2, r4
    4068:	9901      	ldr	r1, [sp, #4]
    406a:	0312      	lsls	r2, r2, #12
    406c:	0b12      	lsrs	r2, r2, #12
    406e:	400d      	ands	r5, r1
    4070:	4699      	mov	r9, r3
    4072:	4c04      	ldr	r4, [pc, #16]	; (4084 <__aeabi_dmul+0x4fc>)
    4074:	e5ef      	b.n	3c56 <__aeabi_dmul+0xce>
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	000003ff 	.word	0x000003ff
    407c:	feffffff 	.word	0xfeffffff
    4080:	000007fe 	.word	0x000007fe
    4084:	000007ff 	.word	0x000007ff

00004088 <__aeabi_i2d>:
    4088:	b570      	push	{r4, r5, r6, lr}
    408a:	2800      	cmp	r0, #0
    408c:	d030      	beq.n	40f0 <__aeabi_i2d+0x68>
    408e:	17c3      	asrs	r3, r0, #31
    4090:	18c4      	adds	r4, r0, r3
    4092:	405c      	eors	r4, r3
    4094:	0fc5      	lsrs	r5, r0, #31
    4096:	0020      	movs	r0, r4
    4098:	f000 f94e 	bl	4338 <__clzsi2>
    409c:	4b17      	ldr	r3, [pc, #92]	; (40fc <__aeabi_i2d+0x74>)
    409e:	4a18      	ldr	r2, [pc, #96]	; (4100 <__aeabi_i2d+0x78>)
    40a0:	1a1b      	subs	r3, r3, r0
    40a2:	1ad2      	subs	r2, r2, r3
    40a4:	2a1f      	cmp	r2, #31
    40a6:	dd18      	ble.n	40da <__aeabi_i2d+0x52>
    40a8:	4a16      	ldr	r2, [pc, #88]	; (4104 <__aeabi_i2d+0x7c>)
    40aa:	1ad2      	subs	r2, r2, r3
    40ac:	4094      	lsls	r4, r2
    40ae:	2200      	movs	r2, #0
    40b0:	0324      	lsls	r4, r4, #12
    40b2:	055b      	lsls	r3, r3, #21
    40b4:	0b24      	lsrs	r4, r4, #12
    40b6:	0d5b      	lsrs	r3, r3, #21
    40b8:	2100      	movs	r1, #0
    40ba:	0010      	movs	r0, r2
    40bc:	0324      	lsls	r4, r4, #12
    40be:	0d0a      	lsrs	r2, r1, #20
    40c0:	0b24      	lsrs	r4, r4, #12
    40c2:	0512      	lsls	r2, r2, #20
    40c4:	4322      	orrs	r2, r4
    40c6:	4c10      	ldr	r4, [pc, #64]	; (4108 <__aeabi_i2d+0x80>)
    40c8:	051b      	lsls	r3, r3, #20
    40ca:	4022      	ands	r2, r4
    40cc:	4313      	orrs	r3, r2
    40ce:	005b      	lsls	r3, r3, #1
    40d0:	07ed      	lsls	r5, r5, #31
    40d2:	085b      	lsrs	r3, r3, #1
    40d4:	432b      	orrs	r3, r5
    40d6:	0019      	movs	r1, r3
    40d8:	bd70      	pop	{r4, r5, r6, pc}
    40da:	0021      	movs	r1, r4
    40dc:	4091      	lsls	r1, r2
    40de:	000a      	movs	r2, r1
    40e0:	210b      	movs	r1, #11
    40e2:	1a08      	subs	r0, r1, r0
    40e4:	40c4      	lsrs	r4, r0
    40e6:	055b      	lsls	r3, r3, #21
    40e8:	0324      	lsls	r4, r4, #12
    40ea:	0b24      	lsrs	r4, r4, #12
    40ec:	0d5b      	lsrs	r3, r3, #21
    40ee:	e7e3      	b.n	40b8 <__aeabi_i2d+0x30>
    40f0:	2500      	movs	r5, #0
    40f2:	2300      	movs	r3, #0
    40f4:	2400      	movs	r4, #0
    40f6:	2200      	movs	r2, #0
    40f8:	e7de      	b.n	40b8 <__aeabi_i2d+0x30>
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	0000041e 	.word	0x0000041e
    4100:	00000433 	.word	0x00000433
    4104:	00000413 	.word	0x00000413
    4108:	800fffff 	.word	0x800fffff

0000410c <__aeabi_f2d>:
    410c:	0041      	lsls	r1, r0, #1
    410e:	0e09      	lsrs	r1, r1, #24
    4110:	1c4b      	adds	r3, r1, #1
    4112:	b570      	push	{r4, r5, r6, lr}
    4114:	b2db      	uxtb	r3, r3
    4116:	0246      	lsls	r6, r0, #9
    4118:	0a75      	lsrs	r5, r6, #9
    411a:	0fc4      	lsrs	r4, r0, #31
    411c:	2b01      	cmp	r3, #1
    411e:	dd14      	ble.n	414a <__aeabi_f2d+0x3e>
    4120:	23e0      	movs	r3, #224	; 0xe0
    4122:	009b      	lsls	r3, r3, #2
    4124:	076d      	lsls	r5, r5, #29
    4126:	0b36      	lsrs	r6, r6, #12
    4128:	18cb      	adds	r3, r1, r3
    412a:	2100      	movs	r1, #0
    412c:	0d0a      	lsrs	r2, r1, #20
    412e:	0028      	movs	r0, r5
    4130:	0512      	lsls	r2, r2, #20
    4132:	4d1c      	ldr	r5, [pc, #112]	; (41a4 <__aeabi_f2d+0x98>)
    4134:	4332      	orrs	r2, r6
    4136:	055b      	lsls	r3, r3, #21
    4138:	402a      	ands	r2, r5
    413a:	085b      	lsrs	r3, r3, #1
    413c:	4313      	orrs	r3, r2
    413e:	005b      	lsls	r3, r3, #1
    4140:	07e4      	lsls	r4, r4, #31
    4142:	085b      	lsrs	r3, r3, #1
    4144:	4323      	orrs	r3, r4
    4146:	0019      	movs	r1, r3
    4148:	bd70      	pop	{r4, r5, r6, pc}
    414a:	2900      	cmp	r1, #0
    414c:	d114      	bne.n	4178 <__aeabi_f2d+0x6c>
    414e:	2d00      	cmp	r5, #0
    4150:	d01e      	beq.n	4190 <__aeabi_f2d+0x84>
    4152:	0028      	movs	r0, r5
    4154:	f000 f8f0 	bl	4338 <__clzsi2>
    4158:	280a      	cmp	r0, #10
    415a:	dc1c      	bgt.n	4196 <__aeabi_f2d+0x8a>
    415c:	230b      	movs	r3, #11
    415e:	002a      	movs	r2, r5
    4160:	1a1b      	subs	r3, r3, r0
    4162:	40da      	lsrs	r2, r3
    4164:	0003      	movs	r3, r0
    4166:	3315      	adds	r3, #21
    4168:	409d      	lsls	r5, r3
    416a:	4b0f      	ldr	r3, [pc, #60]	; (41a8 <__aeabi_f2d+0x9c>)
    416c:	0312      	lsls	r2, r2, #12
    416e:	1a1b      	subs	r3, r3, r0
    4170:	055b      	lsls	r3, r3, #21
    4172:	0b16      	lsrs	r6, r2, #12
    4174:	0d5b      	lsrs	r3, r3, #21
    4176:	e7d8      	b.n	412a <__aeabi_f2d+0x1e>
    4178:	2d00      	cmp	r5, #0
    417a:	d006      	beq.n	418a <__aeabi_f2d+0x7e>
    417c:	0b32      	lsrs	r2, r6, #12
    417e:	2680      	movs	r6, #128	; 0x80
    4180:	0336      	lsls	r6, r6, #12
    4182:	076d      	lsls	r5, r5, #29
    4184:	4316      	orrs	r6, r2
    4186:	4b09      	ldr	r3, [pc, #36]	; (41ac <__aeabi_f2d+0xa0>)
    4188:	e7cf      	b.n	412a <__aeabi_f2d+0x1e>
    418a:	4b08      	ldr	r3, [pc, #32]	; (41ac <__aeabi_f2d+0xa0>)
    418c:	2600      	movs	r6, #0
    418e:	e7cc      	b.n	412a <__aeabi_f2d+0x1e>
    4190:	2300      	movs	r3, #0
    4192:	2600      	movs	r6, #0
    4194:	e7c9      	b.n	412a <__aeabi_f2d+0x1e>
    4196:	0003      	movs	r3, r0
    4198:	002a      	movs	r2, r5
    419a:	3b0b      	subs	r3, #11
    419c:	409a      	lsls	r2, r3
    419e:	2500      	movs	r5, #0
    41a0:	e7e3      	b.n	416a <__aeabi_f2d+0x5e>
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	800fffff 	.word	0x800fffff
    41a8:	00000389 	.word	0x00000389
    41ac:	000007ff 	.word	0x000007ff

000041b0 <__aeabi_d2f>:
    41b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41b2:	004c      	lsls	r4, r1, #1
    41b4:	0d64      	lsrs	r4, r4, #21
    41b6:	030b      	lsls	r3, r1, #12
    41b8:	1c62      	adds	r2, r4, #1
    41ba:	0f45      	lsrs	r5, r0, #29
    41bc:	0a5b      	lsrs	r3, r3, #9
    41be:	0552      	lsls	r2, r2, #21
    41c0:	432b      	orrs	r3, r5
    41c2:	0fc9      	lsrs	r1, r1, #31
    41c4:	00c5      	lsls	r5, r0, #3
    41c6:	0d52      	lsrs	r2, r2, #21
    41c8:	2a01      	cmp	r2, #1
    41ca:	dd28      	ble.n	421e <__aeabi_d2f+0x6e>
    41cc:	4a3a      	ldr	r2, [pc, #232]	; (42b8 <__aeabi_d2f+0x108>)
    41ce:	18a6      	adds	r6, r4, r2
    41d0:	2efe      	cmp	r6, #254	; 0xfe
    41d2:	dc1b      	bgt.n	420c <__aeabi_d2f+0x5c>
    41d4:	2e00      	cmp	r6, #0
    41d6:	dd3e      	ble.n	4256 <__aeabi_d2f+0xa6>
    41d8:	0180      	lsls	r0, r0, #6
    41da:	0002      	movs	r2, r0
    41dc:	1e50      	subs	r0, r2, #1
    41de:	4182      	sbcs	r2, r0
    41e0:	0f6d      	lsrs	r5, r5, #29
    41e2:	432a      	orrs	r2, r5
    41e4:	00db      	lsls	r3, r3, #3
    41e6:	4313      	orrs	r3, r2
    41e8:	075a      	lsls	r2, r3, #29
    41ea:	d004      	beq.n	41f6 <__aeabi_d2f+0x46>
    41ec:	220f      	movs	r2, #15
    41ee:	401a      	ands	r2, r3
    41f0:	2a04      	cmp	r2, #4
    41f2:	d000      	beq.n	41f6 <__aeabi_d2f+0x46>
    41f4:	3304      	adds	r3, #4
    41f6:	2280      	movs	r2, #128	; 0x80
    41f8:	04d2      	lsls	r2, r2, #19
    41fa:	401a      	ands	r2, r3
    41fc:	d05a      	beq.n	42b4 <__aeabi_d2f+0x104>
    41fe:	3601      	adds	r6, #1
    4200:	2eff      	cmp	r6, #255	; 0xff
    4202:	d003      	beq.n	420c <__aeabi_d2f+0x5c>
    4204:	019b      	lsls	r3, r3, #6
    4206:	0a5b      	lsrs	r3, r3, #9
    4208:	b2f4      	uxtb	r4, r6
    420a:	e001      	b.n	4210 <__aeabi_d2f+0x60>
    420c:	24ff      	movs	r4, #255	; 0xff
    420e:	2300      	movs	r3, #0
    4210:	0258      	lsls	r0, r3, #9
    4212:	05e4      	lsls	r4, r4, #23
    4214:	0a40      	lsrs	r0, r0, #9
    4216:	07c9      	lsls	r1, r1, #31
    4218:	4320      	orrs	r0, r4
    421a:	4308      	orrs	r0, r1
    421c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    421e:	2c00      	cmp	r4, #0
    4220:	d007      	beq.n	4232 <__aeabi_d2f+0x82>
    4222:	431d      	orrs	r5, r3
    4224:	d0f2      	beq.n	420c <__aeabi_d2f+0x5c>
    4226:	2080      	movs	r0, #128	; 0x80
    4228:	00db      	lsls	r3, r3, #3
    422a:	0480      	lsls	r0, r0, #18
    422c:	4303      	orrs	r3, r0
    422e:	26ff      	movs	r6, #255	; 0xff
    4230:	e7da      	b.n	41e8 <__aeabi_d2f+0x38>
    4232:	432b      	orrs	r3, r5
    4234:	d003      	beq.n	423e <__aeabi_d2f+0x8e>
    4236:	2305      	movs	r3, #5
    4238:	08db      	lsrs	r3, r3, #3
    423a:	2cff      	cmp	r4, #255	; 0xff
    423c:	d003      	beq.n	4246 <__aeabi_d2f+0x96>
    423e:	025b      	lsls	r3, r3, #9
    4240:	0a5b      	lsrs	r3, r3, #9
    4242:	b2e4      	uxtb	r4, r4
    4244:	e7e4      	b.n	4210 <__aeabi_d2f+0x60>
    4246:	2b00      	cmp	r3, #0
    4248:	d032      	beq.n	42b0 <__aeabi_d2f+0x100>
    424a:	2080      	movs	r0, #128	; 0x80
    424c:	03c0      	lsls	r0, r0, #15
    424e:	4303      	orrs	r3, r0
    4250:	025b      	lsls	r3, r3, #9
    4252:	0a5b      	lsrs	r3, r3, #9
    4254:	e7dc      	b.n	4210 <__aeabi_d2f+0x60>
    4256:	0032      	movs	r2, r6
    4258:	3217      	adds	r2, #23
    425a:	db14      	blt.n	4286 <__aeabi_d2f+0xd6>
    425c:	2280      	movs	r2, #128	; 0x80
    425e:	271e      	movs	r7, #30
    4260:	0412      	lsls	r2, r2, #16
    4262:	4313      	orrs	r3, r2
    4264:	1bbf      	subs	r7, r7, r6
    4266:	2f1f      	cmp	r7, #31
    4268:	dc0f      	bgt.n	428a <__aeabi_d2f+0xda>
    426a:	4a14      	ldr	r2, [pc, #80]	; (42bc <__aeabi_d2f+0x10c>)
    426c:	4694      	mov	ip, r2
    426e:	4464      	add	r4, ip
    4270:	002a      	movs	r2, r5
    4272:	40a5      	lsls	r5, r4
    4274:	002e      	movs	r6, r5
    4276:	40a3      	lsls	r3, r4
    4278:	1e75      	subs	r5, r6, #1
    427a:	41ae      	sbcs	r6, r5
    427c:	40fa      	lsrs	r2, r7
    427e:	4333      	orrs	r3, r6
    4280:	4313      	orrs	r3, r2
    4282:	2600      	movs	r6, #0
    4284:	e7b0      	b.n	41e8 <__aeabi_d2f+0x38>
    4286:	2400      	movs	r4, #0
    4288:	e7d5      	b.n	4236 <__aeabi_d2f+0x86>
    428a:	2202      	movs	r2, #2
    428c:	4252      	negs	r2, r2
    428e:	1b96      	subs	r6, r2, r6
    4290:	001a      	movs	r2, r3
    4292:	40f2      	lsrs	r2, r6
    4294:	2f20      	cmp	r7, #32
    4296:	d009      	beq.n	42ac <__aeabi_d2f+0xfc>
    4298:	4809      	ldr	r0, [pc, #36]	; (42c0 <__aeabi_d2f+0x110>)
    429a:	4684      	mov	ip, r0
    429c:	4464      	add	r4, ip
    429e:	40a3      	lsls	r3, r4
    42a0:	432b      	orrs	r3, r5
    42a2:	1e5d      	subs	r5, r3, #1
    42a4:	41ab      	sbcs	r3, r5
    42a6:	2600      	movs	r6, #0
    42a8:	4313      	orrs	r3, r2
    42aa:	e79d      	b.n	41e8 <__aeabi_d2f+0x38>
    42ac:	2300      	movs	r3, #0
    42ae:	e7f7      	b.n	42a0 <__aeabi_d2f+0xf0>
    42b0:	2300      	movs	r3, #0
    42b2:	e7ad      	b.n	4210 <__aeabi_d2f+0x60>
    42b4:	0034      	movs	r4, r6
    42b6:	e7bf      	b.n	4238 <__aeabi_d2f+0x88>
    42b8:	fffffc80 	.word	0xfffffc80
    42bc:	fffffc82 	.word	0xfffffc82
    42c0:	fffffca2 	.word	0xfffffca2

000042c4 <__aeabi_cfrcmple>:
    42c4:	4684      	mov	ip, r0
    42c6:	1c08      	adds	r0, r1, #0
    42c8:	4661      	mov	r1, ip
    42ca:	e7ff      	b.n	42cc <__aeabi_cfcmpeq>

000042cc <__aeabi_cfcmpeq>:
    42cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42ce:	f000 f8b7 	bl	4440 <__lesf2>
    42d2:	2800      	cmp	r0, #0
    42d4:	d401      	bmi.n	42da <__aeabi_cfcmpeq+0xe>
    42d6:	2100      	movs	r1, #0
    42d8:	42c8      	cmn	r0, r1
    42da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000042dc <__aeabi_fcmpeq>:
    42dc:	b510      	push	{r4, lr}
    42de:	f000 f849 	bl	4374 <__eqsf2>
    42e2:	4240      	negs	r0, r0
    42e4:	3001      	adds	r0, #1
    42e6:	bd10      	pop	{r4, pc}

000042e8 <__aeabi_fcmplt>:
    42e8:	b510      	push	{r4, lr}
    42ea:	f000 f8a9 	bl	4440 <__lesf2>
    42ee:	2800      	cmp	r0, #0
    42f0:	db01      	blt.n	42f6 <__aeabi_fcmplt+0xe>
    42f2:	2000      	movs	r0, #0
    42f4:	bd10      	pop	{r4, pc}
    42f6:	2001      	movs	r0, #1
    42f8:	bd10      	pop	{r4, pc}
    42fa:	46c0      	nop			; (mov r8, r8)

000042fc <__aeabi_fcmple>:
    42fc:	b510      	push	{r4, lr}
    42fe:	f000 f89f 	bl	4440 <__lesf2>
    4302:	2800      	cmp	r0, #0
    4304:	dd01      	ble.n	430a <__aeabi_fcmple+0xe>
    4306:	2000      	movs	r0, #0
    4308:	bd10      	pop	{r4, pc}
    430a:	2001      	movs	r0, #1
    430c:	bd10      	pop	{r4, pc}
    430e:	46c0      	nop			; (mov r8, r8)

00004310 <__aeabi_fcmpgt>:
    4310:	b510      	push	{r4, lr}
    4312:	f000 f855 	bl	43c0 <__gesf2>
    4316:	2800      	cmp	r0, #0
    4318:	dc01      	bgt.n	431e <__aeabi_fcmpgt+0xe>
    431a:	2000      	movs	r0, #0
    431c:	bd10      	pop	{r4, pc}
    431e:	2001      	movs	r0, #1
    4320:	bd10      	pop	{r4, pc}
    4322:	46c0      	nop			; (mov r8, r8)

00004324 <__aeabi_fcmpge>:
    4324:	b510      	push	{r4, lr}
    4326:	f000 f84b 	bl	43c0 <__gesf2>
    432a:	2800      	cmp	r0, #0
    432c:	da01      	bge.n	4332 <__aeabi_fcmpge+0xe>
    432e:	2000      	movs	r0, #0
    4330:	bd10      	pop	{r4, pc}
    4332:	2001      	movs	r0, #1
    4334:	bd10      	pop	{r4, pc}
    4336:	46c0      	nop			; (mov r8, r8)

00004338 <__clzsi2>:
    4338:	211c      	movs	r1, #28
    433a:	2301      	movs	r3, #1
    433c:	041b      	lsls	r3, r3, #16
    433e:	4298      	cmp	r0, r3
    4340:	d301      	bcc.n	4346 <__clzsi2+0xe>
    4342:	0c00      	lsrs	r0, r0, #16
    4344:	3910      	subs	r1, #16
    4346:	0a1b      	lsrs	r3, r3, #8
    4348:	4298      	cmp	r0, r3
    434a:	d301      	bcc.n	4350 <__clzsi2+0x18>
    434c:	0a00      	lsrs	r0, r0, #8
    434e:	3908      	subs	r1, #8
    4350:	091b      	lsrs	r3, r3, #4
    4352:	4298      	cmp	r0, r3
    4354:	d301      	bcc.n	435a <__clzsi2+0x22>
    4356:	0900      	lsrs	r0, r0, #4
    4358:	3904      	subs	r1, #4
    435a:	a202      	add	r2, pc, #8	; (adr r2, 4364 <__clzsi2+0x2c>)
    435c:	5c10      	ldrb	r0, [r2, r0]
    435e:	1840      	adds	r0, r0, r1
    4360:	4770      	bx	lr
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	02020304 	.word	0x02020304
    4368:	01010101 	.word	0x01010101
	...

00004374 <__eqsf2>:
    4374:	b570      	push	{r4, r5, r6, lr}
    4376:	0042      	lsls	r2, r0, #1
    4378:	0245      	lsls	r5, r0, #9
    437a:	024e      	lsls	r6, r1, #9
    437c:	004c      	lsls	r4, r1, #1
    437e:	0fc3      	lsrs	r3, r0, #31
    4380:	0a6d      	lsrs	r5, r5, #9
    4382:	0e12      	lsrs	r2, r2, #24
    4384:	0a76      	lsrs	r6, r6, #9
    4386:	0e24      	lsrs	r4, r4, #24
    4388:	0fc9      	lsrs	r1, r1, #31
    438a:	2001      	movs	r0, #1
    438c:	2aff      	cmp	r2, #255	; 0xff
    438e:	d006      	beq.n	439e <__eqsf2+0x2a>
    4390:	2cff      	cmp	r4, #255	; 0xff
    4392:	d003      	beq.n	439c <__eqsf2+0x28>
    4394:	42a2      	cmp	r2, r4
    4396:	d101      	bne.n	439c <__eqsf2+0x28>
    4398:	42b5      	cmp	r5, r6
    439a:	d006      	beq.n	43aa <__eqsf2+0x36>
    439c:	bd70      	pop	{r4, r5, r6, pc}
    439e:	2d00      	cmp	r5, #0
    43a0:	d1fc      	bne.n	439c <__eqsf2+0x28>
    43a2:	2cff      	cmp	r4, #255	; 0xff
    43a4:	d1fa      	bne.n	439c <__eqsf2+0x28>
    43a6:	2e00      	cmp	r6, #0
    43a8:	d1f8      	bne.n	439c <__eqsf2+0x28>
    43aa:	428b      	cmp	r3, r1
    43ac:	d006      	beq.n	43bc <__eqsf2+0x48>
    43ae:	2001      	movs	r0, #1
    43b0:	2a00      	cmp	r2, #0
    43b2:	d1f3      	bne.n	439c <__eqsf2+0x28>
    43b4:	0028      	movs	r0, r5
    43b6:	1e45      	subs	r5, r0, #1
    43b8:	41a8      	sbcs	r0, r5
    43ba:	e7ef      	b.n	439c <__eqsf2+0x28>
    43bc:	2000      	movs	r0, #0
    43be:	e7ed      	b.n	439c <__eqsf2+0x28>

000043c0 <__gesf2>:
    43c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43c2:	0042      	lsls	r2, r0, #1
    43c4:	0245      	lsls	r5, r0, #9
    43c6:	024c      	lsls	r4, r1, #9
    43c8:	0fc3      	lsrs	r3, r0, #31
    43ca:	0048      	lsls	r0, r1, #1
    43cc:	0a6d      	lsrs	r5, r5, #9
    43ce:	0e12      	lsrs	r2, r2, #24
    43d0:	0a64      	lsrs	r4, r4, #9
    43d2:	0e00      	lsrs	r0, r0, #24
    43d4:	0fc9      	lsrs	r1, r1, #31
    43d6:	2aff      	cmp	r2, #255	; 0xff
    43d8:	d01e      	beq.n	4418 <__gesf2+0x58>
    43da:	28ff      	cmp	r0, #255	; 0xff
    43dc:	d021      	beq.n	4422 <__gesf2+0x62>
    43de:	2a00      	cmp	r2, #0
    43e0:	d10a      	bne.n	43f8 <__gesf2+0x38>
    43e2:	426e      	negs	r6, r5
    43e4:	416e      	adcs	r6, r5
    43e6:	b2f6      	uxtb	r6, r6
    43e8:	2800      	cmp	r0, #0
    43ea:	d10f      	bne.n	440c <__gesf2+0x4c>
    43ec:	2c00      	cmp	r4, #0
    43ee:	d10d      	bne.n	440c <__gesf2+0x4c>
    43f0:	2000      	movs	r0, #0
    43f2:	2d00      	cmp	r5, #0
    43f4:	d009      	beq.n	440a <__gesf2+0x4a>
    43f6:	e005      	b.n	4404 <__gesf2+0x44>
    43f8:	2800      	cmp	r0, #0
    43fa:	d101      	bne.n	4400 <__gesf2+0x40>
    43fc:	2c00      	cmp	r4, #0
    43fe:	d001      	beq.n	4404 <__gesf2+0x44>
    4400:	428b      	cmp	r3, r1
    4402:	d011      	beq.n	4428 <__gesf2+0x68>
    4404:	2101      	movs	r1, #1
    4406:	4258      	negs	r0, r3
    4408:	4308      	orrs	r0, r1
    440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    440c:	2e00      	cmp	r6, #0
    440e:	d0f7      	beq.n	4400 <__gesf2+0x40>
    4410:	2001      	movs	r0, #1
    4412:	3901      	subs	r1, #1
    4414:	4308      	orrs	r0, r1
    4416:	e7f8      	b.n	440a <__gesf2+0x4a>
    4418:	2d00      	cmp	r5, #0
    441a:	d0de      	beq.n	43da <__gesf2+0x1a>
    441c:	2002      	movs	r0, #2
    441e:	4240      	negs	r0, r0
    4420:	e7f3      	b.n	440a <__gesf2+0x4a>
    4422:	2c00      	cmp	r4, #0
    4424:	d0db      	beq.n	43de <__gesf2+0x1e>
    4426:	e7f9      	b.n	441c <__gesf2+0x5c>
    4428:	4282      	cmp	r2, r0
    442a:	dceb      	bgt.n	4404 <__gesf2+0x44>
    442c:	db04      	blt.n	4438 <__gesf2+0x78>
    442e:	42a5      	cmp	r5, r4
    4430:	d8e8      	bhi.n	4404 <__gesf2+0x44>
    4432:	2000      	movs	r0, #0
    4434:	42a5      	cmp	r5, r4
    4436:	d2e8      	bcs.n	440a <__gesf2+0x4a>
    4438:	2101      	movs	r1, #1
    443a:	1e58      	subs	r0, r3, #1
    443c:	4308      	orrs	r0, r1
    443e:	e7e4      	b.n	440a <__gesf2+0x4a>

00004440 <__lesf2>:
    4440:	b5f0      	push	{r4, r5, r6, r7, lr}
    4442:	0042      	lsls	r2, r0, #1
    4444:	024d      	lsls	r5, r1, #9
    4446:	004c      	lsls	r4, r1, #1
    4448:	0246      	lsls	r6, r0, #9
    444a:	0a76      	lsrs	r6, r6, #9
    444c:	0e12      	lsrs	r2, r2, #24
    444e:	0fc3      	lsrs	r3, r0, #31
    4450:	0a6d      	lsrs	r5, r5, #9
    4452:	0e24      	lsrs	r4, r4, #24
    4454:	0fc9      	lsrs	r1, r1, #31
    4456:	2aff      	cmp	r2, #255	; 0xff
    4458:	d016      	beq.n	4488 <__lesf2+0x48>
    445a:	2cff      	cmp	r4, #255	; 0xff
    445c:	d018      	beq.n	4490 <__lesf2+0x50>
    445e:	2a00      	cmp	r2, #0
    4460:	d10a      	bne.n	4478 <__lesf2+0x38>
    4462:	4270      	negs	r0, r6
    4464:	4170      	adcs	r0, r6
    4466:	b2c0      	uxtb	r0, r0
    4468:	2c00      	cmp	r4, #0
    446a:	d015      	beq.n	4498 <__lesf2+0x58>
    446c:	2800      	cmp	r0, #0
    446e:	d005      	beq.n	447c <__lesf2+0x3c>
    4470:	2001      	movs	r0, #1
    4472:	3901      	subs	r1, #1
    4474:	4308      	orrs	r0, r1
    4476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4478:	2c00      	cmp	r4, #0
    447a:	d013      	beq.n	44a4 <__lesf2+0x64>
    447c:	4299      	cmp	r1, r3
    447e:	d014      	beq.n	44aa <__lesf2+0x6a>
    4480:	2001      	movs	r0, #1
    4482:	425b      	negs	r3, r3
    4484:	4318      	orrs	r0, r3
    4486:	e7f6      	b.n	4476 <__lesf2+0x36>
    4488:	2002      	movs	r0, #2
    448a:	2e00      	cmp	r6, #0
    448c:	d1f3      	bne.n	4476 <__lesf2+0x36>
    448e:	e7e4      	b.n	445a <__lesf2+0x1a>
    4490:	2002      	movs	r0, #2
    4492:	2d00      	cmp	r5, #0
    4494:	d1ef      	bne.n	4476 <__lesf2+0x36>
    4496:	e7e2      	b.n	445e <__lesf2+0x1e>
    4498:	2d00      	cmp	r5, #0
    449a:	d1e7      	bne.n	446c <__lesf2+0x2c>
    449c:	2000      	movs	r0, #0
    449e:	2e00      	cmp	r6, #0
    44a0:	d0e9      	beq.n	4476 <__lesf2+0x36>
    44a2:	e7ed      	b.n	4480 <__lesf2+0x40>
    44a4:	2d00      	cmp	r5, #0
    44a6:	d1e9      	bne.n	447c <__lesf2+0x3c>
    44a8:	e7ea      	b.n	4480 <__lesf2+0x40>
    44aa:	42a2      	cmp	r2, r4
    44ac:	dc06      	bgt.n	44bc <__lesf2+0x7c>
    44ae:	dbdf      	blt.n	4470 <__lesf2+0x30>
    44b0:	42ae      	cmp	r6, r5
    44b2:	d803      	bhi.n	44bc <__lesf2+0x7c>
    44b4:	2000      	movs	r0, #0
    44b6:	42ae      	cmp	r6, r5
    44b8:	d3da      	bcc.n	4470 <__lesf2+0x30>
    44ba:	e7dc      	b.n	4476 <__lesf2+0x36>
    44bc:	2001      	movs	r0, #1
    44be:	4249      	negs	r1, r1
    44c0:	4308      	orrs	r0, r1
    44c2:	e7d8      	b.n	4476 <__lesf2+0x36>

000044c4 <__libc_init_array>:
    44c4:	b570      	push	{r4, r5, r6, lr}
    44c6:	2600      	movs	r6, #0
    44c8:	4d0c      	ldr	r5, [pc, #48]	; (44fc <__libc_init_array+0x38>)
    44ca:	4c0d      	ldr	r4, [pc, #52]	; (4500 <__libc_init_array+0x3c>)
    44cc:	1b64      	subs	r4, r4, r5
    44ce:	10a4      	asrs	r4, r4, #2
    44d0:	42a6      	cmp	r6, r4
    44d2:	d109      	bne.n	44e8 <__libc_init_array+0x24>
    44d4:	2600      	movs	r6, #0
    44d6:	f000 f993 	bl	4800 <_init>
    44da:	4d0a      	ldr	r5, [pc, #40]	; (4504 <__libc_init_array+0x40>)
    44dc:	4c0a      	ldr	r4, [pc, #40]	; (4508 <__libc_init_array+0x44>)
    44de:	1b64      	subs	r4, r4, r5
    44e0:	10a4      	asrs	r4, r4, #2
    44e2:	42a6      	cmp	r6, r4
    44e4:	d105      	bne.n	44f2 <__libc_init_array+0x2e>
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	00b3      	lsls	r3, r6, #2
    44ea:	58eb      	ldr	r3, [r5, r3]
    44ec:	4798      	blx	r3
    44ee:	3601      	adds	r6, #1
    44f0:	e7ee      	b.n	44d0 <__libc_init_array+0xc>
    44f2:	00b3      	lsls	r3, r6, #2
    44f4:	58eb      	ldr	r3, [r5, r3]
    44f6:	4798      	blx	r3
    44f8:	3601      	adds	r6, #1
    44fa:	e7f2      	b.n	44e2 <__libc_init_array+0x1e>
    44fc:	0000480c 	.word	0x0000480c
    4500:	0000480c 	.word	0x0000480c
    4504:	0000480c 	.word	0x0000480c
    4508:	00004810 	.word	0x00004810

0000450c <memcpy>:
    450c:	2300      	movs	r3, #0
    450e:	b510      	push	{r4, lr}
    4510:	429a      	cmp	r2, r3
    4512:	d100      	bne.n	4516 <memcpy+0xa>
    4514:	bd10      	pop	{r4, pc}
    4516:	5ccc      	ldrb	r4, [r1, r3]
    4518:	54c4      	strb	r4, [r0, r3]
    451a:	3301      	adds	r3, #1
    451c:	e7f8      	b.n	4510 <memcpy+0x4>
    451e:	0000      	movs	r0, r0
    4520:	000001e0 	.word	0x000001e0
    4524:	000001ee 	.word	0x000001ee
    4528:	000001fc 	.word	0x000001fc
    452c:	0000020a 	.word	0x0000020a
    4530:	00000218 	.word	0x00000218
    4534:	00000002 	.word	0x00000002
    4538:	00000003 	.word	0x00000003
    453c:	00000028 	.word	0x00000028
    4540:	00000029 	.word	0x00000029
    4544:	00000004 	.word	0x00000004
    4548:	00000005 	.word	0x00000005
    454c:	00000006 	.word	0x00000006
    4550:	00000007 	.word	0x00000007
    4554:	00000020 	.word	0x00000020
    4558:	00000021 	.word	0x00000021
    455c:	00000022 	.word	0x00000022
    4560:	00000023 	.word	0x00000023
    4564:	00000024 	.word	0x00000024
    4568:	00000025 	.word	0x00000025
    456c:	00000026 	.word	0x00000026
    4570:	00000027 	.word	0x00000027
    4574:	00000008 	.word	0x00000008
    4578:	00000009 	.word	0x00000009
    457c:	0000000a 	.word	0x0000000a
    4580:	0000000b 	.word	0x0000000b
    4584:	0000ffff 	.word	0x0000ffff
    4588:	0000ffff 	.word	0x0000ffff
    458c:	0000ffff 	.word	0x0000ffff
    4590:	0000ffff 	.word	0x0000ffff
    4594:	000005c8 	.word	0x000005c8
    4598:	000005ce 	.word	0x000005ce
    459c:	000005ce 	.word	0x000005ce
    45a0:	000005ce 	.word	0x000005ce
    45a4:	000005ce 	.word	0x000005ce
    45a8:	000005ce 	.word	0x000005ce
    45ac:	000005ce 	.word	0x000005ce
    45b0:	000005ce 	.word	0x000005ce
    45b4:	000005ce 	.word	0x000005ce
    45b8:	000005ce 	.word	0x000005ce
    45bc:	000005ce 	.word	0x000005ce
    45c0:	000005ce 	.word	0x000005ce
    45c4:	000005ce 	.word	0x000005ce
    45c8:	000005ce 	.word	0x000005ce
    45cc:	000005ce 	.word	0x000005ce
    45d0:	000005ce 	.word	0x000005ce
    45d4:	000005a6 	.word	0x000005a6
    45d8:	000005ce 	.word	0x000005ce
    45dc:	000005ce 	.word	0x000005ce
    45e0:	000005ce 	.word	0x000005ce
    45e4:	000005ce 	.word	0x000005ce
    45e8:	000005ce 	.word	0x000005ce
    45ec:	000005ce 	.word	0x000005ce
    45f0:	000005ce 	.word	0x000005ce
    45f4:	000005ce 	.word	0x000005ce
    45f8:	000005ce 	.word	0x000005ce
    45fc:	000005ce 	.word	0x000005ce
    4600:	000005ce 	.word	0x000005ce
    4604:	000005ce 	.word	0x000005ce
    4608:	000005ce 	.word	0x000005ce
    460c:	000005ce 	.word	0x000005ce
    4610:	000005ce 	.word	0x000005ce
    4614:	000005c2 	.word	0x000005c2
    4618:	000005ce 	.word	0x000005ce
    461c:	000005ce 	.word	0x000005ce
    4620:	000005ce 	.word	0x000005ce
    4624:	000005ce 	.word	0x000005ce
    4628:	000005ce 	.word	0x000005ce
    462c:	000005ce 	.word	0x000005ce
    4630:	000005ce 	.word	0x000005ce
    4634:	000005ce 	.word	0x000005ce
    4638:	000005ce 	.word	0x000005ce
    463c:	000005ce 	.word	0x000005ce
    4640:	000005ce 	.word	0x000005ce
    4644:	000005ce 	.word	0x000005ce
    4648:	000005ce 	.word	0x000005ce
    464c:	000005ce 	.word	0x000005ce
    4650:	000005ce 	.word	0x000005ce
    4654:	000005bc 	.word	0x000005bc
    4658:	00000564 	.word	0x00000564
    465c:	0000057a 	.word	0x0000057a
    4660:	00000590 	.word	0x00000590
    4664:	0000054a 	.word	0x0000054a
    4668:	00000a0c 	.word	0x00000a0c
    466c:	00000a1a 	.word	0x00000a1a
    4670:	00000a28 	.word	0x00000a28
    4674:	00000a36 	.word	0x00000a36
    4678:	00000a44 	.word	0x00000a44
    467c:	000011b4 	.word	0x000011b4
    4680:	000011c2 	.word	0x000011c2
    4684:	000011d0 	.word	0x000011d0
    4688:	000011de 	.word	0x000011de
    468c:	000011ec 	.word	0x000011ec

00004690 <tcc_modules>:
    4690:	42001400 42001800 42001c00              ...B...B...B

0000469c <_tcc_gclk_ids>:
    469c:	001a1919                                ....

000046a0 <_tcc_apbcmasks>:
    46a0:	00000020 00000040 00000080               ...@.......

000046ac <_tcc_maxs>:
    46ac:	00ffffff 00ffffff 0000ffff              ............

000046b8 <_tcc_cc_nums>:
    46b8:	00020204                                ....

000046bc <_tcc_ow_nums>:
    46bc:	00020408 00002e64 00002e34 00002e46     ....d...4...F...
    46cc:	00002d88 00002e46 00002e2a 00002e46     .-..F...*...F...
    46dc:	00002d88 00002e34 00002e34 00002e2a     .-..4...4...*...
    46ec:	00002d88 00002d90 00002d90 00002d90     .-...-...-...-..
    46fc:	00002e4c 00002e34 00002e34 00002e08     L...4...4.......
    470c:	00002eec 00002e08 00002e2a 00002e08     ........*.......
    471c:	00002eec 00002e34 00002e34 00002e2a     ....4...4...*...
    472c:	00002eec 00002d90 00002d90 00002d90     .....-...-...-..
    473c:	00002ef6 00003094 00002fe4 00002fe4     .....0.../.../..
    474c:	00002fe2 00003086 00003086 0000307c     ./...0...0..|0..
    475c:	00002fe2 00003086 0000307c 00003086     ./...0..|0...0..
    476c:	00002fe2 0000308c 0000308c 0000308c     ./...0...0...0..
    477c:	0000311c 00003718 000036fa 000036b4     .1...7...6...6..
    478c:	000035d2 000036b4 000036ec 000036b4     .5...6...6...6..
    479c:	000035d2 000036fa 000036fa 000036ec     .5...6...6...6..
    47ac:	000035d2 000035ca 000035ca 000035ca     .5...5...5...5..
    47bc:	00003930 00003d78 00003c38 00003c38     09..x=..8<..8<..
    47cc:	00003c34 00003d50 00003d50 00003d42     4<..P=..P=..B=..
    47dc:	00003c34 00003d50 00003d42 00003d50     4<..P=..B=..P=..
    47ec:	00003c34 00003d58 00003d58 00003d58     4<..X=..X=..X=..
    47fc:	00003f5c                                \?..

00004800 <_init>:
    4800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4806:	bc08      	pop	{r3}
    4808:	469e      	mov	lr, r3
    480a:	4770      	bx	lr

0000480c <__init_array_start>:
    480c:	000000dd 	.word	0x000000dd

00004810 <_fini>:
    4810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4812:	46c0      	nop			; (mov r8, r8)
    4814:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4816:	bc08      	pop	{r3}
    4818:	469e      	mov	lr, r3
    481a:	4770      	bx	lr

0000481c <__fini_array_start>:
    481c:	000000b5 	.word	0x000000b5
