
Adaptive_D_14.02.21_works.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006234  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00006234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        000000a0  30000000  30000000  00030000  2**4
                  ALLOC
  3 .bss          0000013c  20000020  00006260  00020020  2**4
                  ALLOC
  4 .stack        00002004  2000015c  0000639c  00020020  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002acf1  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b6f  00000000  00000000  0004ad86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002755  00000000  00000000  0004d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000710  00000000  00000000  0005004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000630  00000000  00000000  0005075a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005e92  00000000  00000000  00050d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ac71  00000000  00000000  00056c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a0837  00000000  00000000  0006188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b2c  00000000  00000000  001020c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 21 00 20 fd 31 00 00 91 32 00 00 91 32 00 00     `!. .1...2...2..
	...
      2c:	91 32 00 00 00 00 00 00 00 00 00 00 91 32 00 00     .2...........2..
      3c:	91 32 00 00 91 32 00 00 91 32 00 00 91 32 00 00     .2...2...2...2..
      4c:	91 32 00 00 91 32 00 00 ad 0b 00 00 91 32 00 00     .2...2.......2..
      5c:	91 32 00 00 a5 17 00 00 bd 17 00 00 d5 17 00 00     .2..............
      6c:	ed 17 00 00 05 18 00 00 1d 18 00 00 91 32 00 00     .............2..
      7c:	91 32 00 00 91 32 00 00 91 32 00 00 91 32 00 00     .2...2...2...2..
      8c:	91 32 00 00 91 32 00 00 91 32 00 00 91 32 00 00     .2...2...2...2..
      9c:	91 32 00 00 91 32 00 00 91 32 00 00 91 32 00 00     .2...2...2...2..
      ac:	91 32 00 00 00 00 00 00                             .2......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00006234 	.word	0x00006234

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00006234 	.word	0x00006234
     10c:	00006234 	.word	0x00006234
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	2000003c 	.word	0x2000003c
     160:	20000000 	.word	0x20000000
     164:	20000040 	.word	0x20000040

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	2000003c 	.word	0x2000003c
     1a0:	20000040 	.word	0x20000040
     1a4:	20000000 	.word	0x20000000

000001a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2200      	movs	r2, #0
     1b4:	701a      	strb	r2, [r3, #0]
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
	...

000001c0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1c0:	b580      	push	{r7, lr}
     1c2:	b082      	sub	sp, #8
     1c4:	af00      	add	r7, sp, #0
     1c6:	0002      	movs	r2, r0
     1c8:	6039      	str	r1, [r7, #0]
     1ca:	1dfb      	adds	r3, r7, #7
     1cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b04      	cmp	r3, #4
     1d4:	d827      	bhi.n	226 <system_apb_clock_set_mask+0x66>
     1d6:	009a      	lsls	r2, r3, #2
     1d8:	4b16      	ldr	r3, [pc, #88]	; (234 <system_apb_clock_set_mask+0x74>)
     1da:	18d3      	adds	r3, r2, r3
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     1e0:	4b15      	ldr	r3, [pc, #84]	; (238 <system_apb_clock_set_mask+0x78>)
     1e2:	4a15      	ldr	r2, [pc, #84]	; (238 <system_apb_clock_set_mask+0x78>)
     1e4:	6951      	ldr	r1, [r2, #20]
     1e6:	683a      	ldr	r2, [r7, #0]
     1e8:	430a      	orrs	r2, r1
     1ea:	615a      	str	r2, [r3, #20]
			break;
     1ec:	e01d      	b.n	22a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     1ee:	4b12      	ldr	r3, [pc, #72]	; (238 <system_apb_clock_set_mask+0x78>)
     1f0:	4a11      	ldr	r2, [pc, #68]	; (238 <system_apb_clock_set_mask+0x78>)
     1f2:	6991      	ldr	r1, [r2, #24]
     1f4:	683a      	ldr	r2, [r7, #0]
     1f6:	430a      	orrs	r2, r1
     1f8:	619a      	str	r2, [r3, #24]
			break;
     1fa:	e016      	b.n	22a <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1fc:	4b0e      	ldr	r3, [pc, #56]	; (238 <system_apb_clock_set_mask+0x78>)
     1fe:	4a0e      	ldr	r2, [pc, #56]	; (238 <system_apb_clock_set_mask+0x78>)
     200:	69d1      	ldr	r1, [r2, #28]
     202:	683a      	ldr	r2, [r7, #0]
     204:	430a      	orrs	r2, r1
     206:	61da      	str	r2, [r3, #28]
			break;
     208:	e00f      	b.n	22a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     20a:	4b0b      	ldr	r3, [pc, #44]	; (238 <system_apb_clock_set_mask+0x78>)
     20c:	4a0a      	ldr	r2, [pc, #40]	; (238 <system_apb_clock_set_mask+0x78>)
     20e:	6a11      	ldr	r1, [r2, #32]
     210:	683a      	ldr	r2, [r7, #0]
     212:	430a      	orrs	r2, r1
     214:	621a      	str	r2, [r3, #32]
			break;
     216:	e008      	b.n	22a <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     218:	4b07      	ldr	r3, [pc, #28]	; (238 <system_apb_clock_set_mask+0x78>)
     21a:	4a07      	ldr	r2, [pc, #28]	; (238 <system_apb_clock_set_mask+0x78>)
     21c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     21e:	683a      	ldr	r2, [r7, #0]
     220:	430a      	orrs	r2, r1
     222:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     224:	e001      	b.n	22a <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     226:	2317      	movs	r3, #23
     228:	e000      	b.n	22c <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     22a:	2300      	movs	r3, #0
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b002      	add	sp, #8
     232:	bd80      	pop	{r7, pc}
     234:	00005ef0 	.word	0x00005ef0
     238:	40000400 	.word	0x40000400

0000023c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2280      	movs	r2, #128	; 0x80
     248:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2201      	movs	r2, #1
     254:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     256:	687b      	ldr	r3, [r7, #4]
     258:	2200      	movs	r2, #0
     25a:	70da      	strb	r2, [r3, #3]
}
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     264:	b580      	push	{r7, lr}
     266:	b082      	sub	sp, #8
     268:	af00      	add	r7, sp, #0
     26a:	0002      	movs	r2, r0
     26c:	1dfb      	adds	r3, r7, #7
     26e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     270:	1dfb      	adds	r3, r7, #7
     272:	781b      	ldrb	r3, [r3, #0]
     274:	2b00      	cmp	r3, #0
     276:	d002      	beq.n	27e <system_voltage_reference_enable+0x1a>
     278:	2b01      	cmp	r3, #1
     27a:	d007      	beq.n	28c <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     27c:	e00d      	b.n	29a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     27e:	4b08      	ldr	r3, [pc, #32]	; (2a0 <system_voltage_reference_enable+0x3c>)
     280:	4a07      	ldr	r2, [pc, #28]	; (2a0 <system_voltage_reference_enable+0x3c>)
     282:	69d2      	ldr	r2, [r2, #28]
     284:	2102      	movs	r1, #2
     286:	430a      	orrs	r2, r1
     288:	61da      	str	r2, [r3, #28]
			break;
     28a:	e006      	b.n	29a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <system_voltage_reference_enable+0x3c>)
     28e:	4a04      	ldr	r2, [pc, #16]	; (2a0 <system_voltage_reference_enable+0x3c>)
     290:	69d2      	ldr	r2, [r2, #28]
     292:	2104      	movs	r1, #4
     294:	430a      	orrs	r2, r1
     296:	61da      	str	r2, [r3, #28]
			break;
     298:	46c0      	nop			; (mov r8, r8)
	}
}
     29a:	46bd      	mov	sp, r7
     29c:	b002      	add	sp, #8
     29e:	bd80      	pop	{r7, pc}
     2a0:	40001400 	.word	0x40001400

000002a4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	681b      	ldr	r3, [r3, #0]
     2b0:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     2b2:	68fb      	ldr	r3, [r7, #12]
     2b4:	8c1b      	ldrh	r3, [r3, #32]
     2b6:	b29b      	uxth	r3, r3
     2b8:	2b00      	cmp	r3, #0
     2ba:	d001      	beq.n	2c0 <adc_is_syncing+0x1c>
		return true;
     2bc:	2301      	movs	r3, #1
     2be:	e000      	b.n	2c2 <adc_is_syncing+0x1e>
	}

	return false;
     2c0:	2300      	movs	r3, #0
}
     2c2:	0018      	movs	r0, r3
     2c4:	46bd      	mov	sp, r7
     2c6:	b004      	add	sp, #16
     2c8:	bd80      	pop	{r7, pc}
	...

000002cc <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     2d4:	4b0e      	ldr	r3, [pc, #56]	; (310 <_adc_get_inst_index+0x44>)
     2d6:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     2d8:	2300      	movs	r3, #0
     2da:	60fb      	str	r3, [r7, #12]
     2dc:	e010      	b.n	300 <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	009b      	lsls	r3, r3, #2
     2e2:	2210      	movs	r2, #16
     2e4:	4694      	mov	ip, r2
     2e6:	44bc      	add	ip, r7
     2e8:	4463      	add	r3, ip
     2ea:	3b08      	subs	r3, #8
     2ec:	681a      	ldr	r2, [r3, #0]
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	429a      	cmp	r2, r3
     2f2:	d102      	bne.n	2fa <_adc_get_inst_index+0x2e>
			return i;
     2f4:	68fb      	ldr	r3, [r7, #12]
     2f6:	b2db      	uxtb	r3, r3
     2f8:	e006      	b.n	308 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	3301      	adds	r3, #1
     2fe:	60fb      	str	r3, [r7, #12]
     300:	68fb      	ldr	r3, [r7, #12]
     302:	2b00      	cmp	r3, #0
     304:	d0eb      	beq.n	2de <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     306:	2300      	movs	r3, #0
}
     308:	0018      	movs	r0, r3
     30a:	46bd      	mov	sp, r7
     30c:	b004      	add	sp, #16
     30e:	bd80      	pop	{r7, pc}
     310:	43000c00 	.word	0x43000c00

00000314 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     314:	b580      	push	{r7, lr}
     316:	b082      	sub	sp, #8
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	2200      	movs	r2, #0
     320:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     322:	687b      	ldr	r3, [r7, #4]
     324:	2200      	movs	r2, #0
     326:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2200      	movs	r2, #0
     32c:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     32e:	687b      	ldr	r3, [r7, #4]
     330:	2200      	movs	r2, #0
     332:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     334:	687b      	ldr	r3, [r7, #4]
     336:	2200      	movs	r2, #0
     338:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	2200      	movs	r2, #0
     33e:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     340:	687b      	ldr	r3, [r7, #4]
     342:	2200      	movs	r2, #0
     344:	61da      	str	r2, [r3, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     346:	687b      	ldr	r3, [r7, #4]
     348:	2201      	movs	r2, #1
     34a:	711a      	strb	r2, [r3, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	22c0      	movs	r2, #192	; 0xc0
     350:	0152      	lsls	r2, r2, #5
     352:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     354:	687b      	ldr	r3, [r7, #4]
     356:	2200      	movs	r2, #0
     358:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	2200      	movs	r2, #0
     35e:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     360:	687b      	ldr	r3, [r7, #4]
     362:	2200      	movs	r2, #0
     364:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     366:	687b      	ldr	r3, [r7, #4]
     368:	2200      	movs	r2, #0
     36a:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2200      	movs	r2, #0
     370:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     372:	687b      	ldr	r3, [r7, #4]
     374:	222a      	movs	r2, #42	; 0x2a
     376:	2100      	movs	r1, #0
     378:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	2200      	movs	r2, #0
     37e:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     380:	687b      	ldr	r3, [r7, #4]
     382:	2200      	movs	r2, #0
     384:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     386:	687b      	ldr	r3, [r7, #4]
     388:	2200      	movs	r2, #0
     38a:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	2200      	movs	r2, #0
     390:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     392:	687b      	ldr	r3, [r7, #4]
     394:	2200      	movs	r2, #0
     396:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2224      	movs	r2, #36	; 0x24
     39c:	2100      	movs	r1, #0
     39e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2200      	movs	r2, #0
     3a4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	2200      	movs	r2, #0
     3aa:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	2200      	movs	r2, #0
     3b0:	755a      	strb	r2, [r3, #21]
}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	46bd      	mov	sp, r7
     3b6:	b002      	add	sp, #8
     3b8:	bd80      	pop	{r7, pc}
	...

000003bc <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     3bc:	b580      	push	{r7, lr}
     3be:	b09c      	sub	sp, #112	; 0x70
     3c0:	af00      	add	r7, sp, #0
     3c2:	0002      	movs	r2, r0
     3c4:	6039      	str	r1, [r7, #0]
     3c6:	1dfb      	adds	r3, r7, #7
     3c8:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35)
	const uint32_t pinmapping[] = {
     3ca:	230c      	movs	r3, #12
     3cc:	18fa      	adds	r2, r7, r3
     3ce:	4b16      	ldr	r3, [pc, #88]	; (428 <_adc_configure_ain_pin+0x6c>)
     3d0:	0010      	movs	r0, r2
     3d2:	0019      	movs	r1, r3
     3d4:	2360      	movs	r3, #96	; 0x60
     3d6:	001a      	movs	r2, r3
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <_adc_configure_ain_pin+0x70>)
     3da:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     3dc:	4b14      	ldr	r3, [pc, #80]	; (430 <_adc_configure_ain_pin+0x74>)
     3de:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (pin <= _adc_extchannel_msb[index]) {
     3e0:	2213      	movs	r2, #19
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	429a      	cmp	r2, r3
     3e6:	d31a      	bcc.n	41e <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e8:	230c      	movs	r3, #12
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	683a      	ldr	r2, [r7, #0]
     3ee:	0092      	lsls	r2, r2, #2
     3f0:	58d3      	ldr	r3, [r2, r3]
     3f2:	66fb      	str	r3, [r7, #108]	; 0x6c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     3f4:	2308      	movs	r3, #8
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	0018      	movs	r0, r3
     3fa:	4b0e      	ldr	r3, [pc, #56]	; (434 <_adc_configure_ain_pin+0x78>)
     3fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	2200      	movs	r2, #0
     404:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	2201      	movs	r2, #1
     40c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     410:	b2db      	uxtb	r3, r3
     412:	2208      	movs	r2, #8
     414:	18ba      	adds	r2, r7, r2
     416:	0011      	movs	r1, r2
     418:	0018      	movs	r0, r3
     41a:	4b07      	ldr	r3, [pc, #28]	; (438 <_adc_configure_ain_pin+0x7c>)
     41c:	4798      	blx	r3
	}
}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	46bd      	mov	sp, r7
     422:	b01c      	add	sp, #112	; 0x70
     424:	bd80      	pop	{r7, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	00005f04 	.word	0x00005f04
     42c:	00005edd 	.word	0x00005edd
     430:	0000ffff 	.word	0x0000ffff
     434:	0000023d 	.word	0x0000023d
     438:	00002705 	.word	0x00002705

0000043c <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     43c:	b580      	push	{r7, lr}
     43e:	b08a      	sub	sp, #40	; 0x28
     440:	af00      	add	r7, sp, #0
     442:	60b9      	str	r1, [r7, #8]
     444:	607a      	str	r2, [r7, #4]
     446:	230f      	movs	r3, #15
     448:	18fb      	adds	r3, r7, r3
     44a:	1c02      	adds	r2, r0, #0
     44c:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     44e:	2327      	movs	r3, #39	; 0x27
     450:	18fb      	adds	r3, r7, r3
     452:	2200      	movs	r2, #0
     454:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     456:	2310      	movs	r3, #16
     458:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     45a:	231f      	movs	r3, #31
     45c:	18fb      	adds	r3, r7, r3
     45e:	2200      	movs	r2, #0
     460:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     462:	68bb      	ldr	r3, [r7, #8]
     464:	681b      	ldr	r3, [r3, #0]
     466:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     468:	2314      	movs	r3, #20
     46a:	18fb      	adds	r3, r7, r3
     46c:	0018      	movs	r0, r3
     46e:	4bc5      	ldr	r3, [pc, #788]	; (784 <_adc_set_config+0x348>)
     470:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     472:	687b      	ldr	r3, [r7, #4]
     474:	781a      	ldrb	r2, [r3, #0]
     476:	2314      	movs	r3, #20
     478:	18fb      	adds	r3, r7, r3
     47a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     47c:	221e      	movs	r2, #30
     47e:	2314      	movs	r3, #20
     480:	18fb      	adds	r3, r7, r3
     482:	0019      	movs	r1, r3
     484:	0010      	movs	r0, r2
     486:	4bc0      	ldr	r3, [pc, #768]	; (788 <_adc_set_config+0x34c>)
     488:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     48a:	231e      	movs	r3, #30
     48c:	0018      	movs	r0, r3
     48e:	4bbf      	ldr	r3, [pc, #764]	; (78c <_adc_set_config+0x350>)
     490:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     492:	687b      	ldr	r3, [r7, #4]
     494:	791b      	ldrb	r3, [r3, #4]
     496:	001a      	movs	r2, r3
     498:	230f      	movs	r3, #15
     49a:	18fb      	adds	r3, r7, r3
     49c:	781b      	ldrb	r3, [r3, #0]
     49e:	0011      	movs	r1, r2
     4a0:	0018      	movs	r0, r3
     4a2:	4bbb      	ldr	r3, [pc, #748]	; (790 <_adc_set_config+0x354>)
     4a4:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	88db      	ldrh	r3, [r3, #6]
     4aa:	001a      	movs	r2, r3
     4ac:	230f      	movs	r3, #15
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	0011      	movs	r1, r2
     4b4:	0018      	movs	r0, r3
     4b6:	4bb6      	ldr	r3, [pc, #728]	; (790 <_adc_set_config+0x354>)
     4b8:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     4ba:	231e      	movs	r3, #30
     4bc:	18fb      	adds	r3, r7, r3
     4be:	2200      	movs	r2, #0
     4c0:	701a      	strb	r2, [r3, #0]
     4c2:	e01a      	b.n	4fa <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	691b      	ldr	r3, [r3, #16]
     4c8:	221e      	movs	r2, #30
     4ca:	18ba      	adds	r2, r7, r2
     4cc:	7812      	ldrb	r2, [r2, #0]
     4ce:	2101      	movs	r1, #1
     4d0:	4091      	lsls	r1, r2
     4d2:	000a      	movs	r2, r1
     4d4:	4013      	ands	r3, r2
     4d6:	d009      	beq.n	4ec <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     4d8:	231e      	movs	r3, #30
     4da:	18fb      	adds	r3, r7, r3
     4dc:	781a      	ldrb	r2, [r3, #0]
     4de:	230f      	movs	r3, #15
     4e0:	18fb      	adds	r3, r7, r3
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	0011      	movs	r1, r2
     4e6:	0018      	movs	r0, r3
     4e8:	4ba9      	ldr	r3, [pc, #676]	; (790 <_adc_set_config+0x354>)
     4ea:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     4ec:	231e      	movs	r3, #30
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	781a      	ldrb	r2, [r3, #0]
     4f2:	231e      	movs	r3, #30
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	3201      	adds	r2, #1
     4f8:	701a      	strb	r2, [r3, #0]
     4fa:	231e      	movs	r3, #30
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	2213      	movs	r2, #19
     502:	4293      	cmp	r3, r2
     504:	d9de      	bls.n	4c4 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     506:	687b      	ldr	r3, [r7, #4]
     508:	7b5b      	ldrb	r3, [r3, #13]
     50a:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     50c:	b25a      	sxtb	r2, r3
     50e:	687b      	ldr	r3, [r7, #4]
     510:	7b9b      	ldrb	r3, [r3, #14]
     512:	01db      	lsls	r3, r3, #7
     514:	b25b      	sxtb	r3, r3
     516:	4313      	orrs	r3, r2
     518:	b25b      	sxtb	r3, r3
     51a:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     51c:	69bb      	ldr	r3, [r7, #24]
     51e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     520:	687b      	ldr	r3, [r7, #4]
     522:	7d1b      	ldrb	r3, [r3, #20]
     524:	01db      	lsls	r3, r3, #7
			| (config->reference);
     526:	b25a      	sxtb	r2, r3
     528:	687b      	ldr	r3, [r7, #4]
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	b25b      	sxtb	r3, r3
     52e:	4313      	orrs	r3, r2
     530:	b25b      	sxtb	r3, r3
     532:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     534:	69bb      	ldr	r3, [r7, #24]
     536:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     538:	687b      	ldr	r3, [r7, #4]
     53a:	78db      	ldrb	r3, [r3, #3]
     53c:	2b34      	cmp	r3, #52	; 0x34
     53e:	d846      	bhi.n	5ce <_adc_set_config+0x192>
     540:	009a      	lsls	r2, r3, #2
     542:	4b94      	ldr	r3, [pc, #592]	; (794 <_adc_set_config+0x358>)
     544:	18d3      	adds	r3, r2, r3
     546:	681b      	ldr	r3, [r3, #0]
     548:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     54a:	2327      	movs	r3, #39	; 0x27
     54c:	18fb      	adds	r3, r7, r3
     54e:	687a      	ldr	r2, [r7, #4]
     550:	7a52      	ldrb	r2, [r2, #9]
     552:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     554:	231f      	movs	r3, #31
     556:	18fb      	adds	r3, r7, r3
     558:	687a      	ldr	r2, [r7, #4]
     55a:	7a12      	ldrb	r2, [r2, #8]
     55c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     55e:	2310      	movs	r3, #16
     560:	623b      	str	r3, [r7, #32]
		break;
     562:	e036      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     564:	2327      	movs	r3, #39	; 0x27
     566:	18fb      	adds	r3, r7, r3
     568:	2201      	movs	r2, #1
     56a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     56c:	231f      	movs	r3, #31
     56e:	18fb      	adds	r3, r7, r3
     570:	2202      	movs	r2, #2
     572:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     574:	2310      	movs	r3, #16
     576:	623b      	str	r3, [r7, #32]
		break;
     578:	e02b      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     57a:	2327      	movs	r3, #39	; 0x27
     57c:	18fb      	adds	r3, r7, r3
     57e:	2202      	movs	r2, #2
     580:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     582:	231f      	movs	r3, #31
     584:	18fb      	adds	r3, r7, r3
     586:	2204      	movs	r2, #4
     588:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     58a:	2310      	movs	r3, #16
     58c:	623b      	str	r3, [r7, #32]
		break;
     58e:	e020      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     590:	2327      	movs	r3, #39	; 0x27
     592:	18fb      	adds	r3, r7, r3
     594:	2201      	movs	r2, #1
     596:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     598:	231f      	movs	r3, #31
     59a:	18fb      	adds	r3, r7, r3
     59c:	2206      	movs	r2, #6
     59e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5a0:	2310      	movs	r3, #16
     5a2:	623b      	str	r3, [r7, #32]
		break;
     5a4:	e015      	b.n	5d2 <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     5a6:	2327      	movs	r3, #39	; 0x27
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2200      	movs	r2, #0
     5ac:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     5ae:	231f      	movs	r3, #31
     5b0:	18fb      	adds	r3, r7, r3
     5b2:	2208      	movs	r2, #8
     5b4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5b6:	2310      	movs	r3, #16
     5b8:	623b      	str	r3, [r7, #32]
		break;
     5ba:	e00a      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     5bc:	2330      	movs	r3, #48	; 0x30
     5be:	623b      	str	r3, [r7, #32]
		break;
     5c0:	e007      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     5c2:	2320      	movs	r3, #32
     5c4:	623b      	str	r3, [r7, #32]
		break;
     5c6:	e004      	b.n	5d2 <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     5c8:	2300      	movs	r3, #0
     5ca:	623b      	str	r3, [r7, #32]
		break;
     5cc:	e001      	b.n	5d2 <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     5ce:	2317      	movs	r3, #23
     5d0:	e1a7      	b.n	922 <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     5d2:	2327      	movs	r3, #39	; 0x27
     5d4:	18fb      	adds	r3, r7, r3
     5d6:	781b      	ldrb	r3, [r3, #0]
     5d8:	011b      	lsls	r3, r3, #4
     5da:	b2db      	uxtb	r3, r3
     5dc:	2270      	movs	r2, #112	; 0x70
     5de:	4013      	ands	r3, r2
     5e0:	b2da      	uxtb	r2, r3
     5e2:	231f      	movs	r3, #31
     5e4:	18fb      	adds	r3, r7, r3
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	4313      	orrs	r3, r2
     5ea:	b2da      	uxtb	r2, r3
     5ec:	69bb      	ldr	r3, [r7, #24]
     5ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	68bb      	ldr	r3, [r7, #8]
     5f4:	0018      	movs	r0, r3
     5f6:	4b68      	ldr	r3, [pc, #416]	; (798 <_adc_set_config+0x35c>)
     5f8:	4798      	blx	r3
     5fa:	1e03      	subs	r3, r0, #0
     5fc:	d1f9      	bne.n	5f2 <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	7d5b      	ldrb	r3, [r3, #21]
     602:	2b3f      	cmp	r3, #63	; 0x3f
     604:	d901      	bls.n	60a <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     606:	2317      	movs	r3, #23
     608:	e18b      	b.n	922 <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	7d5b      	ldrb	r3, [r3, #21]
     60e:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     610:	687b      	ldr	r3, [r7, #4]
     612:	7bdb      	ldrb	r3, [r3, #15]
     614:	01db      	lsls	r3, r3, #7
     616:	b25b      	sxtb	r3, r3
     618:	4313      	orrs	r3, r2
     61a:	b25b      	sxtb	r3, r3
     61c:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     61e:	69bb      	ldr	r3, [r7, #24]
     620:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     622:	46c0      	nop			; (mov r8, r8)
     624:	68bb      	ldr	r3, [r7, #8]
     626:	0018      	movs	r0, r3
     628:	4b5b      	ldr	r3, [pc, #364]	; (798 <_adc_set_config+0x35c>)
     62a:	4798      	blx	r3
     62c:	1e03      	subs	r3, r0, #0
     62e:	d1f9      	bne.n	624 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     630:	687b      	ldr	r3, [r7, #4]
     632:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     634:	69bb      	ldr	r3, [r7, #24]
     636:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     638:	687b      	ldr	r3, [r7, #4]
     63a:	2224      	movs	r2, #36	; 0x24
     63c:	5c9b      	ldrb	r3, [r3, r2]
     63e:	b29b      	uxth	r3, r3
     640:	00db      	lsls	r3, r3, #3
     642:	b29a      	uxth	r2, r3
			resolution |
     644:	6a3b      	ldr	r3, [r7, #32]
     646:	b29b      	uxth	r3, r3
     648:	4313      	orrs	r3, r2
     64a:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	7b1b      	ldrb	r3, [r3, #12]
     650:	b29b      	uxth	r3, r3
     652:	009b      	lsls	r3, r3, #2
     654:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     656:	4313      	orrs	r3, r2
     658:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	7a9b      	ldrb	r3, [r3, #10]
     65e:	b29b      	uxth	r3, r3
     660:	18db      	adds	r3, r3, r3
     662:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     664:	4313      	orrs	r3, r2
     666:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	7adb      	ldrb	r3, [r3, #11]
     66c:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     66e:	4313      	orrs	r3, r2
     670:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     672:	69bb      	ldr	r3, [r7, #24]
     674:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	68bb      	ldr	r3, [r7, #8]
     67a:	0018      	movs	r0, r3
     67c:	4b46      	ldr	r3, [pc, #280]	; (798 <_adc_set_config+0x35c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     684:	687b      	ldr	r3, [r7, #4]
     686:	8b1b      	ldrh	r3, [r3, #24]
     688:	2b00      	cmp	r3, #0
     68a:	d100      	bne.n	68e <_adc_set_config+0x252>
     68c:	e0bf      	b.n	80e <_adc_set_config+0x3d2>
		switch (resolution) {
     68e:	6a3b      	ldr	r3, [r7, #32]
     690:	2b10      	cmp	r3, #16
     692:	d100      	bne.n	696 <_adc_set_config+0x25a>
     694:	e08e      	b.n	7b4 <_adc_set_config+0x378>
     696:	d802      	bhi.n	69e <_adc_set_config+0x262>
     698:	2b00      	cmp	r3, #0
     69a:	d04d      	beq.n	738 <_adc_set_config+0x2fc>
     69c:	e0b7      	b.n	80e <_adc_set_config+0x3d2>
     69e:	2b20      	cmp	r3, #32
     6a0:	d023      	beq.n	6ea <_adc_set_config+0x2ae>
     6a2:	2b30      	cmp	r3, #48	; 0x30
     6a4:	d000      	beq.n	6a8 <_adc_set_config+0x26c>
     6a6:	e0b2      	b.n	80e <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	7adb      	ldrb	r3, [r3, #11]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d011      	beq.n	6d4 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6b4:	2b7f      	cmp	r3, #127	; 0x7f
     6b6:	dc0b      	bgt.n	6d0 <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     6bc:	3380      	adds	r3, #128	; 0x80
     6be:	db07      	blt.n	6d0 <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     6c4:	2b7f      	cmp	r3, #127	; 0x7f
     6c6:	dc03      	bgt.n	6d0 <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     6cc:	3380      	adds	r3, #128	; 0x80
     6ce:	da01      	bge.n	6d4 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6d0:	2317      	movs	r3, #23
     6d2:	e126      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	69db      	ldr	r3, [r3, #28]
     6d8:	2bff      	cmp	r3, #255	; 0xff
     6da:	dc04      	bgt.n	6e6 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     6e0:	2bff      	cmp	r3, #255	; 0xff
     6e2:	dc00      	bgt.n	6e6 <_adc_set_config+0x2aa>
     6e4:	e08c      	b.n	800 <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6e6:	2317      	movs	r3, #23
     6e8:	e11b      	b.n	922 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	7adb      	ldrb	r3, [r3, #11]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d015      	beq.n	71e <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6f6:	4a29      	ldr	r2, [pc, #164]	; (79c <_adc_set_config+0x360>)
     6f8:	4293      	cmp	r3, r2
     6fa:	dc0e      	bgt.n	71a <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     700:	4a27      	ldr	r2, [pc, #156]	; (7a0 <_adc_set_config+0x364>)
     702:	4293      	cmp	r3, r2
     704:	db09      	blt.n	71a <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     706:	687b      	ldr	r3, [r7, #4]
     708:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     70a:	4a24      	ldr	r2, [pc, #144]	; (79c <_adc_set_config+0x360>)
     70c:	4293      	cmp	r3, r2
     70e:	dc04      	bgt.n	71a <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     710:	687b      	ldr	r3, [r7, #4]
     712:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     714:	4a22      	ldr	r2, [pc, #136]	; (7a0 <_adc_set_config+0x364>)
     716:	4293      	cmp	r3, r2
     718:	da01      	bge.n	71e <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     71a:	2317      	movs	r3, #23
     71c:	e101      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     71e:	687b      	ldr	r3, [r7, #4]
     720:	69db      	ldr	r3, [r3, #28]
     722:	4a20      	ldr	r2, [pc, #128]	; (7a4 <_adc_set_config+0x368>)
     724:	4293      	cmp	r3, r2
     726:	dc05      	bgt.n	734 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     728:	687b      	ldr	r3, [r7, #4]
     72a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     72c:	4a1d      	ldr	r2, [pc, #116]	; (7a4 <_adc_set_config+0x368>)
     72e:	4293      	cmp	r3, r2
     730:	dc00      	bgt.n	734 <_adc_set_config+0x2f8>
     732:	e067      	b.n	804 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     734:	2317      	movs	r3, #23
     736:	e0f4      	b.n	922 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     738:	687b      	ldr	r3, [r7, #4]
     73a:	7adb      	ldrb	r3, [r3, #11]
     73c:	2b00      	cmp	r3, #0
     73e:	d015      	beq.n	76c <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     740:	687b      	ldr	r3, [r7, #4]
     742:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     744:	4a18      	ldr	r2, [pc, #96]	; (7a8 <_adc_set_config+0x36c>)
     746:	4293      	cmp	r3, r2
     748:	dc0e      	bgt.n	768 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     74e:	4a17      	ldr	r2, [pc, #92]	; (7ac <_adc_set_config+0x370>)
     750:	4293      	cmp	r3, r2
     752:	db09      	blt.n	768 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     754:	687b      	ldr	r3, [r7, #4]
     756:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     758:	4a13      	ldr	r2, [pc, #76]	; (7a8 <_adc_set_config+0x36c>)
     75a:	4293      	cmp	r3, r2
     75c:	dc04      	bgt.n	768 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     75e:	687b      	ldr	r3, [r7, #4]
     760:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     762:	4a12      	ldr	r2, [pc, #72]	; (7ac <_adc_set_config+0x370>)
     764:	4293      	cmp	r3, r2
     766:	da01      	bge.n	76c <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     768:	2317      	movs	r3, #23
     76a:	e0da      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	69db      	ldr	r3, [r3, #28]
     770:	4a0f      	ldr	r2, [pc, #60]	; (7b0 <_adc_set_config+0x374>)
     772:	4293      	cmp	r3, r2
     774:	dc04      	bgt.n	780 <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     776:	687b      	ldr	r3, [r7, #4]
     778:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     77a:	4a0d      	ldr	r2, [pc, #52]	; (7b0 <_adc_set_config+0x374>)
     77c:	4293      	cmp	r3, r2
     77e:	dd43      	ble.n	808 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     780:	2317      	movs	r3, #23
     782:	e0ce      	b.n	922 <_adc_set_config+0x4e6>
     784:	000001a9 	.word	0x000001a9
     788:	00002451 	.word	0x00002451
     78c:	00002491 	.word	0x00002491
     790:	000003bd 	.word	0x000003bd
     794:	00005f64 	.word	0x00005f64
     798:	000002a5 	.word	0x000002a5
     79c:	000001ff 	.word	0x000001ff
     7a0:	fffffe00 	.word	0xfffffe00
     7a4:	000003ff 	.word	0x000003ff
     7a8:	000007ff 	.word	0x000007ff
     7ac:	fffff800 	.word	0xfffff800
     7b0:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	7adb      	ldrb	r3, [r3, #11]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d015      	beq.n	7e8 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     7c0:	4a5a      	ldr	r2, [pc, #360]	; (92c <_adc_set_config+0x4f0>)
     7c2:	4293      	cmp	r3, r2
     7c4:	dc0e      	bgt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     7ca:	4a59      	ldr	r2, [pc, #356]	; (930 <_adc_set_config+0x4f4>)
     7cc:	4293      	cmp	r3, r2
     7ce:	db09      	blt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     7d4:	4a55      	ldr	r2, [pc, #340]	; (92c <_adc_set_config+0x4f0>)
     7d6:	4293      	cmp	r3, r2
     7d8:	dc04      	bgt.n	7e4 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     7de:	4a54      	ldr	r2, [pc, #336]	; (930 <_adc_set_config+0x4f4>)
     7e0:	4293      	cmp	r3, r2
     7e2:	da01      	bge.n	7e8 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7e4:	2317      	movs	r3, #23
     7e6:	e09c      	b.n	922 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	69db      	ldr	r3, [r3, #28]
     7ec:	4a51      	ldr	r2, [pc, #324]	; (934 <_adc_set_config+0x4f8>)
     7ee:	4293      	cmp	r3, r2
     7f0:	dc04      	bgt.n	7fc <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     7f6:	4a4f      	ldr	r2, [pc, #316]	; (934 <_adc_set_config+0x4f8>)
     7f8:	4293      	cmp	r3, r2
     7fa:	dd07      	ble.n	80c <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7fc:	2317      	movs	r3, #23
     7fe:	e090      	b.n	922 <_adc_set_config+0x4e6>
			break;
     800:	46c0      	nop			; (mov r8, r8)
     802:	e004      	b.n	80e <_adc_set_config+0x3d2>
			break;
     804:	46c0      	nop			; (mov r8, r8)
     806:	e002      	b.n	80e <_adc_set_config+0x3d2>
			break;
     808:	46c0      	nop			; (mov r8, r8)
     80a:	e000      	b.n	80e <_adc_set_config+0x3d2>
			}
			break;
     80c:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     80e:	69bb      	ldr	r3, [r7, #24]
     810:	895b      	ldrh	r3, [r3, #10]
     812:	b29a      	uxth	r2, r3
     814:	687b      	ldr	r3, [r7, #4]
     816:	8b1b      	ldrh	r3, [r3, #24]
     818:	4313      	orrs	r3, r2
     81a:	b29a      	uxth	r2, r3
     81c:	69bb      	ldr	r3, [r7, #24]
     81e:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     820:	46c0      	nop			; (mov r8, r8)
     822:	68bb      	ldr	r3, [r7, #8]
     824:	0018      	movs	r0, r3
     826:	4b44      	ldr	r3, [pc, #272]	; (938 <_adc_set_config+0x4fc>)
     828:	4798      	blx	r3
     82a:	1e03      	subs	r3, r0, #0
     82c:	d1f9      	bne.n	822 <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     82e:	687b      	ldr	r3, [r7, #4]
     830:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     832:	b29a      	uxth	r2, r3
     834:	69bb      	ldr	r3, [r7, #24]
     836:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     838:	46c0      	nop			; (mov r8, r8)
     83a:	68bb      	ldr	r3, [r7, #8]
     83c:	0018      	movs	r0, r3
     83e:	4b3e      	ldr	r3, [pc, #248]	; (938 <_adc_set_config+0x4fc>)
     840:	4798      	blx	r3
     842:	1e03      	subs	r3, r0, #0
     844:	d1f9      	bne.n	83a <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     846:	687b      	ldr	r3, [r7, #4]
     848:	6a1b      	ldr	r3, [r3, #32]
     84a:	b29a      	uxth	r2, r3
     84c:	69bb      	ldr	r3, [r7, #24]
     84e:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     850:	46c0      	nop			; (mov r8, r8)
     852:	68bb      	ldr	r3, [r7, #8]
     854:	0018      	movs	r0, r3
     856:	4b38      	ldr	r3, [pc, #224]	; (938 <_adc_set_config+0x4fc>)
     858:	4798      	blx	r3
     85a:	1e03      	subs	r3, r0, #0
     85c:	d1f9      	bne.n	852 <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     85e:	687b      	ldr	r3, [r7, #4]
     860:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     862:	687b      	ldr	r3, [r7, #4]
     864:	791b      	ldrb	r3, [r3, #4]
     866:	b29b      	uxth	r3, r3
			config->negative_input |
     868:	4313      	orrs	r3, r2
     86a:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     870:	46c0      	nop			; (mov r8, r8)
     872:	68bb      	ldr	r3, [r7, #8]
     874:	0018      	movs	r0, r3
     876:	4b30      	ldr	r3, [pc, #192]	; (938 <_adc_set_config+0x4fc>)
     878:	4798      	blx	r3
     87a:	1e03      	subs	r3, r0, #0
     87c:	d1f9      	bne.n	872 <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	222a      	movs	r2, #42	; 0x2a
     882:	5c9a      	ldrb	r2, [r3, r2]
     884:	69bb      	ldr	r3, [r7, #24]
     886:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     888:	69bb      	ldr	r3, [r7, #24]
     88a:	2207      	movs	r2, #7
     88c:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     88e:	687b      	ldr	r3, [r7, #4]
     890:	2224      	movs	r2, #36	; 0x24
     892:	5c9b      	ldrb	r3, [r3, r2]
     894:	2b00      	cmp	r3, #0
     896:	d02c      	beq.n	8f2 <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     898:	687b      	ldr	r3, [r7, #4]
     89a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     89c:	4a27      	ldr	r2, [pc, #156]	; (93c <_adc_set_config+0x500>)
     89e:	4293      	cmp	r3, r2
     8a0:	d901      	bls.n	8a6 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     8a2:	2317      	movs	r3, #23
     8a4:	e03d      	b.n	922 <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     8aa:	69bb      	ldr	r3, [r7, #24]
     8ac:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	68bb      	ldr	r3, [r7, #8]
     8b2:	0018      	movs	r0, r3
     8b4:	4b20      	ldr	r3, [pc, #128]	; (938 <_adc_set_config+0x4fc>)
     8b6:	4798      	blx	r3
     8b8:	1e03      	subs	r3, r0, #0
     8ba:	d1f9      	bne.n	8b0 <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	2228      	movs	r2, #40	; 0x28
     8c0:	5e9b      	ldrsh	r3, [r3, r2]
     8c2:	4a1f      	ldr	r2, [pc, #124]	; (940 <_adc_set_config+0x504>)
     8c4:	4293      	cmp	r3, r2
     8c6:	dc05      	bgt.n	8d4 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	2228      	movs	r2, #40	; 0x28
     8cc:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     8ce:	4a1d      	ldr	r2, [pc, #116]	; (944 <_adc_set_config+0x508>)
     8d0:	4293      	cmp	r3, r2
     8d2:	da01      	bge.n	8d8 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     8d4:	2317      	movs	r3, #23
     8d6:	e024      	b.n	922 <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2228      	movs	r2, #40	; 0x28
     8dc:	5e9b      	ldrsh	r3, [r3, r2]
     8de:	b29a      	uxth	r2, r3
     8e0:	69bb      	ldr	r3, [r7, #24]
     8e2:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     8e4:	46c0      	nop			; (mov r8, r8)
     8e6:	68bb      	ldr	r3, [r7, #8]
     8e8:	0018      	movs	r0, r3
     8ea:	4b13      	ldr	r3, [pc, #76]	; (938 <_adc_set_config+0x4fc>)
     8ec:	4798      	blx	r3
     8ee:	1e03      	subs	r3, r0, #0
     8f0:	d1f9      	bne.n	8e6 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     8f2:	4b15      	ldr	r3, [pc, #84]	; (948 <_adc_set_config+0x50c>)
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	2200      	movs	r2, #0
     8f8:	40d3      	lsrs	r3, r2
     8fa:	b29b      	uxth	r3, r3
     8fc:	021b      	lsls	r3, r3, #8
     8fe:	b29a      	uxth	r2, r3
     900:	23e0      	movs	r3, #224	; 0xe0
     902:	00db      	lsls	r3, r3, #3
     904:	4013      	ands	r3, r2
     906:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     908:	4b0f      	ldr	r3, [pc, #60]	; (948 <_adc_set_config+0x50c>)
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	2103      	movs	r1, #3
     90e:	40cb      	lsrs	r3, r1
     910:	b29b      	uxth	r3, r3
     912:	2107      	movs	r1, #7
     914:	400b      	ands	r3, r1
     916:	b29b      	uxth	r3, r3
			) |
     918:	4313      	orrs	r3, r2
     91a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     91c:	69bb      	ldr	r3, [r7, #24]
     91e:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     920:	2300      	movs	r3, #0
}
     922:	0018      	movs	r0, r3
     924:	46bd      	mov	sp, r7
     926:	b00a      	add	sp, #40	; 0x28
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	00007fff 	.word	0x00007fff
     930:	ffff8000 	.word	0xffff8000
     934:	0000ffff 	.word	0x0000ffff
     938:	000002a5 	.word	0x000002a5
     93c:	00000fff 	.word	0x00000fff
     940:	000007ff 	.word	0x000007ff
     944:	fffff800 	.word	0xfffff800
     948:	00806020 	.word	0x00806020

0000094c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     94c:	b590      	push	{r4, r7, lr}
     94e:	b087      	sub	sp, #28
     950:	af00      	add	r7, sp, #0
     952:	60f8      	str	r0, [r7, #12]
     954:	60b9      	str	r1, [r7, #8]
     956:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     958:	2317      	movs	r3, #23
     95a:	18fc      	adds	r4, r7, r3
     95c:	68bb      	ldr	r3, [r7, #8]
     95e:	0018      	movs	r0, r3
     960:	4b1d      	ldr	r3, [pc, #116]	; (9d8 <adc_init+0x8c>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	68ba      	ldr	r2, [r7, #8]
     96c:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     96e:	2108      	movs	r1, #8
     970:	2003      	movs	r0, #3
     972:	4b1a      	ldr	r3, [pc, #104]	; (9dc <adc_init+0x90>)
     974:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     976:	68bb      	ldr	r3, [r7, #8]
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	b2db      	uxtb	r3, r3
     97c:	001a      	movs	r2, r3
     97e:	2301      	movs	r3, #1
     980:	4013      	ands	r3, r2
     982:	d001      	beq.n	988 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     984:	2305      	movs	r3, #5
     986:	e023      	b.n	9d0 <adc_init+0x84>
	}

	while (adc_is_syncing(module_inst)) {
     988:	46c0      	nop			; (mov r8, r8)
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	0018      	movs	r0, r3
     98e:	4b14      	ldr	r3, [pc, #80]	; (9e0 <adc_init+0x94>)
     990:	4798      	blx	r3
     992:	1e03      	subs	r3, r0, #0
     994:	d1f9      	bne.n	98a <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     996:	68bb      	ldr	r3, [r7, #8]
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	b2db      	uxtb	r3, r3
     99c:	001a      	movs	r2, r3
     99e:	2302      	movs	r3, #2
     9a0:	4013      	ands	r3, r2
     9a2:	d001      	beq.n	9a8 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     9a4:	231c      	movs	r3, #28
     9a6:	e013      	b.n	9d0 <adc_init+0x84>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	785a      	ldrb	r2, [r3, #1]
     9ac:	68fb      	ldr	r3, [r7, #12]
     9ae:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     9b0:	68fb      	ldr	r3, [r7, #12]
     9b2:	791b      	ldrb	r3, [r3, #4]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d102      	bne.n	9be <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     9b8:	2001      	movs	r0, #1
     9ba:	4b0a      	ldr	r3, [pc, #40]	; (9e4 <adc_init+0x98>)
     9bc:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     9be:	687a      	ldr	r2, [r7, #4]
     9c0:	68f9      	ldr	r1, [r7, #12]
     9c2:	2317      	movs	r3, #23
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	0018      	movs	r0, r3
     9ca:	4b07      	ldr	r3, [pc, #28]	; (9e8 <adc_init+0x9c>)
     9cc:	4798      	blx	r3
     9ce:	0003      	movs	r3, r0
}
     9d0:	0018      	movs	r0, r3
     9d2:	46bd      	mov	sp, r7
     9d4:	b007      	add	sp, #28
     9d6:	bd90      	pop	{r4, r7, pc}
     9d8:	000002cd 	.word	0x000002cd
     9dc:	000001c1 	.word	0x000001c1
     9e0:	000002a5 	.word	0x000002a5
     9e4:	00000265 	.word	0x00000265
     9e8:	0000043d 	.word	0x0000043d

000009ec <system_ahb_clock_set_mask>:
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	6078      	str	r0, [r7, #4]
	MCLK->AHBMASK.reg |= ahb_mask;
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <system_ahb_clock_set_mask+0x1c>)
     9f6:	4a04      	ldr	r2, [pc, #16]	; (a08 <system_ahb_clock_set_mask+0x1c>)
     9f8:	6911      	ldr	r1, [r2, #16]
     9fa:	687a      	ldr	r2, [r7, #4]
     9fc:	430a      	orrs	r2, r1
     9fe:	611a      	str	r2, [r3, #16]
}
     a00:	46c0      	nop			; (mov r8, r8)
     a02:	46bd      	mov	sp, r7
     a04:	b002      	add	sp, #8
     a06:	bd80      	pop	{r7, pc}
     a08:	40000400 	.word	0x40000400

00000a0c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     a10:	4b02      	ldr	r3, [pc, #8]	; (a1c <system_interrupt_enter_critical_section+0x10>)
     a12:	4798      	blx	r3
}
     a14:	46c0      	nop			; (mov r8, r8)
     a16:	46bd      	mov	sp, r7
     a18:	bd80      	pop	{r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000115 	.word	0x00000115

00000a20 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     a20:	b580      	push	{r7, lr}
     a22:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     a24:	4b02      	ldr	r3, [pc, #8]	; (a30 <system_interrupt_leave_critical_section+0x10>)
     a26:	4798      	blx	r3
}
     a28:	46c0      	nop			; (mov r8, r8)
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	00000169 	.word	0x00000169

00000a34 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	0002      	movs	r2, r0
     a3c:	1dfb      	adds	r3, r7, #7
     a3e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a40:	4b06      	ldr	r3, [pc, #24]	; (a5c <system_interrupt_enable+0x28>)
     a42:	1dfa      	adds	r2, r7, #7
     a44:	7812      	ldrb	r2, [r2, #0]
     a46:	0011      	movs	r1, r2
     a48:	221f      	movs	r2, #31
     a4a:	400a      	ands	r2, r1
     a4c:	2101      	movs	r1, #1
     a4e:	4091      	lsls	r1, r2
     a50:	000a      	movs	r2, r1
     a52:	601a      	str	r2, [r3, #0]
}
     a54:	46c0      	nop			; (mov r8, r8)
     a56:	46bd      	mov	sp, r7
     a58:	b002      	add	sp, #8
     a5a:	bd80      	pop	{r7, pc}
     a5c:	e000e100 	.word	0xe000e100

00000a60 <_dma_find_first_free_channel_and_allocate>:
 * \return Status of channel allocation.
 * \retval DMA_INVALID_CHANNEL  No channel available
 * \retval count          Allocated channel for the DMA resource
 */
static uint8_t _dma_find_first_free_channel_and_allocate(void)
{
     a60:	b580      	push	{r7, lr}
     a62:	b084      	sub	sp, #16
     a64:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
     a66:	1dfb      	adds	r3, r7, #7
     a68:	2200      	movs	r2, #0
     a6a:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
     a6c:	4b21      	ldr	r3, [pc, #132]	; (af4 <_dma_find_first_free_channel_and_allocate+0x94>)
     a6e:	4798      	blx	r3

	tmp = _dma_inst.allocated_channels;
     a70:	4b21      	ldr	r3, [pc, #132]	; (af8 <_dma_find_first_free_channel_and_allocate+0x98>)
     a72:	685b      	ldr	r3, [r3, #4]
     a74:	60bb      	str	r3, [r7, #8]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     a76:	230f      	movs	r3, #15
     a78:	18fb      	adds	r3, r7, r3
     a7a:	2200      	movs	r2, #0
     a7c:	701a      	strb	r2, [r3, #0]
     a7e:	e022      	b.n	ac6 <_dma_find_first_free_channel_and_allocate+0x66>
		if (!(tmp & 0x00000001)) {
     a80:	68bb      	ldr	r3, [r7, #8]
     a82:	2201      	movs	r2, #1
     a84:	4013      	ands	r3, r2
     a86:	d114      	bne.n	ab2 <_dma_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
     a88:	4b1b      	ldr	r3, [pc, #108]	; (af8 <_dma_find_first_free_channel_and_allocate+0x98>)
     a8a:	685b      	ldr	r3, [r3, #4]
     a8c:	220f      	movs	r2, #15
     a8e:	18ba      	adds	r2, r7, r2
     a90:	7812      	ldrb	r2, [r2, #0]
     a92:	2101      	movs	r1, #1
     a94:	4091      	lsls	r1, r2
     a96:	000a      	movs	r2, r1
     a98:	431a      	orrs	r2, r3
     a9a:	4b17      	ldr	r3, [pc, #92]	; (af8 <_dma_find_first_free_channel_and_allocate+0x98>)
     a9c:	605a      	str	r2, [r3, #4]
			_dma_inst.free_channels--;
     a9e:	4b16      	ldr	r3, [pc, #88]	; (af8 <_dma_find_first_free_channel_and_allocate+0x98>)
     aa0:	7a1b      	ldrb	r3, [r3, #8]
     aa2:	3b01      	subs	r3, #1
     aa4:	b2da      	uxtb	r2, r3
     aa6:	4b14      	ldr	r3, [pc, #80]	; (af8 <_dma_find_first_free_channel_and_allocate+0x98>)
     aa8:	721a      	strb	r2, [r3, #8]
			allocated = true;
     aaa:	1dfb      	adds	r3, r7, #7
     aac:	2201      	movs	r2, #1
     aae:	701a      	strb	r2, [r3, #0]

			break;
     ab0:	e00e      	b.n	ad0 <_dma_find_first_free_channel_and_allocate+0x70>
		}

		tmp = tmp >> 1;
     ab2:	68bb      	ldr	r3, [r7, #8]
     ab4:	085b      	lsrs	r3, r3, #1
     ab6:	60bb      	str	r3, [r7, #8]
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     ab8:	230f      	movs	r3, #15
     aba:	18fb      	adds	r3, r7, r3
     abc:	220f      	movs	r2, #15
     abe:	18ba      	adds	r2, r7, r2
     ac0:	7812      	ldrb	r2, [r2, #0]
     ac2:	3201      	adds	r2, #1
     ac4:	701a      	strb	r2, [r3, #0]
     ac6:	230f      	movs	r3, #15
     ac8:	18fb      	adds	r3, r7, r3
     aca:	781b      	ldrb	r3, [r3, #0]
     acc:	2b04      	cmp	r3, #4
     ace:	d9d7      	bls.n	a80 <_dma_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
     ad0:	4b0a      	ldr	r3, [pc, #40]	; (afc <_dma_find_first_free_channel_and_allocate+0x9c>)
     ad2:	4798      	blx	r3

	if (!allocated) {
     ad4:	1dfb      	adds	r3, r7, #7
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	2201      	movs	r2, #1
     ada:	4053      	eors	r3, r2
     adc:	b2db      	uxtb	r3, r3
     ade:	2b00      	cmp	r3, #0
     ae0:	d001      	beq.n	ae6 <_dma_find_first_free_channel_and_allocate+0x86>
		return DMA_INVALID_CHANNEL;
     ae2:	23ff      	movs	r3, #255	; 0xff
     ae4:	e002      	b.n	aec <_dma_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
     ae6:	230f      	movs	r3, #15
     ae8:	18fb      	adds	r3, r7, r3
     aea:	781b      	ldrb	r3, [r3, #0]
	}
}
     aec:	0018      	movs	r0, r3
     aee:	46bd      	mov	sp, r7
     af0:	b004      	add	sp, #16
     af2:	bd80      	pop	{r7, pc}
     af4:	00000a0d 	.word	0x00000a0d
     af8:	20000004 	.word	0x20000004
     afc:	00000a21 	.word	0x00000a21

00000b00 <_dma_set_config>:
 * \param[out] resource_config Configurations of the DMA resource
 *
 */
static void _dma_set_config(struct dma_resource *resource,
		struct dma_resource_config *resource_config)
{
     b00:	b580      	push	{r7, lr}
     b02:	b084      	sub	sp, #16
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
     b08:	6039      	str	r1, [r7, #0]
	Assert(resource);
	Assert(resource_config);
	uint32_t temp_CHCTRLB_reg;
	system_interrupt_enter_critical_section();
     b0a:	4b25      	ldr	r3, [pc, #148]	; (ba0 <_dma_set_config+0xa0>)
     b0c:	4798      	blx	r3

	/** Select the DMA channel and clear software trigger */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     b0e:	4a25      	ldr	r2, [pc, #148]	; (ba4 <_dma_set_config+0xa4>)
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	210f      	movs	r1, #15
     b16:	400b      	ands	r3, r1
     b18:	b2d9      	uxtb	r1, r3
     b1a:	233f      	movs	r3, #63	; 0x3f
     b1c:	54d1      	strb	r1, [r2, r3]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     b1e:	4b21      	ldr	r3, [pc, #132]	; (ba4 <_dma_set_config+0xa4>)
     b20:	4a20      	ldr	r2, [pc, #128]	; (ba4 <_dma_set_config+0xa4>)
     b22:	6912      	ldr	r2, [r2, #16]
     b24:	6879      	ldr	r1, [r7, #4]
     b26:	7809      	ldrb	r1, [r1, #0]
     b28:	0008      	movs	r0, r1
     b2a:	2101      	movs	r1, #1
     b2c:	4081      	lsls	r1, r0
     b2e:	43c9      	mvns	r1, r1
     b30:	400a      	ands	r2, r1
     b32:	611a      	str	r2, [r3, #16]

	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     b34:	683b      	ldr	r3, [r7, #0]
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	015b      	lsls	r3, r3, #5
     b3a:	001a      	movs	r2, r3
     b3c:	2360      	movs	r3, #96	; 0x60
     b3e:	401a      	ands	r2, r3
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	785b      	ldrb	r3, [r3, #1]
     b44:	021b      	lsls	r3, r3, #8
     b46:	0019      	movs	r1, r3
     b48:	23fc      	movs	r3, #252	; 0xfc
     b4a:	019b      	lsls	r3, r3, #6
     b4c:	400b      	ands	r3, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     b4e:	431a      	orrs	r2, r3
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     b50:	683b      	ldr	r3, [r7, #0]
     b52:	789b      	ldrb	r3, [r3, #2]
     b54:	059b      	lsls	r3, r3, #22
     b56:	0019      	movs	r1, r3
     b58:	23c0      	movs	r3, #192	; 0xc0
     b5a:	041b      	lsls	r3, r3, #16
     b5c:	400b      	ands	r3, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     b5e:	4313      	orrs	r3, r2
     b60:	60fb      	str	r3, [r7, #12]


	if(resource_config->event_config.input_action){
     b62:	683b      	ldr	r3, [r7, #0]
     b64:	791b      	ldrb	r3, [r3, #4]
     b66:	2b00      	cmp	r3, #0
     b68:	d009      	beq.n	b7e <_dma_set_config+0x7e>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     b6a:	683b      	ldr	r3, [r7, #0]
     b6c:	791b      	ldrb	r3, [r3, #4]
     b6e:	001a      	movs	r2, r3
     b70:	2307      	movs	r3, #7
     b72:	401a      	ands	r2, r3
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	4313      	orrs	r3, r2
     b78:	2208      	movs	r2, #8
     b7a:	4313      	orrs	r3, r2
     b7c:	60fb      	str	r3, [r7, #12]
				resource_config->event_config.input_action);
	}

	/** Enable event output, the event output selection is configured in
	 * each transfer descriptor  */
	if (resource_config->event_config.event_output_enable) {
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	795b      	ldrb	r3, [r3, #5]
     b82:	2b00      	cmp	r3, #0
     b84:	d003      	beq.n	b8e <_dma_set_config+0x8e>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     b86:	68fb      	ldr	r3, [r7, #12]
     b88:	2210      	movs	r2, #16
     b8a:	4313      	orrs	r3, r2
     b8c:	60fb      	str	r3, [r7, #12]
	}

	/* Write config to CTRLB register */
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     b8e:	4b05      	ldr	r3, [pc, #20]	; (ba4 <_dma_set_config+0xa4>)
     b90:	68fa      	ldr	r2, [r7, #12]
     b92:	645a      	str	r2, [r3, #68]	; 0x44



	system_interrupt_leave_critical_section();
     b94:	4b04      	ldr	r3, [pc, #16]	; (ba8 <_dma_set_config+0xa8>)
     b96:	4798      	blx	r3
}
     b98:	46c0      	nop			; (mov r8, r8)
     b9a:	46bd      	mov	sp, r7
     b9c:	b004      	add	sp, #16
     b9e:	bd80      	pop	{r7, pc}
     ba0:	00000a0d 	.word	0x00000a0d
     ba4:	44000400 	.word	0x44000400
     ba8:	00000a21 	.word	0x00000a21

00000bac <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     bac:	b580      	push	{r7, lr}
     bae:	b086      	sub	sp, #24
     bb0:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
     bb2:	4b49      	ldr	r3, [pc, #292]	; (cd8 <DMAC_Handler+0x12c>)
     bb4:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     bb6:	4b49      	ldr	r3, [pc, #292]	; (cdc <DMAC_Handler+0x130>)
     bb8:	8c1b      	ldrh	r3, [r3, #32]
     bba:	b29b      	uxth	r3, r3
     bbc:	b2da      	uxtb	r2, r3
     bbe:	2317      	movs	r3, #23
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	210f      	movs	r1, #15
     bc4:	400a      	ands	r2, r1
     bc6:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     bc8:	2317      	movs	r3, #23
     bca:	18fb      	adds	r3, r7, r3
     bcc:	781a      	ldrb	r2, [r3, #0]
     bce:	4b44      	ldr	r3, [pc, #272]	; (ce0 <DMAC_Handler+0x134>)
     bd0:	0092      	lsls	r2, r2, #2
     bd2:	58d3      	ldr	r3, [r2, r3]
     bd4:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     bd6:	4a41      	ldr	r2, [pc, #260]	; (cdc <DMAC_Handler+0x130>)
     bd8:	693b      	ldr	r3, [r7, #16]
     bda:	781b      	ldrb	r3, [r3, #0]
     bdc:	210f      	movs	r1, #15
     bde:	400b      	ands	r3, r1
     be0:	b2d9      	uxtb	r1, r3
     be2:	233f      	movs	r3, #63	; 0x3f
     be4:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
     be6:	493d      	ldr	r1, [pc, #244]	; (cdc <DMAC_Handler+0x130>)
     be8:	230f      	movs	r3, #15
     bea:	18fb      	adds	r3, r7, r3
     bec:	224e      	movs	r2, #78	; 0x4e
     bee:	5c8a      	ldrb	r2, [r1, r2]
     bf0:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     bf2:	693b      	ldr	r3, [r7, #16]
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	4a3b      	ldr	r2, [pc, #236]	; (ce4 <DMAC_Handler+0x138>)
     bf8:	011b      	lsls	r3, r3, #4
     bfa:	18d3      	adds	r3, r2, r3
     bfc:	3302      	adds	r3, #2
     bfe:	881b      	ldrh	r3, [r3, #0]
     c00:	b29b      	uxth	r3, r3
     c02:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     c04:	693b      	ldr	r3, [r7, #16]
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	4a37      	ldr	r2, [pc, #220]	; (ce8 <DMAC_Handler+0x13c>)
     c0a:	011b      	lsls	r3, r3, #4
     c0c:	18d3      	adds	r3, r2, r3
     c0e:	3302      	adds	r3, #2
     c10:	881b      	ldrh	r3, [r3, #0]
     c12:	b29b      	uxth	r3, r3
     c14:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
     c16:	68ba      	ldr	r2, [r7, #8]
     c18:	687b      	ldr	r3, [r7, #4]
     c1a:	1ad2      	subs	r2, r2, r3
     c1c:	693b      	ldr	r3, [r7, #16]
     c1e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     c20:	230f      	movs	r3, #15
     c22:	18fb      	adds	r3, r7, r3
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	2201      	movs	r2, #1
     c28:	4013      	ands	r3, r2
     c2a:	d016      	beq.n	c5a <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     c2c:	4a2b      	ldr	r2, [pc, #172]	; (cdc <DMAC_Handler+0x130>)
     c2e:	234e      	movs	r3, #78	; 0x4e
     c30:	2101      	movs	r1, #1
     c32:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     c34:	693b      	ldr	r3, [r7, #16]
     c36:	2210      	movs	r2, #16
     c38:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     c3a:	693b      	ldr	r3, [r7, #16]
     c3c:	7c1b      	ldrb	r3, [r3, #16]
     c3e:	001a      	movs	r2, r3
     c40:	2301      	movs	r3, #1
     c42:	4013      	ands	r3, r2
     c44:	d042      	beq.n	ccc <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     c46:	693b      	ldr	r3, [r7, #16]
     c48:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     c4a:	2b00      	cmp	r3, #0
     c4c:	d03e      	beq.n	ccc <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     c4e:	693b      	ldr	r3, [r7, #16]
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	693a      	ldr	r2, [r7, #16]
     c54:	0010      	movs	r0, r2
     c56:	4798      	blx	r3
     c58:	e038      	b.n	ccc <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     c5a:	230f      	movs	r3, #15
     c5c:	18fb      	adds	r3, r7, r3
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2202      	movs	r2, #2
     c62:	4013      	ands	r3, r2
     c64:	d016      	beq.n	c94 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     c66:	4a1d      	ldr	r2, [pc, #116]	; (cdc <DMAC_Handler+0x130>)
     c68:	234e      	movs	r3, #78	; 0x4e
     c6a:	2102      	movs	r1, #2
     c6c:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     c6e:	693b      	ldr	r3, [r7, #16]
     c70:	2200      	movs	r2, #0
     c72:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     c74:	693b      	ldr	r3, [r7, #16]
     c76:	7c1b      	ldrb	r3, [r3, #16]
     c78:	001a      	movs	r2, r3
     c7a:	2302      	movs	r3, #2
     c7c:	4013      	ands	r3, r2
     c7e:	d025      	beq.n	ccc <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     c80:	693b      	ldr	r3, [r7, #16]
     c82:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     c84:	2b00      	cmp	r3, #0
     c86:	d021      	beq.n	ccc <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     c88:	693b      	ldr	r3, [r7, #16]
     c8a:	689b      	ldr	r3, [r3, #8]
     c8c:	693a      	ldr	r2, [r7, #16]
     c8e:	0010      	movs	r0, r2
     c90:	4798      	blx	r3
     c92:	e01b      	b.n	ccc <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     c94:	230f      	movs	r3, #15
     c96:	18fb      	adds	r3, r7, r3
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2204      	movs	r2, #4
     c9c:	4013      	ands	r3, r2
     c9e:	d015      	beq.n	ccc <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     ca0:	4a0e      	ldr	r2, [pc, #56]	; (cdc <DMAC_Handler+0x130>)
     ca2:	234e      	movs	r3, #78	; 0x4e
     ca4:	2104      	movs	r1, #4
     ca6:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     ca8:	693b      	ldr	r3, [r7, #16]
     caa:	2206      	movs	r2, #6
     cac:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     cae:	693b      	ldr	r3, [r7, #16]
     cb0:	7c1b      	ldrb	r3, [r3, #16]
     cb2:	001a      	movs	r2, r3
     cb4:	2304      	movs	r3, #4
     cb6:	4013      	ands	r3, r2
     cb8:	d008      	beq.n	ccc <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     cba:	693b      	ldr	r3, [r7, #16]
     cbc:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     cbe:	2b00      	cmp	r3, #0
     cc0:	d004      	beq.n	ccc <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     cc2:	693b      	ldr	r3, [r7, #16]
     cc4:	68db      	ldr	r3, [r3, #12]
     cc6:	693a      	ldr	r2, [r7, #16]
     cc8:	0010      	movs	r0, r2
     cca:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
     ccc:	4b07      	ldr	r3, [pc, #28]	; (cec <DMAC_Handler+0x140>)
     cce:	4798      	blx	r3
}
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	46bd      	mov	sp, r7
     cd4:	b006      	add	sp, #24
     cd6:	bd80      	pop	{r7, pc}
     cd8:	00000a0d 	.word	0x00000a0d
     cdc:	44000400 	.word	0x44000400
     ce0:	20000044 	.word	0x20000044
     ce4:	30000000 	.word	0x30000000
     ce8:	30000050 	.word	0x30000050
     cec:	00000a21 	.word	0x00000a21

00000cf0 <dma_get_config_defaults>:
 *  \li DMA channel is disabled during sleep mode (if has the feature)
 * \param[out] config Pointer to the configuration
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
     cf0:	b580      	push	{r7, lr}
     cf2:	b082      	sub	sp, #8
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	2200      	movs	r2, #0
     cfc:	701a      	strb	r2, [r3, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	2200      	movs	r2, #0
     d02:	705a      	strb	r2, [r3, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	2203      	movs	r2, #3
     d08:	709a      	strb	r2, [r3, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	2200      	movs	r2, #0
     d0e:	711a      	strb	r2, [r3, #4]
	config->event_config.event_output_enable = false;
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	2200      	movs	r2, #0
     d14:	715a      	strb	r2, [r3, #5]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	2200      	movs	r2, #0
     d1a:	70da      	strb	r2, [r3, #3]
#endif
}
     d1c:	46c0      	nop			; (mov r8, r8)
     d1e:	46bd      	mov	sp, r7
     d20:	b002      	add	sp, #8
     d22:	bd80      	pop	{r7, pc}

00000d24 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     d24:	b590      	push	{r4, r7, lr}
     d26:	b085      	sub	sp, #20
     d28:	af00      	add	r7, sp, #0
     d2a:	6078      	str	r0, [r7, #4]
     d2c:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	system_interrupt_enter_critical_section();
     d2e:	4b3a      	ldr	r3, [pc, #232]	; (e18 <dma_allocate+0xf4>)
     d30:	4798      	blx	r3

	if (!_dma_inst._dma_init) {
     d32:	4b3a      	ldr	r3, [pc, #232]	; (e1c <dma_allocate+0xf8>)
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	b2db      	uxtb	r3, r3
     d38:	2201      	movs	r2, #1
     d3a:	4053      	eors	r3, r2
     d3c:	b2db      	uxtb	r3, r3
     d3e:	2b00      	cmp	r3, #0
     d40:	d01b      	beq.n	d7a <dma_allocate+0x56>
		/* Initialize clocks for DMA */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
		system_ahb_clock_set_mask(MCLK_AHBMASK_DMAC);
     d42:	2380      	movs	r3, #128	; 0x80
     d44:	011b      	lsls	r3, r3, #4
     d46:	0018      	movs	r0, r3
     d48:	4b35      	ldr	r3, [pc, #212]	; (e20 <dma_allocate+0xfc>)
     d4a:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     d4c:	4a35      	ldr	r2, [pc, #212]	; (e24 <dma_allocate+0x100>)
     d4e:	4b35      	ldr	r3, [pc, #212]	; (e24 <dma_allocate+0x100>)
     d50:	881b      	ldrh	r3, [r3, #0]
     d52:	b29b      	uxth	r3, r3
     d54:	2102      	movs	r1, #2
     d56:	438b      	bics	r3, r1
     d58:	b29b      	uxth	r3, r3
     d5a:	8013      	strh	r3, [r2, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     d5c:	4b31      	ldr	r3, [pc, #196]	; (e24 <dma_allocate+0x100>)
     d5e:	2201      	movs	r2, #1
     d60:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     d62:	4b30      	ldr	r3, [pc, #192]	; (e24 <dma_allocate+0x100>)
     d64:	4a30      	ldr	r2, [pc, #192]	; (e28 <dma_allocate+0x104>)
     d66:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     d68:	4b2e      	ldr	r3, [pc, #184]	; (e24 <dma_allocate+0x100>)
     d6a:	4a30      	ldr	r2, [pc, #192]	; (e2c <dma_allocate+0x108>)
     d6c:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     d6e:	4b2d      	ldr	r3, [pc, #180]	; (e24 <dma_allocate+0x100>)
     d70:	4a2f      	ldr	r2, [pc, #188]	; (e30 <dma_allocate+0x10c>)
     d72:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     d74:	4b29      	ldr	r3, [pc, #164]	; (e1c <dma_allocate+0xf8>)
     d76:	2201      	movs	r2, #1
     d78:	701a      	strb	r2, [r3, #0]
	}

	/* Find the proper channel */
	new_channel = _dma_find_first_free_channel_and_allocate();
     d7a:	230f      	movs	r3, #15
     d7c:	18fc      	adds	r4, r7, r3
     d7e:	4b2d      	ldr	r3, [pc, #180]	; (e34 <dma_allocate+0x110>)
     d80:	4798      	blx	r3
     d82:	0003      	movs	r3, r0
     d84:	7023      	strb	r3, [r4, #0]

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
     d86:	230f      	movs	r3, #15
     d88:	18fb      	adds	r3, r7, r3
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	2bff      	cmp	r3, #255	; 0xff
     d8e:	d103      	bne.n	d98 <dma_allocate+0x74>
		system_interrupt_leave_critical_section();
     d90:	4b29      	ldr	r3, [pc, #164]	; (e38 <dma_allocate+0x114>)
     d92:	4798      	blx	r3

		return STATUS_ERR_NOT_FOUND;
     d94:	2314      	movs	r3, #20
     d96:	e03b      	b.n	e10 <dma_allocate+0xec>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	220f      	movs	r2, #15
     d9c:	18ba      	adds	r2, r7, r2
     d9e:	7812      	ldrb	r2, [r2, #0]
     da0:	701a      	strb	r2, [r3, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     da2:	4a20      	ldr	r2, [pc, #128]	; (e24 <dma_allocate+0x100>)
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	210f      	movs	r1, #15
     daa:	400b      	ands	r3, r1
     dac:	b2d9      	uxtb	r1, r3
     dae:	233f      	movs	r3, #63	; 0x3f
     db0:	54d1      	strb	r1, [r2, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     db2:	4a1c      	ldr	r2, [pc, #112]	; (e24 <dma_allocate+0x100>)
     db4:	491b      	ldr	r1, [pc, #108]	; (e24 <dma_allocate+0x100>)
     db6:	2340      	movs	r3, #64	; 0x40
     db8:	5ccb      	ldrb	r3, [r1, r3]
     dba:	b2db      	uxtb	r3, r3
     dbc:	2102      	movs	r1, #2
     dbe:	438b      	bics	r3, r1
     dc0:	b2d9      	uxtb	r1, r3
     dc2:	2340      	movs	r3, #64	; 0x40
     dc4:	54d1      	strb	r1, [r2, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     dc6:	4a17      	ldr	r2, [pc, #92]	; (e24 <dma_allocate+0x100>)
     dc8:	2340      	movs	r3, #64	; 0x40
     dca:	2101      	movs	r1, #1
     dcc:	54d1      	strb	r1, [r2, r3]

#ifdef FEATURE_DMA_CHANNEL_STANDBY
	if(config->run_in_standby){
     dce:	683b      	ldr	r3, [r7, #0]
     dd0:	78db      	ldrb	r3, [r3, #3]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d009      	beq.n	dea <dma_allocate+0xc6>
		DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_RUNSTDBY;
     dd6:	4a13      	ldr	r2, [pc, #76]	; (e24 <dma_allocate+0x100>)
     dd8:	4912      	ldr	r1, [pc, #72]	; (e24 <dma_allocate+0x100>)
     dda:	2340      	movs	r3, #64	; 0x40
     ddc:	5ccb      	ldrb	r3, [r1, r3]
     dde:	b2db      	uxtb	r3, r3
     de0:	2140      	movs	r1, #64	; 0x40
     de2:	430b      	orrs	r3, r1
     de4:	b2d9      	uxtb	r1, r3
     de6:	2340      	movs	r3, #64	; 0x40
     de8:	54d1      	strb	r1, [r2, r3]
	}
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
     dea:	683a      	ldr	r2, [r7, #0]
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	0011      	movs	r1, r2
     df0:	0018      	movs	r0, r3
     df2:	4b12      	ldr	r3, [pc, #72]	; (e3c <dma_allocate+0x118>)
     df4:	4798      	blx	r3

	resource->descriptor = NULL;
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	2200      	movs	r2, #0
     dfa:	619a      	str	r2, [r3, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	781b      	ldrb	r3, [r3, #0]
     e00:	001a      	movs	r2, r3
     e02:	4b0f      	ldr	r3, [pc, #60]	; (e40 <dma_allocate+0x11c>)
     e04:	0092      	lsls	r2, r2, #2
     e06:	6879      	ldr	r1, [r7, #4]
     e08:	50d1      	str	r1, [r2, r3]

	system_interrupt_leave_critical_section();
     e0a:	4b0b      	ldr	r3, [pc, #44]	; (e38 <dma_allocate+0x114>)
     e0c:	4798      	blx	r3

	return STATUS_OK;
     e0e:	2300      	movs	r3, #0
}
     e10:	0018      	movs	r0, r3
     e12:	46bd      	mov	sp, r7
     e14:	b005      	add	sp, #20
     e16:	bd90      	pop	{r4, r7, pc}
     e18:	00000a0d 	.word	0x00000a0d
     e1c:	20000004 	.word	0x20000004
     e20:	000009ed 	.word	0x000009ed
     e24:	44000400 	.word	0x44000400
     e28:	30000000 	.word	0x30000000
     e2c:	30000050 	.word	0x30000050
     e30:	00000f02 	.word	0x00000f02
     e34:	00000a61 	.word	0x00000a61
     e38:	00000a21 	.word	0x00000a21
     e3c:	00000b01 	.word	0x00000b01
     e40:	20000044 	.word	0x20000044

00000e44 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     e44:	b580      	push	{r7, lr}
     e46:	b082      	sub	sp, #8
     e48:	af00      	add	r7, sp, #0
     e4a:	6078      	str	r0, [r7, #4]
	Assert(resource);
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();
     e4c:	4b24      	ldr	r3, [pc, #144]	; (ee0 <dma_start_transfer_job+0x9c>)
     e4e:	4798      	blx	r3

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	7c5b      	ldrb	r3, [r3, #17]
     e54:	b2db      	uxtb	r3, r3
     e56:	2b05      	cmp	r3, #5
     e58:	d103      	bne.n	e62 <dma_start_transfer_job+0x1e>
		system_interrupt_leave_critical_section();
     e5a:	4b22      	ldr	r3, [pc, #136]	; (ee4 <dma_start_transfer_job+0xa0>)
     e5c:	4798      	blx	r3
		return STATUS_BUSY;
     e5e:	2305      	movs	r3, #5
     e60:	e03a      	b.n	ed8 <dma_start_transfer_job+0x94>
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	699b      	ldr	r3, [r3, #24]
     e66:	885b      	ldrh	r3, [r3, #2]
     e68:	b29b      	uxth	r3, r3
     e6a:	2b00      	cmp	r3, #0
     e6c:	d103      	bne.n	e76 <dma_start_transfer_job+0x32>
		system_interrupt_leave_critical_section();
     e6e:	4b1d      	ldr	r3, [pc, #116]	; (ee4 <dma_start_transfer_job+0xa0>)
     e70:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
     e72:	2317      	movs	r3, #23
     e74:	e030      	b.n	ed8 <dma_start_transfer_job+0x94>
	}

	/* Enable DMA interrupt */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_DMA);
     e76:	2005      	movs	r0, #5
     e78:	4b1b      	ldr	r3, [pc, #108]	; (ee8 <dma_start_transfer_job+0xa4>)
     e7a:	4798      	blx	r3

	/* Set the interrupt flag */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     e7c:	4a1b      	ldr	r2, [pc, #108]	; (eec <dma_start_transfer_job+0xa8>)
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	210f      	movs	r1, #15
     e84:	400b      	ands	r3, r1
     e86:	b2d9      	uxtb	r1, r3
     e88:	233f      	movs	r3, #63	; 0x3f
     e8a:	54d1      	strb	r1, [r2, r3]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     e8c:	4a17      	ldr	r2, [pc, #92]	; (eec <dma_start_transfer_job+0xa8>)
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	0019      	movs	r1, r3
     e94:	4b16      	ldr	r3, [pc, #88]	; (ef0 <dma_start_transfer_job+0xac>)
     e96:	5c5b      	ldrb	r3, [r3, r1]
     e98:	2107      	movs	r1, #7
     e9a:	400b      	ands	r3, r1
     e9c:	b2d9      	uxtb	r1, r3
     e9e:	234d      	movs	r3, #77	; 0x4d
     ea0:	54d1      	strb	r1, [r2, r3]
	/* Set job status */
	resource->job_status = STATUS_BUSY;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	2205      	movs	r2, #5
     ea6:	745a      	strb	r2, [r3, #17]

	/* Set channel x descriptor 0 to the descriptor base address */
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	011a      	lsls	r2, r3, #4
     eae:	4b11      	ldr	r3, [pc, #68]	; (ef4 <dma_start_transfer_job+0xb0>)
     eb0:	18d0      	adds	r0, r2, r3
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	699b      	ldr	r3, [r3, #24]
     eb6:	2210      	movs	r2, #16
     eb8:	0019      	movs	r1, r3
     eba:	4b0f      	ldr	r3, [pc, #60]	; (ef8 <dma_start_transfer_job+0xb4>)
     ebc:	4798      	blx	r3
						sizeof(DmacDescriptor));

	/* Enable the transfer channel */
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     ebe:	4a0b      	ldr	r2, [pc, #44]	; (eec <dma_start_transfer_job+0xa8>)
     ec0:	490a      	ldr	r1, [pc, #40]	; (eec <dma_start_transfer_job+0xa8>)
     ec2:	2340      	movs	r3, #64	; 0x40
     ec4:	5ccb      	ldrb	r3, [r1, r3]
     ec6:	b2db      	uxtb	r3, r3
     ec8:	2102      	movs	r1, #2
     eca:	430b      	orrs	r3, r1
     ecc:	b2d9      	uxtb	r1, r3
     ece:	2340      	movs	r3, #64	; 0x40
     ed0:	54d1      	strb	r1, [r2, r3]

	system_interrupt_leave_critical_section();
     ed2:	4b04      	ldr	r3, [pc, #16]	; (ee4 <dma_start_transfer_job+0xa0>)
     ed4:	4798      	blx	r3

	return STATUS_OK;
     ed6:	2300      	movs	r3, #0
}
     ed8:	0018      	movs	r0, r3
     eda:	46bd      	mov	sp, r7
     edc:	b002      	add	sp, #8
     ede:	bd80      	pop	{r7, pc}
     ee0:	00000a0d 	.word	0x00000a0d
     ee4:	00000a21 	.word	0x00000a21
     ee8:	00000a35 	.word	0x00000a35
     eec:	44000400 	.word	0x44000400
     ef0:	20000058 	.word	0x20000058
     ef4:	30000000 	.word	0x30000000
     ef8:	00005edd 	.word	0x00005edd

00000efc <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
     f04:	6039      	str	r1, [r7, #0]
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     f06:	683b      	ldr	r3, [r7, #0]
     f08:	7819      	ldrb	r1, [r3, #0]
     f0a:	687a      	ldr	r2, [r7, #4]
     f0c:	8813      	ldrh	r3, [r2, #0]
     f0e:	1c08      	adds	r0, r1, #0
     f10:	2101      	movs	r1, #1
     f12:	4008      	ands	r0, r1
     f14:	2101      	movs	r1, #1
     f16:	438b      	bics	r3, r1
     f18:	1c19      	adds	r1, r3, #0
     f1a:	1c03      	adds	r3, r0, #0
     f1c:	430b      	orrs	r3, r1
     f1e:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     f20:	683b      	ldr	r3, [r7, #0]
     f22:	785b      	ldrb	r3, [r3, #1]
     f24:	1c1a      	adds	r2, r3, #0
     f26:	2303      	movs	r3, #3
     f28:	4013      	ands	r3, r2
     f2a:	b2d9      	uxtb	r1, r3
     f2c:	687a      	ldr	r2, [r7, #4]
     f2e:	8813      	ldrh	r3, [r2, #0]
     f30:	1c08      	adds	r0, r1, #0
     f32:	2103      	movs	r1, #3
     f34:	4001      	ands	r1, r0
     f36:	1848      	adds	r0, r1, r1
     f38:	2106      	movs	r1, #6
     f3a:	438b      	bics	r3, r1
     f3c:	1c19      	adds	r1, r3, #0
     f3e:	1c03      	adds	r3, r0, #0
     f40:	430b      	orrs	r3, r1
     f42:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     f44:	683b      	ldr	r3, [r7, #0]
     f46:	789b      	ldrb	r3, [r3, #2]
     f48:	1c1a      	adds	r2, r3, #0
     f4a:	2303      	movs	r3, #3
     f4c:	4013      	ands	r3, r2
     f4e:	b2d9      	uxtb	r1, r3
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	8813      	ldrh	r3, [r2, #0]
     f54:	1c08      	adds	r0, r1, #0
     f56:	2103      	movs	r1, #3
     f58:	4001      	ands	r1, r0
     f5a:	00c8      	lsls	r0, r1, #3
     f5c:	2118      	movs	r1, #24
     f5e:	438b      	bics	r3, r1
     f60:	1c19      	adds	r1, r3, #0
     f62:	1c03      	adds	r3, r0, #0
     f64:	430b      	orrs	r3, r1
     f66:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     f68:	683b      	ldr	r3, [r7, #0]
     f6a:	78db      	ldrb	r3, [r3, #3]
     f6c:	1c1a      	adds	r2, r3, #0
     f6e:	2303      	movs	r3, #3
     f70:	4013      	ands	r3, r2
     f72:	b2d9      	uxtb	r1, r3
     f74:	687a      	ldr	r2, [r7, #4]
     f76:	8813      	ldrh	r3, [r2, #0]
     f78:	1c08      	adds	r0, r1, #0
     f7a:	2103      	movs	r1, #3
     f7c:	4001      	ands	r1, r0
     f7e:	0208      	lsls	r0, r1, #8
     f80:	492b      	ldr	r1, [pc, #172]	; (1030 <dma_descriptor_create+0x134>)
     f82:	400b      	ands	r3, r1
     f84:	1c19      	adds	r1, r3, #0
     f86:	1c03      	adds	r3, r0, #0
     f88:	430b      	orrs	r3, r1
     f8a:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     f8c:	683b      	ldr	r3, [r7, #0]
     f8e:	7919      	ldrb	r1, [r3, #4]
     f90:	687a      	ldr	r2, [r7, #4]
     f92:	8813      	ldrh	r3, [r2, #0]
     f94:	1c08      	adds	r0, r1, #0
     f96:	2101      	movs	r1, #1
     f98:	4001      	ands	r1, r0
     f9a:	0288      	lsls	r0, r1, #10
     f9c:	4925      	ldr	r1, [pc, #148]	; (1034 <dma_descriptor_create+0x138>)
     f9e:	400b      	ands	r3, r1
     fa0:	1c19      	adds	r1, r3, #0
     fa2:	1c03      	adds	r3, r0, #0
     fa4:	430b      	orrs	r3, r1
     fa6:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	7959      	ldrb	r1, [r3, #5]
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	8813      	ldrh	r3, [r2, #0]
     fb0:	1c08      	adds	r0, r1, #0
     fb2:	2101      	movs	r1, #1
     fb4:	4001      	ands	r1, r0
     fb6:	02c8      	lsls	r0, r1, #11
     fb8:	491f      	ldr	r1, [pc, #124]	; (1038 <dma_descriptor_create+0x13c>)
     fba:	400b      	ands	r3, r1
     fbc:	1c19      	adds	r1, r3, #0
     fbe:	1c03      	adds	r3, r0, #0
     fc0:	430b      	orrs	r3, r1
     fc2:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     fc4:	683b      	ldr	r3, [r7, #0]
     fc6:	799b      	ldrb	r3, [r3, #6]
     fc8:	1c1a      	adds	r2, r3, #0
     fca:	2301      	movs	r3, #1
     fcc:	4013      	ands	r3, r2
     fce:	b2d9      	uxtb	r1, r3
     fd0:	687a      	ldr	r2, [r7, #4]
     fd2:	8813      	ldrh	r3, [r2, #0]
     fd4:	1c08      	adds	r0, r1, #0
     fd6:	2101      	movs	r1, #1
     fd8:	4001      	ands	r1, r0
     fda:	0308      	lsls	r0, r1, #12
     fdc:	4917      	ldr	r1, [pc, #92]	; (103c <dma_descriptor_create+0x140>)
     fde:	400b      	ands	r3, r1
     fe0:	1c19      	adds	r1, r3, #0
     fe2:	1c03      	adds	r3, r0, #0
     fe4:	430b      	orrs	r3, r1
     fe6:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     fe8:	683b      	ldr	r3, [r7, #0]
     fea:	79db      	ldrb	r3, [r3, #7]
     fec:	1c1a      	adds	r2, r3, #0
     fee:	2307      	movs	r3, #7
     ff0:	4013      	ands	r3, r2
     ff2:	b2d9      	uxtb	r1, r3
     ff4:	687a      	ldr	r2, [r7, #4]
     ff6:	8813      	ldrh	r3, [r2, #0]
     ff8:	0348      	lsls	r0, r1, #13
     ffa:	04db      	lsls	r3, r3, #19
     ffc:	0cdb      	lsrs	r3, r3, #19
     ffe:	1c19      	adds	r1, r3, #0
    1000:	1c03      	adds	r3, r0, #0
    1002:	430b      	orrs	r3, r1
    1004:	8013      	strh	r3, [r2, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    1006:	683b      	ldr	r3, [r7, #0]
    1008:	891a      	ldrh	r2, [r3, #8]
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	805a      	strh	r2, [r3, #2]
	descriptor->SRCADDR.reg = config->source_address;
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	68da      	ldr	r2, [r3, #12]
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	605a      	str	r2, [r3, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	691a      	ldr	r2, [r3, #16]
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	609a      	str	r2, [r3, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    101e:	683b      	ldr	r3, [r7, #0]
    1020:	695a      	ldr	r2, [r3, #20]
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	60da      	str	r2, [r3, #12]
}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	46bd      	mov	sp, r7
    102a:	b002      	add	sp, #8
    102c:	bd80      	pop	{r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	fffffcff 	.word	0xfffffcff
    1034:	fffffbff 	.word	0xfffffbff
    1038:	fffff7ff 	.word	0xfffff7ff
    103c:	ffffefff 	.word	0xffffefff

00001040 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
    1040:	b580      	push	{r7, lr}
    1042:	b084      	sub	sp, #16
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
    1048:	6039      	str	r1, [r7, #0]
	DmacDescriptor* desc = resource->descriptor;
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	699b      	ldr	r3, [r3, #24]
    104e:	60fb      	str	r3, [r7, #12]

	if (resource->job_status == STATUS_BUSY) {
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	7c5b      	ldrb	r3, [r3, #17]
    1054:	b2db      	uxtb	r3, r3
    1056:	2b05      	cmp	r3, #5
    1058:	d101      	bne.n	105e <dma_add_descriptor+0x1e>
		return STATUS_BUSY;
    105a:	2305      	movs	r3, #5
    105c:	e011      	b.n	1082 <dma_add_descriptor+0x42>
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    105e:	68fb      	ldr	r3, [r7, #12]
    1060:	2b00      	cmp	r3, #0
    1062:	d106      	bne.n	1072 <dma_add_descriptor+0x32>
		resource->descriptor = descriptor;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	683a      	ldr	r2, [r7, #0]
    1068:	619a      	str	r2, [r3, #24]
    106a:	e009      	b.n	1080 <dma_add_descriptor+0x40>
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    106c:	68fb      	ldr	r3, [r7, #12]
    106e:	68db      	ldr	r3, [r3, #12]
    1070:	60fb      	str	r3, [r7, #12]
		while(desc->DESCADDR.reg != 0) {
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	68db      	ldr	r3, [r3, #12]
    1076:	2b00      	cmp	r3, #0
    1078:	d1f8      	bne.n	106c <dma_add_descriptor+0x2c>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    107a:	683a      	ldr	r2, [r7, #0]
    107c:	68fb      	ldr	r3, [r7, #12]
    107e:	60da      	str	r2, [r3, #12]
	}

	return STATUS_OK;
    1080:	2300      	movs	r3, #0
}
    1082:	0018      	movs	r0, r3
    1084:	46bd      	mov	sp, r7
    1086:	b004      	add	sp, #16
    1088:	bd80      	pop	{r7, pc}

0000108a <system_pinmux_get_config_defaults>:
{
    108a:	b580      	push	{r7, lr}
    108c:	b082      	sub	sp, #8
    108e:	af00      	add	r7, sp, #0
    1090:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	2280      	movs	r2, #128	; 0x80
    1096:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	2200      	movs	r2, #0
    109c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	2201      	movs	r2, #1
    10a2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2200      	movs	r2, #0
    10a8:	70da      	strb	r2, [r3, #3]
}
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	46bd      	mov	sp, r7
    10ae:	b002      	add	sp, #8
    10b0:	bd80      	pop	{r7, pc}
	...

000010b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	b084      	sub	sp, #16
    10b8:	af00      	add	r7, sp, #0
    10ba:	0002      	movs	r2, r0
    10bc:	6039      	str	r1, [r7, #0]
    10be:	1dfb      	adds	r3, r7, #7
    10c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    10c2:	230c      	movs	r3, #12
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	0018      	movs	r0, r3
    10c8:	4b10      	ldr	r3, [pc, #64]	; (110c <port_pin_set_config+0x58>)
    10ca:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    10cc:	230c      	movs	r3, #12
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	2280      	movs	r2, #128	; 0x80
    10d2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    10d4:	683b      	ldr	r3, [r7, #0]
    10d6:	781a      	ldrb	r2, [r3, #0]
    10d8:	230c      	movs	r3, #12
    10da:	18fb      	adds	r3, r7, r3
    10dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	785a      	ldrb	r2, [r3, #1]
    10e2:	230c      	movs	r3, #12
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    10e8:	683b      	ldr	r3, [r7, #0]
    10ea:	789a      	ldrb	r2, [r3, #2]
    10ec:	230c      	movs	r3, #12
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    10f2:	230c      	movs	r3, #12
    10f4:	18fa      	adds	r2, r7, r3
    10f6:	1dfb      	adds	r3, r7, #7
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	0011      	movs	r1, r2
    10fc:	0018      	movs	r0, r3
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <port_pin_set_config+0x5c>)
    1100:	4798      	blx	r3
}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	46bd      	mov	sp, r7
    1106:	b004      	add	sp, #16
    1108:	bd80      	pop	{r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	0000108b 	.word	0x0000108b
    1110:	00002705 	.word	0x00002705

00001114 <system_gclk_chan_get_config_defaults>:
{
    1114:	b580      	push	{r7, lr}
    1116:	b082      	sub	sp, #8
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	2200      	movs	r2, #0
    1120:	701a      	strb	r2, [r3, #0]
}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	46bd      	mov	sp, r7
    1126:	b002      	add	sp, #8
    1128:	bd80      	pop	{r7, pc}

0000112a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    112a:	b5f0      	push	{r4, r5, r6, r7, lr}
    112c:	b08d      	sub	sp, #52	; 0x34
    112e:	af00      	add	r7, sp, #0
    1130:	60b8      	str	r0, [r7, #8]
    1132:	60f9      	str	r1, [r7, #12]
    1134:	603a      	str	r2, [r7, #0]
    1136:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1138:	2300      	movs	r3, #0
    113a:	2400      	movs	r4, #0
    113c:	623b      	str	r3, [r7, #32]
    113e:	627c      	str	r4, [r7, #36]	; 0x24
    1140:	2300      	movs	r3, #0
    1142:	2400      	movs	r4, #0
    1144:	61bb      	str	r3, [r7, #24]
    1146:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1148:	233f      	movs	r3, #63	; 0x3f
    114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    114c:	e053      	b.n	11f6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1150:	3b20      	subs	r3, #32
    1152:	2b00      	cmp	r3, #0
    1154:	db04      	blt.n	1160 <long_division+0x36>
    1156:	2201      	movs	r2, #1
    1158:	409a      	lsls	r2, r3
    115a:	0013      	movs	r3, r2
    115c:	617b      	str	r3, [r7, #20]
    115e:	e00b      	b.n	1178 <long_division+0x4e>
    1160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1162:	2220      	movs	r2, #32
    1164:	1ad3      	subs	r3, r2, r3
    1166:	2201      	movs	r2, #1
    1168:	40da      	lsrs	r2, r3
    116a:	0013      	movs	r3, r2
    116c:	2100      	movs	r1, #0
    116e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1170:	4091      	lsls	r1, r2
    1172:	000a      	movs	r2, r1
    1174:	4313      	orrs	r3, r2
    1176:	617b      	str	r3, [r7, #20]
    1178:	2201      	movs	r2, #1
    117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    117c:	409a      	lsls	r2, r3
    117e:	0013      	movs	r3, r2
    1180:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1182:	69bb      	ldr	r3, [r7, #24]
    1184:	69fc      	ldr	r4, [r7, #28]
    1186:	18db      	adds	r3, r3, r3
    1188:	4164      	adcs	r4, r4
    118a:	61bb      	str	r3, [r7, #24]
    118c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    118e:	68bb      	ldr	r3, [r7, #8]
    1190:	693a      	ldr	r2, [r7, #16]
    1192:	401a      	ands	r2, r3
    1194:	0015      	movs	r5, r2
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	697a      	ldr	r2, [r7, #20]
    119a:	401a      	ands	r2, r3
    119c:	0016      	movs	r6, r2
    119e:	002b      	movs	r3, r5
    11a0:	4333      	orrs	r3, r6
    11a2:	d007      	beq.n	11b4 <long_division+0x8a>
			r |= 0x01;
    11a4:	69bb      	ldr	r3, [r7, #24]
    11a6:	2201      	movs	r2, #1
    11a8:	4313      	orrs	r3, r2
    11aa:	61bb      	str	r3, [r7, #24]
    11ac:	69fb      	ldr	r3, [r7, #28]
    11ae:	2200      	movs	r2, #0
    11b0:	4313      	orrs	r3, r2
    11b2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    11b4:	687a      	ldr	r2, [r7, #4]
    11b6:	69fb      	ldr	r3, [r7, #28]
    11b8:	429a      	cmp	r2, r3
    11ba:	d819      	bhi.n	11f0 <long_division+0xc6>
    11bc:	687a      	ldr	r2, [r7, #4]
    11be:	69fb      	ldr	r3, [r7, #28]
    11c0:	429a      	cmp	r2, r3
    11c2:	d103      	bne.n	11cc <long_division+0xa2>
    11c4:	683a      	ldr	r2, [r7, #0]
    11c6:	69bb      	ldr	r3, [r7, #24]
    11c8:	429a      	cmp	r2, r3
    11ca:	d811      	bhi.n	11f0 <long_division+0xc6>
			r = r - d;
    11cc:	69b9      	ldr	r1, [r7, #24]
    11ce:	69fa      	ldr	r2, [r7, #28]
    11d0:	683b      	ldr	r3, [r7, #0]
    11d2:	687c      	ldr	r4, [r7, #4]
    11d4:	1ac9      	subs	r1, r1, r3
    11d6:	41a2      	sbcs	r2, r4
    11d8:	000b      	movs	r3, r1
    11da:	0014      	movs	r4, r2
    11dc:	61bb      	str	r3, [r7, #24]
    11de:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    11e0:	6a3a      	ldr	r2, [r7, #32]
    11e2:	693b      	ldr	r3, [r7, #16]
    11e4:	4313      	orrs	r3, r2
    11e6:	623b      	str	r3, [r7, #32]
    11e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11ea:	697b      	ldr	r3, [r7, #20]
    11ec:	4313      	orrs	r3, r2
    11ee:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    11f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11f2:	3b01      	subs	r3, #1
    11f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    11f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11f8:	2b00      	cmp	r3, #0
    11fa:	daa8      	bge.n	114e <long_division+0x24>
		}
	}

	return q;
    11fc:	6a3b      	ldr	r3, [r7, #32]
    11fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    1200:	0018      	movs	r0, r3
    1202:	0021      	movs	r1, r4
    1204:	46bd      	mov	sp, r7
    1206:	b00d      	add	sp, #52	; 0x34
    1208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000120a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    120a:	b580      	push	{r7, lr}
    120c:	b086      	sub	sp, #24
    120e:	af00      	add	r7, sp, #0
    1210:	60f8      	str	r0, [r7, #12]
    1212:	60b9      	str	r1, [r7, #8]
    1214:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1216:	2316      	movs	r3, #22
    1218:	18fb      	adds	r3, r7, r3
    121a:	2200      	movs	r2, #0
    121c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    121e:	68bb      	ldr	r3, [r7, #8]
    1220:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1222:	68bb      	ldr	r3, [r7, #8]
    1224:	085a      	lsrs	r2, r3, #1
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	429a      	cmp	r2, r3
    122a:	d201      	bcs.n	1230 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    122c:	2340      	movs	r3, #64	; 0x40
    122e:	e026      	b.n	127e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1230:	68bb      	ldr	r3, [r7, #8]
    1232:	085b      	lsrs	r3, r3, #1
    1234:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1236:	e00a      	b.n	124e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1238:	693a      	ldr	r2, [r7, #16]
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	1ad3      	subs	r3, r2, r3
    123e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1240:	2316      	movs	r3, #22
    1242:	18fb      	adds	r3, r7, r3
    1244:	881a      	ldrh	r2, [r3, #0]
    1246:	2316      	movs	r3, #22
    1248:	18fb      	adds	r3, r7, r3
    124a:	3201      	adds	r2, #1
    124c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    124e:	693a      	ldr	r2, [r7, #16]
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	429a      	cmp	r2, r3
    1254:	d2f0      	bcs.n	1238 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    1256:	2316      	movs	r3, #22
    1258:	18fb      	adds	r3, r7, r3
    125a:	2216      	movs	r2, #22
    125c:	18ba      	adds	r2, r7, r2
    125e:	8812      	ldrh	r2, [r2, #0]
    1260:	3a01      	subs	r2, #1
    1262:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1264:	2316      	movs	r3, #22
    1266:	18fb      	adds	r3, r7, r3
    1268:	881b      	ldrh	r3, [r3, #0]
    126a:	2bff      	cmp	r3, #255	; 0xff
    126c:	d901      	bls.n	1272 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    126e:	2340      	movs	r3, #64	; 0x40
    1270:	e005      	b.n	127e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	2216      	movs	r2, #22
    1276:	18ba      	adds	r2, r7, r2
    1278:	8812      	ldrh	r2, [r2, #0]
    127a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    127c:	2300      	movs	r3, #0
	}
}
    127e:	0018      	movs	r0, r3
    1280:	46bd      	mov	sp, r7
    1282:	b006      	add	sp, #24
    1284:	bd80      	pop	{r7, pc}
	...

00001288 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1288:	b5f0      	push	{r4, r5, r6, r7, lr}
    128a:	b0a1      	sub	sp, #132	; 0x84
    128c:	af00      	add	r7, sp, #0
    128e:	64f8      	str	r0, [r7, #76]	; 0x4c
    1290:	64b9      	str	r1, [r7, #72]	; 0x48
    1292:	647a      	str	r2, [r7, #68]	; 0x44
    1294:	2243      	movs	r2, #67	; 0x43
    1296:	18ba      	adds	r2, r7, r2
    1298:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    129a:	2300      	movs	r3, #0
    129c:	2400      	movs	r4, #0
    129e:	673b      	str	r3, [r7, #112]	; 0x70
    12a0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    12a2:	2300      	movs	r3, #0
    12a4:	2400      	movs	r4, #0
    12a6:	66bb      	str	r3, [r7, #104]	; 0x68
    12a8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    12aa:	2300      	movs	r3, #0
    12ac:	2400      	movs	r4, #0
    12ae:	67bb      	str	r3, [r7, #120]	; 0x78
    12b0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    12b2:	2300      	movs	r3, #0
    12b4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    12b6:	2358      	movs	r3, #88	; 0x58
    12b8:	2240      	movs	r2, #64	; 0x40
    12ba:	4694      	mov	ip, r2
    12bc:	44bc      	add	ip, r7
    12be:	4463      	add	r3, ip
    12c0:	781a      	ldrb	r2, [r3, #0]
    12c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12c4:	435a      	muls	r2, r3
    12c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    12c8:	429a      	cmp	r2, r3
    12ca:	d901      	bls.n	12d0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12cc:	2340      	movs	r3, #64	; 0x40
    12ce:	e0b3      	b.n	1438 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    12d0:	2343      	movs	r3, #67	; 0x43
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d13d      	bne.n	1356 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    12da:	2358      	movs	r3, #88	; 0x58
    12dc:	2240      	movs	r2, #64	; 0x40
    12de:	4694      	mov	ip, r2
    12e0:	44bc      	add	ip, r7
    12e2:	4463      	add	r3, ip
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	b2db      	uxtb	r3, r3
    12e8:	613b      	str	r3, [r7, #16]
    12ea:	2300      	movs	r3, #0
    12ec:	617b      	str	r3, [r7, #20]
    12ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12f0:	60bb      	str	r3, [r7, #8]
    12f2:	2300      	movs	r3, #0
    12f4:	60fb      	str	r3, [r7, #12]
    12f6:	4c52      	ldr	r4, [pc, #328]	; (1440 <_sercom_get_async_baud_val+0x1b8>)
    12f8:	68ba      	ldr	r2, [r7, #8]
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	6938      	ldr	r0, [r7, #16]
    12fe:	6979      	ldr	r1, [r7, #20]
    1300:	47a0      	blx	r4
    1302:	0003      	movs	r3, r0
    1304:	000c      	movs	r4, r1
    1306:	001b      	movs	r3, r3
    1308:	65fb      	str	r3, [r7, #92]	; 0x5c
    130a:	2300      	movs	r3, #0
    130c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1310:	603b      	str	r3, [r7, #0]
    1312:	2300      	movs	r3, #0
    1314:	607b      	str	r3, [r7, #4]
    1316:	6db8      	ldr	r0, [r7, #88]	; 0x58
    1318:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    131a:	683a      	ldr	r2, [r7, #0]
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	4c49      	ldr	r4, [pc, #292]	; (1444 <_sercom_get_async_baud_val+0x1bc>)
    1320:	47a0      	blx	r4
    1322:	0003      	movs	r3, r0
    1324:	000c      	movs	r4, r1
    1326:	673b      	str	r3, [r7, #112]	; 0x70
    1328:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    132a:	2100      	movs	r1, #0
    132c:	2201      	movs	r2, #1
    132e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1330:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    1332:	1ac9      	subs	r1, r1, r3
    1334:	41a2      	sbcs	r2, r4
    1336:	000b      	movs	r3, r1
    1338:	0014      	movs	r4, r2
    133a:	66bb      	str	r3, [r7, #104]	; 0x68
    133c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    133e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1340:	0c1b      	lsrs	r3, r3, #16
    1342:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1344:	0416      	lsls	r6, r2, #16
    1346:	431e      	orrs	r6, r3
    1348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    134a:	041d      	lsls	r5, r3, #16
    134c:	0033      	movs	r3, r6
    134e:	67bb      	str	r3, [r7, #120]	; 0x78
    1350:	2300      	movs	r3, #0
    1352:	67fb      	str	r3, [r7, #124]	; 0x7c
    1354:	e06a      	b.n	142c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1356:	2343      	movs	r3, #67	; 0x43
    1358:	18fb      	adds	r3, r7, r3
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	2b01      	cmp	r3, #1
    135e:	d165      	bne.n	142c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1362:	633b      	str	r3, [r7, #48]	; 0x30
    1364:	2300      	movs	r3, #0
    1366:	637b      	str	r3, [r7, #52]	; 0x34
    1368:	2358      	movs	r3, #88	; 0x58
    136a:	2240      	movs	r2, #64	; 0x40
    136c:	4694      	mov	ip, r2
    136e:	44bc      	add	ip, r7
    1370:	4463      	add	r3, ip
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	b2db      	uxtb	r3, r3
    1376:	62bb      	str	r3, [r7, #40]	; 0x28
    1378:	2300      	movs	r3, #0
    137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    137c:	4c30      	ldr	r4, [pc, #192]	; (1440 <_sercom_get_async_baud_val+0x1b8>)
    137e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1382:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1384:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1386:	47a0      	blx	r4
    1388:	0003      	movs	r3, r0
    138a:	000c      	movs	r4, r1
    138c:	65bb      	str	r3, [r7, #88]	; 0x58
    138e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1392:	623b      	str	r3, [r7, #32]
    1394:	2300      	movs	r3, #0
    1396:	627b      	str	r3, [r7, #36]	; 0x24
    1398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    139a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    139c:	001a      	movs	r2, r3
    139e:	0023      	movs	r3, r4
    13a0:	6a38      	ldr	r0, [r7, #32]
    13a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    13a4:	4c27      	ldr	r4, [pc, #156]	; (1444 <_sercom_get_async_baud_val+0x1bc>)
    13a6:	47a0      	blx	r4
    13a8:	0003      	movs	r3, r0
    13aa:	000c      	movs	r4, r1
    13ac:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    13ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    13b0:	2380      	movs	r3, #128	; 0x80
    13b2:	019b      	lsls	r3, r3, #6
    13b4:	429a      	cmp	r2, r3
    13b6:	d901      	bls.n	13bc <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13b8:	2340      	movs	r3, #64	; 0x40
    13ba:	e03d      	b.n	1438 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    13bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    13be:	61bb      	str	r3, [r7, #24]
    13c0:	2300      	movs	r3, #0
    13c2:	61fb      	str	r3, [r7, #28]
    13c4:	69b9      	ldr	r1, [r7, #24]
    13c6:	69fa      	ldr	r2, [r7, #28]
    13c8:	000b      	movs	r3, r1
    13ca:	0f5b      	lsrs	r3, r3, #29
    13cc:	0010      	movs	r0, r2
    13ce:	00c0      	lsls	r0, r0, #3
    13d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    13d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    13d4:	4318      	orrs	r0, r3
    13d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    13d8:	000b      	movs	r3, r1
    13da:	00db      	lsls	r3, r3, #3
    13dc:	63bb      	str	r3, [r7, #56]	; 0x38
    13de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    13e0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    13e2:	001a      	movs	r2, r3
    13e4:	0023      	movs	r3, r4
    13e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    13e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    13ea:	4c16      	ldr	r4, [pc, #88]	; (1444 <_sercom_get_async_baud_val+0x1bc>)
    13ec:	47a0      	blx	r4
    13ee:	0003      	movs	r3, r0
    13f0:	000c      	movs	r4, r1
    13f2:	65bb      	str	r3, [r7, #88]	; 0x58
    13f4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    13f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    13f8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    13fa:	b2d9      	uxtb	r1, r3
    13fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13fe:	b2db      	uxtb	r3, r3
    1400:	00db      	lsls	r3, r3, #3
    1402:	b2da      	uxtb	r2, r3
    1404:	2317      	movs	r3, #23
    1406:	2040      	movs	r0, #64	; 0x40
    1408:	4684      	mov	ip, r0
    140a:	44bc      	add	ip, r7
    140c:	4463      	add	r3, ip
    140e:	1a8a      	subs	r2, r1, r2
    1410:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    1412:	2317      	movs	r3, #23
    1414:	2240      	movs	r2, #64	; 0x40
    1416:	4694      	mov	ip, r2
    1418:	44bc      	add	ip, r7
    141a:	4463      	add	r3, ip
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	035b      	lsls	r3, r3, #13
    1420:	001a      	movs	r2, r3
    1422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1424:	4313      	orrs	r3, r2
    1426:	67bb      	str	r3, [r7, #120]	; 0x78
    1428:	2300      	movs	r3, #0
    142a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    142c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    142e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1430:	b29a      	uxth	r2, r3
    1432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1434:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1436:	2300      	movs	r3, #0
}
    1438:	0018      	movs	r0, r3
    143a:	46bd      	mov	sp, r7
    143c:	b021      	add	sp, #132	; 0x84
    143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1440:	00004261 	.word	0x00004261
    1444:	0000112b 	.word	0x0000112b

00001448 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1448:	b580      	push	{r7, lr}
    144a:	b084      	sub	sp, #16
    144c:	af00      	add	r7, sp, #0
    144e:	0002      	movs	r2, r0
    1450:	1dfb      	adds	r3, r7, #7
    1452:	701a      	strb	r2, [r3, #0]
    1454:	1dbb      	adds	r3, r7, #6
    1456:	1c0a      	adds	r2, r1, #0
    1458:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    145a:	4b1a      	ldr	r3, [pc, #104]	; (14c4 <sercom_set_gclk_generator+0x7c>)
    145c:	781b      	ldrb	r3, [r3, #0]
    145e:	2201      	movs	r2, #1
    1460:	4053      	eors	r3, r2
    1462:	b2db      	uxtb	r3, r3
    1464:	2b00      	cmp	r3, #0
    1466:	d103      	bne.n	1470 <sercom_set_gclk_generator+0x28>
    1468:	1dbb      	adds	r3, r7, #6
    146a:	781b      	ldrb	r3, [r3, #0]
    146c:	2b00      	cmp	r3, #0
    146e:	d01b      	beq.n	14a8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1470:	230c      	movs	r3, #12
    1472:	18fb      	adds	r3, r7, r3
    1474:	0018      	movs	r0, r3
    1476:	4b14      	ldr	r3, [pc, #80]	; (14c8 <sercom_set_gclk_generator+0x80>)
    1478:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    147a:	230c      	movs	r3, #12
    147c:	18fb      	adds	r3, r7, r3
    147e:	1dfa      	adds	r2, r7, #7
    1480:	7812      	ldrb	r2, [r2, #0]
    1482:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1484:	230c      	movs	r3, #12
    1486:	18fb      	adds	r3, r7, r3
    1488:	0019      	movs	r1, r3
    148a:	2011      	movs	r0, #17
    148c:	4b0f      	ldr	r3, [pc, #60]	; (14cc <sercom_set_gclk_generator+0x84>)
    148e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1490:	2011      	movs	r0, #17
    1492:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <sercom_set_gclk_generator+0x88>)
    1494:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1496:	4b0b      	ldr	r3, [pc, #44]	; (14c4 <sercom_set_gclk_generator+0x7c>)
    1498:	1dfa      	adds	r2, r7, #7
    149a:	7812      	ldrb	r2, [r2, #0]
    149c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    149e:	4b09      	ldr	r3, [pc, #36]	; (14c4 <sercom_set_gclk_generator+0x7c>)
    14a0:	2201      	movs	r2, #1
    14a2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    14a4:	2300      	movs	r3, #0
    14a6:	e008      	b.n	14ba <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <sercom_set_gclk_generator+0x7c>)
    14aa:	785b      	ldrb	r3, [r3, #1]
    14ac:	1dfa      	adds	r2, r7, #7
    14ae:	7812      	ldrb	r2, [r2, #0]
    14b0:	429a      	cmp	r2, r3
    14b2:	d101      	bne.n	14b8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    14b4:	2300      	movs	r3, #0
    14b6:	e000      	b.n	14ba <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    14b8:	231d      	movs	r3, #29
}
    14ba:	0018      	movs	r0, r3
    14bc:	46bd      	mov	sp, r7
    14be:	b004      	add	sp, #16
    14c0:	bd80      	pop	{r7, pc}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	20000060 	.word	0x20000060
    14c8:	00001115 	.word	0x00001115
    14cc:	00002451 	.word	0x00002451
    14d0:	00002491 	.word	0x00002491

000014d4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    14dc:	000a      	movs	r2, r1
    14de:	1cfb      	adds	r3, r7, #3
    14e0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	4a4e      	ldr	r2, [pc, #312]	; (1620 <_sercom_get_default_pad+0x14c>)
    14e6:	4293      	cmp	r3, r2
    14e8:	d040      	beq.n	156c <_sercom_get_default_pad+0x98>
    14ea:	4a4d      	ldr	r2, [pc, #308]	; (1620 <_sercom_get_default_pad+0x14c>)
    14ec:	4293      	cmp	r3, r2
    14ee:	d807      	bhi.n	1500 <_sercom_get_default_pad+0x2c>
    14f0:	2284      	movs	r2, #132	; 0x84
    14f2:	05d2      	lsls	r2, r2, #23
    14f4:	4293      	cmp	r3, r2
    14f6:	d00f      	beq.n	1518 <_sercom_get_default_pad+0x44>
    14f8:	4a4a      	ldr	r2, [pc, #296]	; (1624 <_sercom_get_default_pad+0x150>)
    14fa:	4293      	cmp	r3, r2
    14fc:	d021      	beq.n	1542 <_sercom_get_default_pad+0x6e>
    14fe:	e089      	b.n	1614 <_sercom_get_default_pad+0x140>
    1500:	4a49      	ldr	r2, [pc, #292]	; (1628 <_sercom_get_default_pad+0x154>)
    1502:	4293      	cmp	r3, r2
    1504:	d100      	bne.n	1508 <_sercom_get_default_pad+0x34>
    1506:	e05b      	b.n	15c0 <_sercom_get_default_pad+0xec>
    1508:	4a48      	ldr	r2, [pc, #288]	; (162c <_sercom_get_default_pad+0x158>)
    150a:	4293      	cmp	r3, r2
    150c:	d100      	bne.n	1510 <_sercom_get_default_pad+0x3c>
    150e:	e06c      	b.n	15ea <_sercom_get_default_pad+0x116>
    1510:	4a47      	ldr	r2, [pc, #284]	; (1630 <_sercom_get_default_pad+0x15c>)
    1512:	4293      	cmp	r3, r2
    1514:	d03f      	beq.n	1596 <_sercom_get_default_pad+0xc2>
    1516:	e07d      	b.n	1614 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1518:	1cfb      	adds	r3, r7, #3
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	2b01      	cmp	r3, #1
    151e:	d00a      	beq.n	1536 <_sercom_get_default_pad+0x62>
    1520:	dc02      	bgt.n	1528 <_sercom_get_default_pad+0x54>
    1522:	2b00      	cmp	r3, #0
    1524:	d005      	beq.n	1532 <_sercom_get_default_pad+0x5e>
    1526:	e075      	b.n	1614 <_sercom_get_default_pad+0x140>
    1528:	2b02      	cmp	r3, #2
    152a:	d006      	beq.n	153a <_sercom_get_default_pad+0x66>
    152c:	2b03      	cmp	r3, #3
    152e:	d006      	beq.n	153e <_sercom_get_default_pad+0x6a>
    1530:	e070      	b.n	1614 <_sercom_get_default_pad+0x140>
    1532:	4b40      	ldr	r3, [pc, #256]	; (1634 <_sercom_get_default_pad+0x160>)
    1534:	e06f      	b.n	1616 <_sercom_get_default_pad+0x142>
    1536:	4b40      	ldr	r3, [pc, #256]	; (1638 <_sercom_get_default_pad+0x164>)
    1538:	e06d      	b.n	1616 <_sercom_get_default_pad+0x142>
    153a:	4b40      	ldr	r3, [pc, #256]	; (163c <_sercom_get_default_pad+0x168>)
    153c:	e06b      	b.n	1616 <_sercom_get_default_pad+0x142>
    153e:	4b40      	ldr	r3, [pc, #256]	; (1640 <_sercom_get_default_pad+0x16c>)
    1540:	e069      	b.n	1616 <_sercom_get_default_pad+0x142>
    1542:	1cfb      	adds	r3, r7, #3
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	2b01      	cmp	r3, #1
    1548:	d00a      	beq.n	1560 <_sercom_get_default_pad+0x8c>
    154a:	dc02      	bgt.n	1552 <_sercom_get_default_pad+0x7e>
    154c:	2b00      	cmp	r3, #0
    154e:	d005      	beq.n	155c <_sercom_get_default_pad+0x88>
    1550:	e060      	b.n	1614 <_sercom_get_default_pad+0x140>
    1552:	2b02      	cmp	r3, #2
    1554:	d006      	beq.n	1564 <_sercom_get_default_pad+0x90>
    1556:	2b03      	cmp	r3, #3
    1558:	d006      	beq.n	1568 <_sercom_get_default_pad+0x94>
    155a:	e05b      	b.n	1614 <_sercom_get_default_pad+0x140>
    155c:	2303      	movs	r3, #3
    155e:	e05a      	b.n	1616 <_sercom_get_default_pad+0x142>
    1560:	4b38      	ldr	r3, [pc, #224]	; (1644 <_sercom_get_default_pad+0x170>)
    1562:	e058      	b.n	1616 <_sercom_get_default_pad+0x142>
    1564:	4b38      	ldr	r3, [pc, #224]	; (1648 <_sercom_get_default_pad+0x174>)
    1566:	e056      	b.n	1616 <_sercom_get_default_pad+0x142>
    1568:	4b38      	ldr	r3, [pc, #224]	; (164c <_sercom_get_default_pad+0x178>)
    156a:	e054      	b.n	1616 <_sercom_get_default_pad+0x142>
    156c:	1cfb      	adds	r3, r7, #3
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	2b01      	cmp	r3, #1
    1572:	d00a      	beq.n	158a <_sercom_get_default_pad+0xb6>
    1574:	dc02      	bgt.n	157c <_sercom_get_default_pad+0xa8>
    1576:	2b00      	cmp	r3, #0
    1578:	d005      	beq.n	1586 <_sercom_get_default_pad+0xb2>
    157a:	e04b      	b.n	1614 <_sercom_get_default_pad+0x140>
    157c:	2b02      	cmp	r3, #2
    157e:	d006      	beq.n	158e <_sercom_get_default_pad+0xba>
    1580:	2b03      	cmp	r3, #3
    1582:	d006      	beq.n	1592 <_sercom_get_default_pad+0xbe>
    1584:	e046      	b.n	1614 <_sercom_get_default_pad+0x140>
    1586:	4b32      	ldr	r3, [pc, #200]	; (1650 <_sercom_get_default_pad+0x17c>)
    1588:	e045      	b.n	1616 <_sercom_get_default_pad+0x142>
    158a:	4b32      	ldr	r3, [pc, #200]	; (1654 <_sercom_get_default_pad+0x180>)
    158c:	e043      	b.n	1616 <_sercom_get_default_pad+0x142>
    158e:	4b32      	ldr	r3, [pc, #200]	; (1658 <_sercom_get_default_pad+0x184>)
    1590:	e041      	b.n	1616 <_sercom_get_default_pad+0x142>
    1592:	4b32      	ldr	r3, [pc, #200]	; (165c <_sercom_get_default_pad+0x188>)
    1594:	e03f      	b.n	1616 <_sercom_get_default_pad+0x142>
    1596:	1cfb      	adds	r3, r7, #3
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	2b01      	cmp	r3, #1
    159c:	d00a      	beq.n	15b4 <_sercom_get_default_pad+0xe0>
    159e:	dc02      	bgt.n	15a6 <_sercom_get_default_pad+0xd2>
    15a0:	2b00      	cmp	r3, #0
    15a2:	d005      	beq.n	15b0 <_sercom_get_default_pad+0xdc>
    15a4:	e036      	b.n	1614 <_sercom_get_default_pad+0x140>
    15a6:	2b02      	cmp	r3, #2
    15a8:	d006      	beq.n	15b8 <_sercom_get_default_pad+0xe4>
    15aa:	2b03      	cmp	r3, #3
    15ac:	d006      	beq.n	15bc <_sercom_get_default_pad+0xe8>
    15ae:	e031      	b.n	1614 <_sercom_get_default_pad+0x140>
    15b0:	4b2b      	ldr	r3, [pc, #172]	; (1660 <_sercom_get_default_pad+0x18c>)
    15b2:	e030      	b.n	1616 <_sercom_get_default_pad+0x142>
    15b4:	4b2b      	ldr	r3, [pc, #172]	; (1664 <_sercom_get_default_pad+0x190>)
    15b6:	e02e      	b.n	1616 <_sercom_get_default_pad+0x142>
    15b8:	4b2b      	ldr	r3, [pc, #172]	; (1668 <_sercom_get_default_pad+0x194>)
    15ba:	e02c      	b.n	1616 <_sercom_get_default_pad+0x142>
    15bc:	4b2b      	ldr	r3, [pc, #172]	; (166c <_sercom_get_default_pad+0x198>)
    15be:	e02a      	b.n	1616 <_sercom_get_default_pad+0x142>
    15c0:	1cfb      	adds	r3, r7, #3
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	2b01      	cmp	r3, #1
    15c6:	d00a      	beq.n	15de <_sercom_get_default_pad+0x10a>
    15c8:	dc02      	bgt.n	15d0 <_sercom_get_default_pad+0xfc>
    15ca:	2b00      	cmp	r3, #0
    15cc:	d005      	beq.n	15da <_sercom_get_default_pad+0x106>
    15ce:	e021      	b.n	1614 <_sercom_get_default_pad+0x140>
    15d0:	2b02      	cmp	r3, #2
    15d2:	d006      	beq.n	15e2 <_sercom_get_default_pad+0x10e>
    15d4:	2b03      	cmp	r3, #3
    15d6:	d006      	beq.n	15e6 <_sercom_get_default_pad+0x112>
    15d8:	e01c      	b.n	1614 <_sercom_get_default_pad+0x140>
    15da:	4b25      	ldr	r3, [pc, #148]	; (1670 <_sercom_get_default_pad+0x19c>)
    15dc:	e01b      	b.n	1616 <_sercom_get_default_pad+0x142>
    15de:	4b25      	ldr	r3, [pc, #148]	; (1674 <_sercom_get_default_pad+0x1a0>)
    15e0:	e019      	b.n	1616 <_sercom_get_default_pad+0x142>
    15e2:	4b25      	ldr	r3, [pc, #148]	; (1678 <_sercom_get_default_pad+0x1a4>)
    15e4:	e017      	b.n	1616 <_sercom_get_default_pad+0x142>
    15e6:	4b25      	ldr	r3, [pc, #148]	; (167c <_sercom_get_default_pad+0x1a8>)
    15e8:	e015      	b.n	1616 <_sercom_get_default_pad+0x142>
    15ea:	1cfb      	adds	r3, r7, #3
    15ec:	781b      	ldrb	r3, [r3, #0]
    15ee:	2b01      	cmp	r3, #1
    15f0:	d00a      	beq.n	1608 <_sercom_get_default_pad+0x134>
    15f2:	dc02      	bgt.n	15fa <_sercom_get_default_pad+0x126>
    15f4:	2b00      	cmp	r3, #0
    15f6:	d005      	beq.n	1604 <_sercom_get_default_pad+0x130>
    15f8:	e00c      	b.n	1614 <_sercom_get_default_pad+0x140>
    15fa:	2b02      	cmp	r3, #2
    15fc:	d006      	beq.n	160c <_sercom_get_default_pad+0x138>
    15fe:	2b03      	cmp	r3, #3
    1600:	d006      	beq.n	1610 <_sercom_get_default_pad+0x13c>
    1602:	e007      	b.n	1614 <_sercom_get_default_pad+0x140>
    1604:	4b1e      	ldr	r3, [pc, #120]	; (1680 <_sercom_get_default_pad+0x1ac>)
    1606:	e006      	b.n	1616 <_sercom_get_default_pad+0x142>
    1608:	4b1e      	ldr	r3, [pc, #120]	; (1684 <_sercom_get_default_pad+0x1b0>)
    160a:	e004      	b.n	1616 <_sercom_get_default_pad+0x142>
    160c:	4b1e      	ldr	r3, [pc, #120]	; (1688 <_sercom_get_default_pad+0x1b4>)
    160e:	e002      	b.n	1616 <_sercom_get_default_pad+0x142>
    1610:	4b1e      	ldr	r3, [pc, #120]	; (168c <_sercom_get_default_pad+0x1b8>)
    1612:	e000      	b.n	1616 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    1614:	2300      	movs	r3, #0
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b002      	add	sp, #8
    161c:	bd80      	pop	{r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	42000800 	.word	0x42000800
    1624:	42000400 	.word	0x42000400
    1628:	42001000 	.word	0x42001000
    162c:	43000400 	.word	0x43000400
    1630:	42000c00 	.word	0x42000c00
    1634:	00040003 	.word	0x00040003
    1638:	00050003 	.word	0x00050003
    163c:	00060003 	.word	0x00060003
    1640:	00070003 	.word	0x00070003
    1644:	00010003 	.word	0x00010003
    1648:	001e0003 	.word	0x001e0003
    164c:	001f0003 	.word	0x001f0003
    1650:	00080003 	.word	0x00080003
    1654:	00090003 	.word	0x00090003
    1658:	000a0003 	.word	0x000a0003
    165c:	000b0003 	.word	0x000b0003
    1660:	00100003 	.word	0x00100003
    1664:	00110003 	.word	0x00110003
    1668:	00120003 	.word	0x00120003
    166c:	00130003 	.word	0x00130003
    1670:	000c0003 	.word	0x000c0003
    1674:	000d0003 	.word	0x000d0003
    1678:	000e0003 	.word	0x000e0003
    167c:	000f0003 	.word	0x000f0003
    1680:	00160003 	.word	0x00160003
    1684:	00170003 	.word	0x00170003
    1688:	00180003 	.word	0x00180003
    168c:	00190003 	.word	0x00190003

00001690 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1690:	b590      	push	{r4, r7, lr}
    1692:	b08b      	sub	sp, #44	; 0x2c
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1698:	230c      	movs	r3, #12
    169a:	18fb      	adds	r3, r7, r3
    169c:	4a0f      	ldr	r2, [pc, #60]	; (16dc <_sercom_get_sercom_inst_index+0x4c>)
    169e:	ca13      	ldmia	r2!, {r0, r1, r4}
    16a0:	c313      	stmia	r3!, {r0, r1, r4}
    16a2:	ca13      	ldmia	r2!, {r0, r1, r4}
    16a4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16a6:	2300      	movs	r3, #0
    16a8:	627b      	str	r3, [r7, #36]	; 0x24
    16aa:	e00e      	b.n	16ca <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    16ac:	230c      	movs	r3, #12
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    16b2:	0092      	lsls	r2, r2, #2
    16b4:	58d3      	ldr	r3, [r2, r3]
    16b6:	001a      	movs	r2, r3
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	429a      	cmp	r2, r3
    16bc:	d102      	bne.n	16c4 <_sercom_get_sercom_inst_index+0x34>
			return i;
    16be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16c0:	b2db      	uxtb	r3, r3
    16c2:	e006      	b.n	16d2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16c6:	3301      	adds	r3, #1
    16c8:	627b      	str	r3, [r7, #36]	; 0x24
    16ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16cc:	2b05      	cmp	r3, #5
    16ce:	d9ed      	bls.n	16ac <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    16d0:	2300      	movs	r3, #0
}
    16d2:	0018      	movs	r0, r3
    16d4:	46bd      	mov	sp, r7
    16d6:	b00b      	add	sp, #44	; 0x2c
    16d8:	bd90      	pop	{r4, r7, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00006038 	.word	0x00006038

000016e0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	b082      	sub	sp, #8
    16e4:	af00      	add	r7, sp, #0
    16e6:	0002      	movs	r2, r0
    16e8:	1dfb      	adds	r3, r7, #7
    16ea:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	46bd      	mov	sp, r7
    16f0:	b002      	add	sp, #8
    16f2:	bd80      	pop	{r7, pc}

000016f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    16f4:	b580      	push	{r7, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	af00      	add	r7, sp, #0
    16fa:	0002      	movs	r2, r0
    16fc:	6039      	str	r1, [r7, #0]
    16fe:	1dfb      	adds	r3, r7, #7
    1700:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1702:	4b13      	ldr	r3, [pc, #76]	; (1750 <_sercom_set_handler+0x5c>)
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	2201      	movs	r2, #1
    1708:	4053      	eors	r3, r2
    170a:	b2db      	uxtb	r3, r3
    170c:	2b00      	cmp	r3, #0
    170e:	d015      	beq.n	173c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1710:	2300      	movs	r3, #0
    1712:	60fb      	str	r3, [r7, #12]
    1714:	e00c      	b.n	1730 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1716:	4b0f      	ldr	r3, [pc, #60]	; (1754 <_sercom_set_handler+0x60>)
    1718:	68fa      	ldr	r2, [r7, #12]
    171a:	0092      	lsls	r2, r2, #2
    171c:	490e      	ldr	r1, [pc, #56]	; (1758 <_sercom_set_handler+0x64>)
    171e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1720:	4b0e      	ldr	r3, [pc, #56]	; (175c <_sercom_set_handler+0x68>)
    1722:	68fa      	ldr	r2, [r7, #12]
    1724:	0092      	lsls	r2, r2, #2
    1726:	2100      	movs	r1, #0
    1728:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    172a:	68fb      	ldr	r3, [r7, #12]
    172c:	3301      	adds	r3, #1
    172e:	60fb      	str	r3, [r7, #12]
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	2b05      	cmp	r3, #5
    1734:	d9ef      	bls.n	1716 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1736:	4b06      	ldr	r3, [pc, #24]	; (1750 <_sercom_set_handler+0x5c>)
    1738:	2201      	movs	r2, #1
    173a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    173c:	1dfb      	adds	r3, r7, #7
    173e:	781a      	ldrb	r2, [r3, #0]
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <_sercom_set_handler+0x60>)
    1742:	0092      	lsls	r2, r2, #2
    1744:	6839      	ldr	r1, [r7, #0]
    1746:	50d1      	str	r1, [r2, r3]
}
    1748:	46c0      	nop			; (mov r8, r8)
    174a:	46bd      	mov	sp, r7
    174c:	b004      	add	sp, #16
    174e:	bd80      	pop	{r7, pc}
    1750:	20000062 	.word	0x20000062
    1754:	20000064 	.word	0x20000064
    1758:	000016e1 	.word	0x000016e1
    175c:	200000a0 	.word	0x200000a0

00001760 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1760:	b590      	push	{r4, r7, lr}
    1762:	b085      	sub	sp, #20
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1768:	2308      	movs	r3, #8
    176a:	18fb      	adds	r3, r7, r3
    176c:	4a0b      	ldr	r2, [pc, #44]	; (179c <_sercom_get_interrupt_vector+0x3c>)
    176e:	6811      	ldr	r1, [r2, #0]
    1770:	6019      	str	r1, [r3, #0]
    1772:	8892      	ldrh	r2, [r2, #4]
    1774:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1776:	230f      	movs	r3, #15
    1778:	18fc      	adds	r4, r7, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	0018      	movs	r0, r3
    177e:	4b08      	ldr	r3, [pc, #32]	; (17a0 <_sercom_get_interrupt_vector+0x40>)
    1780:	4798      	blx	r3
    1782:	0003      	movs	r3, r0
    1784:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1786:	230f      	movs	r3, #15
    1788:	18fb      	adds	r3, r7, r3
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	2208      	movs	r2, #8
    178e:	18ba      	adds	r2, r7, r2
    1790:	5cd3      	ldrb	r3, [r2, r3]
    1792:	b25b      	sxtb	r3, r3
}
    1794:	0018      	movs	r0, r3
    1796:	46bd      	mov	sp, r7
    1798:	b005      	add	sp, #20
    179a:	bd90      	pop	{r4, r7, pc}
    179c:	00006050 	.word	0x00006050
    17a0:	00001691 	.word	0x00001691

000017a4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    17a4:	b580      	push	{r7, lr}
    17a6:	af00      	add	r7, sp, #0
    17a8:	4b03      	ldr	r3, [pc, #12]	; (17b8 <SERCOM0_Handler+0x14>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	2000      	movs	r0, #0
    17ae:	4798      	blx	r3
    17b0:	46c0      	nop			; (mov r8, r8)
    17b2:	46bd      	mov	sp, r7
    17b4:	bd80      	pop	{r7, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	20000064 	.word	0x20000064

000017bc <SERCOM1_Handler>:
    17bc:	b580      	push	{r7, lr}
    17be:	af00      	add	r7, sp, #0
    17c0:	4b03      	ldr	r3, [pc, #12]	; (17d0 <SERCOM1_Handler+0x14>)
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	2001      	movs	r0, #1
    17c6:	4798      	blx	r3
    17c8:	46c0      	nop			; (mov r8, r8)
    17ca:	46bd      	mov	sp, r7
    17cc:	bd80      	pop	{r7, pc}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	20000064 	.word	0x20000064

000017d4 <SERCOM2_Handler>:
    17d4:	b580      	push	{r7, lr}
    17d6:	af00      	add	r7, sp, #0
    17d8:	4b03      	ldr	r3, [pc, #12]	; (17e8 <SERCOM2_Handler+0x14>)
    17da:	689b      	ldr	r3, [r3, #8]
    17dc:	2002      	movs	r0, #2
    17de:	4798      	blx	r3
    17e0:	46c0      	nop			; (mov r8, r8)
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	20000064 	.word	0x20000064

000017ec <SERCOM3_Handler>:
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
    17f0:	4b03      	ldr	r3, [pc, #12]	; (1800 <SERCOM3_Handler+0x14>)
    17f2:	68db      	ldr	r3, [r3, #12]
    17f4:	2003      	movs	r0, #3
    17f6:	4798      	blx	r3
    17f8:	46c0      	nop			; (mov r8, r8)
    17fa:	46bd      	mov	sp, r7
    17fc:	bd80      	pop	{r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	20000064 	.word	0x20000064

00001804 <SERCOM4_Handler>:
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
    1808:	4b03      	ldr	r3, [pc, #12]	; (1818 <SERCOM4_Handler+0x14>)
    180a:	691b      	ldr	r3, [r3, #16]
    180c:	2004      	movs	r0, #4
    180e:	4798      	blx	r3
    1810:	46c0      	nop			; (mov r8, r8)
    1812:	46bd      	mov	sp, r7
    1814:	bd80      	pop	{r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	20000064 	.word	0x20000064

0000181c <SERCOM5_Handler>:
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0
    1820:	4b03      	ldr	r3, [pc, #12]	; (1830 <SERCOM5_Handler+0x14>)
    1822:	695b      	ldr	r3, [r3, #20]
    1824:	2005      	movs	r0, #5
    1826:	4798      	blx	r3
    1828:	46c0      	nop			; (mov r8, r8)
    182a:	46bd      	mov	sp, r7
    182c:	bd80      	pop	{r7, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	20000064 	.word	0x20000064

00001834 <system_gclk_chan_get_config_defaults>:
{
    1834:	b580      	push	{r7, lr}
    1836:	b082      	sub	sp, #8
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	2200      	movs	r2, #0
    1840:	701a      	strb	r2, [r3, #0]
}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	46bd      	mov	sp, r7
    1846:	b002      	add	sp, #8
    1848:	bd80      	pop	{r7, pc}
	...

0000184c <system_apb_clock_set_mask>:
{
    184c:	b580      	push	{r7, lr}
    184e:	b082      	sub	sp, #8
    1850:	af00      	add	r7, sp, #0
    1852:	0002      	movs	r2, r0
    1854:	6039      	str	r1, [r7, #0]
    1856:	1dfb      	adds	r3, r7, #7
    1858:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    185a:	1dfb      	adds	r3, r7, #7
    185c:	781b      	ldrb	r3, [r3, #0]
    185e:	2b04      	cmp	r3, #4
    1860:	d827      	bhi.n	18b2 <system_apb_clock_set_mask+0x66>
    1862:	009a      	lsls	r2, r3, #2
    1864:	4b16      	ldr	r3, [pc, #88]	; (18c0 <system_apb_clock_set_mask+0x74>)
    1866:	18d3      	adds	r3, r2, r3
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    186c:	4b15      	ldr	r3, [pc, #84]	; (18c4 <system_apb_clock_set_mask+0x78>)
    186e:	4a15      	ldr	r2, [pc, #84]	; (18c4 <system_apb_clock_set_mask+0x78>)
    1870:	6951      	ldr	r1, [r2, #20]
    1872:	683a      	ldr	r2, [r7, #0]
    1874:	430a      	orrs	r2, r1
    1876:	615a      	str	r2, [r3, #20]
			break;
    1878:	e01d      	b.n	18b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    187a:	4b12      	ldr	r3, [pc, #72]	; (18c4 <system_apb_clock_set_mask+0x78>)
    187c:	4a11      	ldr	r2, [pc, #68]	; (18c4 <system_apb_clock_set_mask+0x78>)
    187e:	6991      	ldr	r1, [r2, #24]
    1880:	683a      	ldr	r2, [r7, #0]
    1882:	430a      	orrs	r2, r1
    1884:	619a      	str	r2, [r3, #24]
			break;
    1886:	e016      	b.n	18b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1888:	4b0e      	ldr	r3, [pc, #56]	; (18c4 <system_apb_clock_set_mask+0x78>)
    188a:	4a0e      	ldr	r2, [pc, #56]	; (18c4 <system_apb_clock_set_mask+0x78>)
    188c:	69d1      	ldr	r1, [r2, #28]
    188e:	683a      	ldr	r2, [r7, #0]
    1890:	430a      	orrs	r2, r1
    1892:	61da      	str	r2, [r3, #28]
			break;
    1894:	e00f      	b.n	18b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1896:	4b0b      	ldr	r3, [pc, #44]	; (18c4 <system_apb_clock_set_mask+0x78>)
    1898:	4a0a      	ldr	r2, [pc, #40]	; (18c4 <system_apb_clock_set_mask+0x78>)
    189a:	6a11      	ldr	r1, [r2, #32]
    189c:	683a      	ldr	r2, [r7, #0]
    189e:	430a      	orrs	r2, r1
    18a0:	621a      	str	r2, [r3, #32]
			break;
    18a2:	e008      	b.n	18b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    18a4:	4b07      	ldr	r3, [pc, #28]	; (18c4 <system_apb_clock_set_mask+0x78>)
    18a6:	4a07      	ldr	r2, [pc, #28]	; (18c4 <system_apb_clock_set_mask+0x78>)
    18a8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    18aa:	683a      	ldr	r2, [r7, #0]
    18ac:	430a      	orrs	r2, r1
    18ae:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    18b0:	e001      	b.n	18b6 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    18b2:	2317      	movs	r3, #23
    18b4:	e000      	b.n	18b8 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    18b6:	2300      	movs	r3, #0
}
    18b8:	0018      	movs	r0, r3
    18ba:	46bd      	mov	sp, r7
    18bc:	b002      	add	sp, #8
    18be:	bd80      	pop	{r7, pc}
    18c0:	00006058 	.word	0x00006058
    18c4:	40000400 	.word	0x40000400

000018c8 <system_pinmux_get_config_defaults>:
{
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	2280      	movs	r2, #128	; 0x80
    18d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	2200      	movs	r2, #0
    18da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	2201      	movs	r2, #1
    18e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	2200      	movs	r2, #0
    18e6:	70da      	strb	r2, [r3, #3]
}
    18e8:	46c0      	nop			; (mov r8, r8)
    18ea:	46bd      	mov	sp, r7
    18ec:	b002      	add	sp, #8
    18ee:	bd80      	pop	{r7, pc}

000018f0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    18f4:	4b05      	ldr	r3, [pc, #20]	; (190c <system_is_debugger_present+0x1c>)
    18f6:	789b      	ldrb	r3, [r3, #2]
    18f8:	b2db      	uxtb	r3, r3
    18fa:	001a      	movs	r2, r3
    18fc:	2302      	movs	r3, #2
    18fe:	4013      	ands	r3, r2
    1900:	1e5a      	subs	r2, r3, #1
    1902:	4193      	sbcs	r3, r2
    1904:	b2db      	uxtb	r3, r3
}
    1906:	0018      	movs	r0, r3
    1908:	46bd      	mov	sp, r7
    190a:	bd80      	pop	{r7, pc}
    190c:	41002000 	.word	0x41002000

00001910 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1910:	b580      	push	{r7, lr}
    1912:	b084      	sub	sp, #16
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    191e:	68fb      	ldr	r3, [r7, #12]
    1920:	69db      	ldr	r3, [r3, #28]
    1922:	1e5a      	subs	r2, r3, #1
    1924:	4193      	sbcs	r3, r2
    1926:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1928:	0018      	movs	r0, r3
    192a:	46bd      	mov	sp, r7
    192c:	b004      	add	sp, #16
    192e:	bd80      	pop	{r7, pc}

00001930 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1930:	b580      	push	{r7, lr}
    1932:	b082      	sub	sp, #8
    1934:	af00      	add	r7, sp, #0
    1936:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1938:	46c0      	nop			; (mov r8, r8)
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	0018      	movs	r0, r3
    193e:	4b04      	ldr	r3, [pc, #16]	; (1950 <_usart_wait_for_sync+0x20>)
    1940:	4798      	blx	r3
    1942:	1e03      	subs	r3, r0, #0
    1944:	d1f9      	bne.n	193a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	46bd      	mov	sp, r7
    194a:	b002      	add	sp, #8
    194c:	bd80      	pop	{r7, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	00001911 	.word	0x00001911

00001954 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1954:	b5b0      	push	{r4, r5, r7, lr}
    1956:	b08c      	sub	sp, #48	; 0x30
    1958:	af02      	add	r7, sp, #8
    195a:	6078      	str	r0, [r7, #4]
    195c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	617b      	str	r3, [r7, #20]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	0018      	movs	r0, r3
    196a:	4bac      	ldr	r3, [pc, #688]	; (1c1c <_usart_set_config+0x2c8>)
    196c:	4798      	blx	r3
    196e:	0003      	movs	r3, r0
    1970:	613b      	str	r3, [r7, #16]
	uint32_t gclk_index;

#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (SAMC21)
	if (sercom_index == 5) {
    1972:	693b      	ldr	r3, [r7, #16]
    1974:	2b05      	cmp	r3, #5
    1976:	d102      	bne.n	197e <_usart_set_config+0x2a>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1978:	2318      	movs	r3, #24
    197a:	627b      	str	r3, [r7, #36]	; 0x24
    197c:	e002      	b.n	1984 <_usart_set_config+0x30>
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    197e:	693b      	ldr	r3, [r7, #16]
    1980:	3312      	adds	r3, #18
    1982:	627b      	str	r3, [r7, #36]	; 0x24
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1984:	2300      	movs	r3, #0
    1986:	623b      	str	r3, [r7, #32]
	uint32_t ctrlb = 0;
    1988:	2300      	movs	r3, #0
    198a:	61fb      	str	r3, [r7, #28]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    198c:	230a      	movs	r3, #10
    198e:	18fb      	adds	r3, r7, r3
    1990:	2200      	movs	r2, #0
    1992:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1994:	231b      	movs	r3, #27
    1996:	18fb      	adds	r3, r7, r3
    1998:	2200      	movs	r2, #0
    199a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    199c:	231a      	movs	r3, #26
    199e:	18fb      	adds	r3, r7, r3
    19a0:	2210      	movs	r2, #16
    19a2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    19a4:	683b      	ldr	r3, [r7, #0]
    19a6:	8a1b      	ldrh	r3, [r3, #16]
    19a8:	2280      	movs	r2, #128	; 0x80
    19aa:	01d2      	lsls	r2, r2, #7
    19ac:	4293      	cmp	r3, r2
    19ae:	d01c      	beq.n	19ea <_usart_set_config+0x96>
    19b0:	2280      	movs	r2, #128	; 0x80
    19b2:	01d2      	lsls	r2, r2, #7
    19b4:	4293      	cmp	r3, r2
    19b6:	dc06      	bgt.n	19c6 <_usart_set_config+0x72>
    19b8:	2b00      	cmp	r3, #0
    19ba:	d00d      	beq.n	19d8 <_usart_set_config+0x84>
    19bc:	2280      	movs	r2, #128	; 0x80
    19be:	0192      	lsls	r2, r2, #6
    19c0:	4293      	cmp	r3, r2
    19c2:	d024      	beq.n	1a0e <_usart_set_config+0xba>
    19c4:	e035      	b.n	1a32 <_usart_set_config+0xde>
    19c6:	22c0      	movs	r2, #192	; 0xc0
    19c8:	01d2      	lsls	r2, r2, #7
    19ca:	4293      	cmp	r3, r2
    19cc:	d028      	beq.n	1a20 <_usart_set_config+0xcc>
    19ce:	2280      	movs	r2, #128	; 0x80
    19d0:	0212      	lsls	r2, r2, #8
    19d2:	4293      	cmp	r3, r2
    19d4:	d012      	beq.n	19fc <_usart_set_config+0xa8>
    19d6:	e02c      	b.n	1a32 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    19d8:	231b      	movs	r3, #27
    19da:	18fb      	adds	r3, r7, r3
    19dc:	2200      	movs	r2, #0
    19de:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    19e0:	231a      	movs	r3, #26
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	2210      	movs	r2, #16
    19e6:	701a      	strb	r2, [r3, #0]
			break;
    19e8:	e023      	b.n	1a32 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    19ea:	231b      	movs	r3, #27
    19ec:	18fb      	adds	r3, r7, r3
    19ee:	2200      	movs	r2, #0
    19f0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    19f2:	231a      	movs	r3, #26
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	2208      	movs	r2, #8
    19f8:	701a      	strb	r2, [r3, #0]
			break;
    19fa:	e01a      	b.n	1a32 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    19fc:	231b      	movs	r3, #27
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	2200      	movs	r2, #0
    1a02:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1a04:	231a      	movs	r3, #26
    1a06:	18fb      	adds	r3, r7, r3
    1a08:	2203      	movs	r2, #3
    1a0a:	701a      	strb	r2, [r3, #0]
			break;
    1a0c:	e011      	b.n	1a32 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a0e:	231b      	movs	r3, #27
    1a10:	18fb      	adds	r3, r7, r3
    1a12:	2201      	movs	r2, #1
    1a14:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a16:	231a      	movs	r3, #26
    1a18:	18fb      	adds	r3, r7, r3
    1a1a:	2210      	movs	r2, #16
    1a1c:	701a      	strb	r2, [r3, #0]
			break;
    1a1e:	e008      	b.n	1a32 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a20:	231b      	movs	r3, #27
    1a22:	18fb      	adds	r3, r7, r3
    1a24:	2201      	movs	r2, #1
    1a26:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1a28:	231a      	movs	r3, #26
    1a2a:	18fb      	adds	r3, r7, r3
    1a2c:	2208      	movs	r2, #8
    1a2e:	701a      	strb	r2, [r3, #0]
			break;
    1a30:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1a32:	683b      	ldr	r3, [r7, #0]
    1a34:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1a36:	683b      	ldr	r3, [r7, #0]
    1a38:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    1a3a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1a3c:	683b      	ldr	r3, [r7, #0]
    1a3e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    1a40:	4313      	orrs	r3, r2
		config->sample_rate |
    1a42:	683a      	ldr	r2, [r7, #0]
    1a44:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    1a46:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a48:	683a      	ldr	r2, [r7, #0]
    1a4a:	7e12      	ldrb	r2, [r2, #24]
    1a4c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1a4e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a50:	683a      	ldr	r2, [r7, #0]
    1a52:	2126      	movs	r1, #38	; 0x26
    1a54:	5c52      	ldrb	r2, [r2, r1]
    1a56:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    1a58:	4313      	orrs	r3, r2
    1a5a:	623b      	str	r3, [r7, #32]

	enum status_code status_code = STATUS_OK;
    1a5c:	2319      	movs	r3, #25
    1a5e:	18fb      	adds	r3, r7, r3
    1a60:	2200      	movs	r2, #0
    1a62:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1a64:	683b      	ldr	r3, [r7, #0]
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d01e      	beq.n	1aae <_usart_set_config+0x15a>
    1a70:	2280      	movs	r2, #128	; 0x80
    1a72:	0552      	lsls	r2, r2, #21
    1a74:	4293      	cmp	r3, r2
    1a76:	d14f      	bne.n	1b18 <_usart_set_config+0x1c4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1a78:	683b      	ldr	r3, [r7, #0]
    1a7a:	2227      	movs	r2, #39	; 0x27
    1a7c:	5c9b      	ldrb	r3, [r3, r2]
    1a7e:	2201      	movs	r2, #1
    1a80:	4053      	eors	r3, r2
    1a82:	b2db      	uxtb	r3, r3
    1a84:	2b00      	cmp	r3, #0
    1a86:	d046      	beq.n	1b16 <_usart_set_config+0x1c2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1a88:	683b      	ldr	r3, [r7, #0]
    1a8a:	6a1d      	ldr	r5, [r3, #32]
    1a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a8e:	b2db      	uxtb	r3, r3
    1a90:	0018      	movs	r0, r3
    1a92:	4b63      	ldr	r3, [pc, #396]	; (1c20 <_usart_set_config+0x2cc>)
    1a94:	4798      	blx	r3
    1a96:	0001      	movs	r1, r0
    1a98:	2319      	movs	r3, #25
    1a9a:	18fc      	adds	r4, r7, r3
    1a9c:	230a      	movs	r3, #10
    1a9e:	18fb      	adds	r3, r7, r3
    1aa0:	001a      	movs	r2, r3
    1aa2:	0028      	movs	r0, r5
    1aa4:	4b5f      	ldr	r3, [pc, #380]	; (1c24 <_usart_set_config+0x2d0>)
    1aa6:	4798      	blx	r3
    1aa8:	0003      	movs	r3, r0
    1aaa:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1aac:	e033      	b.n	1b16 <_usart_set_config+0x1c2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1aae:	683b      	ldr	r3, [r7, #0]
    1ab0:	2227      	movs	r2, #39	; 0x27
    1ab2:	5c9b      	ldrb	r3, [r3, r2]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d014      	beq.n	1ae2 <_usart_set_config+0x18e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1ab8:	683b      	ldr	r3, [r7, #0]
    1aba:	6a18      	ldr	r0, [r3, #32]
    1abc:	683b      	ldr	r3, [r7, #0]
    1abe:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    1ac0:	2319      	movs	r3, #25
    1ac2:	18fc      	adds	r4, r7, r3
    1ac4:	231b      	movs	r3, #27
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	781d      	ldrb	r5, [r3, #0]
    1aca:	230a      	movs	r3, #10
    1acc:	18fa      	adds	r2, r7, r3
    1ace:	231a      	movs	r3, #26
    1ad0:	18fb      	adds	r3, r7, r3
    1ad2:	781b      	ldrb	r3, [r3, #0]
    1ad4:	9300      	str	r3, [sp, #0]
    1ad6:	002b      	movs	r3, r5
    1ad8:	4d53      	ldr	r5, [pc, #332]	; (1c28 <_usart_set_config+0x2d4>)
    1ada:	47a8      	blx	r5
    1adc:	0003      	movs	r3, r0
    1ade:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1ae0:	e01a      	b.n	1b18 <_usart_set_config+0x1c4>
						_sercom_get_async_baud_val(config->baudrate,
    1ae2:	683b      	ldr	r3, [r7, #0]
    1ae4:	6a1d      	ldr	r5, [r3, #32]
    1ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ae8:	b2db      	uxtb	r3, r3
    1aea:	0018      	movs	r0, r3
    1aec:	4b4c      	ldr	r3, [pc, #304]	; (1c20 <_usart_set_config+0x2cc>)
    1aee:	4798      	blx	r3
				status_code =
    1af0:	2319      	movs	r3, #25
    1af2:	18fc      	adds	r4, r7, r3
    1af4:	231b      	movs	r3, #27
    1af6:	18fb      	adds	r3, r7, r3
    1af8:	7819      	ldrb	r1, [r3, #0]
    1afa:	230a      	movs	r3, #10
    1afc:	18fa      	adds	r2, r7, r3
    1afe:	231a      	movs	r3, #26
    1b00:	18fb      	adds	r3, r7, r3
    1b02:	781b      	ldrb	r3, [r3, #0]
    1b04:	9300      	str	r3, [sp, #0]
    1b06:	000b      	movs	r3, r1
    1b08:	0001      	movs	r1, r0
    1b0a:	0028      	movs	r0, r5
    1b0c:	4d46      	ldr	r5, [pc, #280]	; (1c28 <_usart_set_config+0x2d4>)
    1b0e:	47a8      	blx	r5
    1b10:	0003      	movs	r3, r0
    1b12:	7023      	strb	r3, [r4, #0]
			break;
    1b14:	e000      	b.n	1b18 <_usart_set_config+0x1c4>
			break;
    1b16:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1b18:	2319      	movs	r3, #25
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d003      	beq.n	1b2a <_usart_set_config+0x1d6>
		/* Abort */
		return status_code;
    1b22:	2319      	movs	r3, #25
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	e073      	b.n	1c12 <_usart_set_config+0x2be>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1b2a:	683b      	ldr	r3, [r7, #0]
    1b2c:	7e5b      	ldrb	r3, [r3, #25]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d003      	beq.n	1b3a <_usart_set_config+0x1e6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b32:	683b      	ldr	r3, [r7, #0]
    1b34:	7e9a      	ldrb	r2, [r3, #26]
    1b36:	697b      	ldr	r3, [r7, #20]
    1b38:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1b3a:	230a      	movs	r3, #10
    1b3c:	18fb      	adds	r3, r7, r3
    1b3e:	881a      	ldrh	r2, [r3, #0]
    1b40:	697b      	ldr	r3, [r7, #20]
    1b42:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1b44:	6a3a      	ldr	r2, [r7, #32]
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	4313      	orrs	r3, r2
    1b4a:	623b      	str	r3, [r7, #32]

	if (config->use_external_clock == false) {
    1b4c:	683b      	ldr	r3, [r7, #0]
    1b4e:	2227      	movs	r2, #39	; 0x27
    1b50:	5c9b      	ldrb	r3, [r3, r2]
    1b52:	2201      	movs	r2, #1
    1b54:	4053      	eors	r3, r2
    1b56:	b2db      	uxtb	r3, r3
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d003      	beq.n	1b64 <_usart_set_config+0x210>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1b5c:	6a3b      	ldr	r3, [r7, #32]
    1b5e:	2204      	movs	r2, #4
    1b60:	4313      	orrs	r3, r2
    1b62:	623b      	str	r3, [r7, #32]
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b64:	683b      	ldr	r3, [r7, #0]
    1b66:	7e5b      	ldrb	r3, [r3, #25]
    1b68:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b6a:	683b      	ldr	r3, [r7, #0]
    1b6c:	7f1b      	ldrb	r3, [r3, #28]
    1b6e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b70:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b72:	683b      	ldr	r3, [r7, #0]
    1b74:	7f5b      	ldrb	r3, [r3, #29]
    1b76:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b78:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b7a:	683b      	ldr	r3, [r7, #0]
    1b7c:	2124      	movs	r1, #36	; 0x24
    1b7e:	5c5b      	ldrb	r3, [r3, r1]
    1b80:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b82:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1b84:	683b      	ldr	r3, [r7, #0]
    1b86:	2125      	movs	r1, #37	; 0x25
    1b88:	5c5b      	ldrb	r3, [r3, r1]
    1b8a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b8c:	4313      	orrs	r3, r2
	ctrlb =  
    1b8e:	61fb      	str	r3, [r7, #28]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1b90:	683b      	ldr	r3, [r7, #0]
    1b92:	7a9b      	ldrb	r3, [r3, #10]
    1b94:	001a      	movs	r2, r3
    1b96:	69fb      	ldr	r3, [r7, #28]
    1b98:	4313      	orrs	r3, r2
    1b9a:	61fb      	str	r3, [r7, #28]
	ctrlb |= (uint32_t)config->character_size;
    1b9c:	683b      	ldr	r3, [r7, #0]
    1b9e:	7adb      	ldrb	r3, [r3, #11]
    1ba0:	001a      	movs	r2, r3
    1ba2:	69fb      	ldr	r3, [r7, #28]
    1ba4:	4313      	orrs	r3, r2
    1ba6:	61fb      	str	r3, [r7, #28]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1ba8:	683b      	ldr	r3, [r7, #0]
    1baa:	891b      	ldrh	r3, [r3, #8]
    1bac:	2bff      	cmp	r3, #255	; 0xff
    1bae:	d00b      	beq.n	1bc8 <_usart_set_config+0x274>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1bb0:	6a3b      	ldr	r3, [r7, #32]
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	0452      	lsls	r2, r2, #17
    1bb6:	4313      	orrs	r3, r2
    1bb8:	623b      	str	r3, [r7, #32]
		ctrlb |= config->parity;
    1bba:	683b      	ldr	r3, [r7, #0]
    1bbc:	891b      	ldrh	r3, [r3, #8]
    1bbe:	001a      	movs	r2, r3
    1bc0:	69fb      	ldr	r3, [r7, #28]
    1bc2:	4313      	orrs	r3, r2
    1bc4:	61fb      	str	r3, [r7, #28]
    1bc6:	e008      	b.n	1bda <_usart_set_config+0x286>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1bc8:	683b      	ldr	r3, [r7, #0]
    1bca:	7edb      	ldrb	r3, [r3, #27]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d004      	beq.n	1bda <_usart_set_config+0x286>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1bd0:	6a3b      	ldr	r3, [r7, #32]
    1bd2:	2280      	movs	r2, #128	; 0x80
    1bd4:	04d2      	lsls	r2, r2, #19
    1bd6:	4313      	orrs	r3, r2
    1bd8:	623b      	str	r3, [r7, #32]
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1bda:	683b      	ldr	r3, [r7, #0]
    1bdc:	222c      	movs	r2, #44	; 0x2c
    1bde:	5c9b      	ldrb	r3, [r3, r2]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d103      	bne.n	1bec <_usart_set_config+0x298>
    1be4:	4b11      	ldr	r3, [pc, #68]	; (1c2c <_usart_set_config+0x2d8>)
    1be6:	4798      	blx	r3
    1be8:	1e03      	subs	r3, r0, #0
    1bea:	d003      	beq.n	1bf4 <_usart_set_config+0x2a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1bec:	6a3b      	ldr	r3, [r7, #32]
    1bee:	2280      	movs	r2, #128	; 0x80
    1bf0:	4313      	orrs	r3, r2
    1bf2:	623b      	str	r3, [r7, #32]
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	0018      	movs	r0, r3
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <_usart_set_config+0x2dc>)
    1bfa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1bfc:	697b      	ldr	r3, [r7, #20]
    1bfe:	69fa      	ldr	r2, [r7, #28]
    1c00:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	0018      	movs	r0, r3
    1c06:	4b0a      	ldr	r3, [pc, #40]	; (1c30 <_usart_set_config+0x2dc>)
    1c08:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1c0a:	697b      	ldr	r3, [r7, #20]
    1c0c:	6a3a      	ldr	r2, [r7, #32]
    1c0e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1c10:	2300      	movs	r3, #0
}
    1c12:	0018      	movs	r0, r3
    1c14:	46bd      	mov	sp, r7
    1c16:	b00a      	add	sp, #40	; 0x28
    1c18:	bdb0      	pop	{r4, r5, r7, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	00001691 	.word	0x00001691
    1c20:	00002541 	.word	0x00002541
    1c24:	0000120b 	.word	0x0000120b
    1c28:	00001289 	.word	0x00001289
    1c2c:	000018f1 	.word	0x000018f1
    1c30:	00001931 	.word	0x00001931

00001c34 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1c34:	b590      	push	{r4, r7, lr}
    1c36:	b093      	sub	sp, #76	; 0x4c
    1c38:	af00      	add	r7, sp, #0
    1c3a:	60f8      	str	r0, [r7, #12]
    1c3c:	60b9      	str	r1, [r7, #8]
    1c3e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1c40:	2333      	movs	r3, #51	; 0x33
    1c42:	18fb      	adds	r3, r7, r3
    1c44:	2200      	movs	r2, #0
    1c46:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	68ba      	ldr	r2, [r7, #8]
    1c4c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	681b      	ldr	r3, [r3, #0]
    1c52:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c54:	68fb      	ldr	r3, [r7, #12]
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	0018      	movs	r0, r3
    1c5a:	4b8f      	ldr	r3, [pc, #572]	; (1e98 <usart_init+0x264>)
    1c5c:	4798      	blx	r3
    1c5e:	0003      	movs	r3, r0
    1c60:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c64:	2b05      	cmp	r3, #5
    1c66:	d104      	bne.n	1c72 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    1c68:	2301      	movs	r3, #1
    1c6a:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1c6c:	2318      	movs	r3, #24
    1c6e:	643b      	str	r3, [r7, #64]	; 0x40
    1c70:	e004      	b.n	1c7c <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c74:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c78:	3312      	adds	r3, #18
    1c7a:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	2201      	movs	r2, #1
    1c82:	4013      	ands	r3, r2
    1c84:	d001      	beq.n	1c8a <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1c86:	2305      	movs	r3, #5
    1c88:	e102      	b.n	1e90 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	2202      	movs	r2, #2
    1c90:	4013      	ands	r3, r2
    1c92:	d001      	beq.n	1c98 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1c94:	231c      	movs	r3, #28
    1c96:	e0fb      	b.n	1e90 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c9a:	2b05      	cmp	r3, #5
    1c9c:	d108      	bne.n	1cb0 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1c9e:	2201      	movs	r2, #1
    1ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ca2:	409a      	lsls	r2, r3
    1ca4:	0013      	movs	r3, r2
    1ca6:	0019      	movs	r1, r3
    1ca8:	2003      	movs	r0, #3
    1caa:	4b7c      	ldr	r3, [pc, #496]	; (1e9c <usart_init+0x268>)
    1cac:	4798      	blx	r3
    1cae:	e007      	b.n	1cc0 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    1cb0:	2201      	movs	r2, #1
    1cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1cb4:	409a      	lsls	r2, r3
    1cb6:	0013      	movs	r3, r2
    1cb8:	0019      	movs	r1, r3
    1cba:	2002      	movs	r0, #2
    1cbc:	4b77      	ldr	r3, [pc, #476]	; (1e9c <usart_init+0x268>)
    1cbe:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1cc0:	2324      	movs	r3, #36	; 0x24
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	0018      	movs	r0, r3
    1cc6:	4b76      	ldr	r3, [pc, #472]	; (1ea0 <usart_init+0x26c>)
    1cc8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	222d      	movs	r2, #45	; 0x2d
    1cce:	5c9a      	ldrb	r2, [r3, r2]
    1cd0:	2324      	movs	r3, #36	; 0x24
    1cd2:	18fb      	adds	r3, r7, r3
    1cd4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1cd8:	b2db      	uxtb	r3, r3
    1cda:	2224      	movs	r2, #36	; 0x24
    1cdc:	18ba      	adds	r2, r7, r2
    1cde:	0011      	movs	r1, r2
    1ce0:	0018      	movs	r0, r3
    1ce2:	4b70      	ldr	r3, [pc, #448]	; (1ea4 <usart_init+0x270>)
    1ce4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ce8:	b2db      	uxtb	r3, r3
    1cea:	0018      	movs	r0, r3
    1cec:	4b6e      	ldr	r3, [pc, #440]	; (1ea8 <usart_init+0x274>)
    1cee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	222d      	movs	r2, #45	; 0x2d
    1cf4:	5c9b      	ldrb	r3, [r3, r2]
    1cf6:	2100      	movs	r1, #0
    1cf8:	0018      	movs	r0, r3
    1cfa:	4b6c      	ldr	r3, [pc, #432]	; (1eac <usart_init+0x278>)
    1cfc:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	7ada      	ldrb	r2, [r3, #11]
    1d02:	68fb      	ldr	r3, [r7, #12]
    1d04:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	2224      	movs	r2, #36	; 0x24
    1d0a:	5c9a      	ldrb	r2, [r3, r2]
    1d0c:	68fb      	ldr	r3, [r7, #12]
    1d0e:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	2225      	movs	r2, #37	; 0x25
    1d14:	5c9a      	ldrb	r2, [r3, r2]
    1d16:	68fb      	ldr	r3, [r7, #12]
    1d18:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	7eda      	ldrb	r2, [r3, #27]
    1d1e:	68fb      	ldr	r3, [r7, #12]
    1d20:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	7f1a      	ldrb	r2, [r3, #28]
    1d26:	68fb      	ldr	r3, [r7, #12]
    1d28:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1d2a:	2333      	movs	r3, #51	; 0x33
    1d2c:	18fc      	adds	r4, r7, r3
    1d2e:	687a      	ldr	r2, [r7, #4]
    1d30:	68fb      	ldr	r3, [r7, #12]
    1d32:	0011      	movs	r1, r2
    1d34:	0018      	movs	r0, r3
    1d36:	4b5e      	ldr	r3, [pc, #376]	; (1eb0 <usart_init+0x27c>)
    1d38:	4798      	blx	r3
    1d3a:	0003      	movs	r3, r0
    1d3c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1d3e:	2333      	movs	r3, #51	; 0x33
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	781b      	ldrb	r3, [r3, #0]
    1d44:	2b00      	cmp	r3, #0
    1d46:	d003      	beq.n	1d50 <usart_init+0x11c>
		return status_code;
    1d48:	2333      	movs	r3, #51	; 0x33
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	781b      	ldrb	r3, [r3, #0]
    1d4e:	e09f      	b.n	1e90 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1d50:	2320      	movs	r3, #32
    1d52:	18fb      	adds	r3, r7, r3
    1d54:	0018      	movs	r0, r3
    1d56:	4b57      	ldr	r3, [pc, #348]	; (1eb4 <usart_init+0x280>)
    1d58:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d5a:	2320      	movs	r3, #32
    1d5c:	18fb      	adds	r3, r7, r3
    1d5e:	2200      	movs	r2, #0
    1d60:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d62:	2320      	movs	r3, #32
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	2200      	movs	r2, #0
    1d68:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1d6a:	687b      	ldr	r3, [r7, #4]
    1d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1d6e:	2310      	movs	r3, #16
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1d78:	2310      	movs	r3, #16
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1d82:	2310      	movs	r3, #16
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1d88:	687b      	ldr	r3, [r7, #4]
    1d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    1d8c:	2310      	movs	r3, #16
    1d8e:	18fb      	adds	r3, r7, r3
    1d90:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1d92:	233f      	movs	r3, #63	; 0x3f
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	2200      	movs	r2, #0
    1d98:	701a      	strb	r2, [r3, #0]
    1d9a:	e02c      	b.n	1df6 <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d9c:	233f      	movs	r3, #63	; 0x3f
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	781a      	ldrb	r2, [r3, #0]
    1da2:	2310      	movs	r3, #16
    1da4:	18fb      	adds	r3, r7, r3
    1da6:	0092      	lsls	r2, r2, #2
    1da8:	58d3      	ldr	r3, [r2, r3]
    1daa:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    1dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1dae:	2b00      	cmp	r3, #0
    1db0:	d109      	bne.n	1dc6 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1db2:	233f      	movs	r3, #63	; 0x3f
    1db4:	18fb      	adds	r3, r7, r3
    1db6:	781a      	ldrb	r2, [r3, #0]
    1db8:	68bb      	ldr	r3, [r7, #8]
    1dba:	0011      	movs	r1, r2
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b3e      	ldr	r3, [pc, #248]	; (1eb8 <usart_init+0x284>)
    1dc0:	4798      	blx	r3
    1dc2:	0003      	movs	r3, r0
    1dc4:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1dc8:	3301      	adds	r3, #1
    1dca:	d00d      	beq.n	1de8 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1dce:	b2da      	uxtb	r2, r3
    1dd0:	2320      	movs	r3, #32
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1dd8:	0c1b      	lsrs	r3, r3, #16
    1dda:	b2db      	uxtb	r3, r3
    1ddc:	2220      	movs	r2, #32
    1dde:	18ba      	adds	r2, r7, r2
    1de0:	0011      	movs	r1, r2
    1de2:	0018      	movs	r0, r3
    1de4:	4b35      	ldr	r3, [pc, #212]	; (1ebc <usart_init+0x288>)
    1de6:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1de8:	233f      	movs	r3, #63	; 0x3f
    1dea:	18fb      	adds	r3, r7, r3
    1dec:	781a      	ldrb	r2, [r3, #0]
    1dee:	233f      	movs	r3, #63	; 0x3f
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	3201      	adds	r2, #1
    1df4:	701a      	strb	r2, [r3, #0]
    1df6:	233f      	movs	r3, #63	; 0x3f
    1df8:	18fb      	adds	r3, r7, r3
    1dfa:	781b      	ldrb	r3, [r3, #0]
    1dfc:	2b03      	cmp	r3, #3
    1dfe:	d9cd      	bls.n	1d9c <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1e00:	2300      	movs	r3, #0
    1e02:	637b      	str	r3, [r7, #52]	; 0x34
    1e04:	e00a      	b.n	1e1c <usart_init+0x1e8>
		module->callback[i]            = NULL;
    1e06:	68fa      	ldr	r2, [r7, #12]
    1e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e0a:	3302      	adds	r3, #2
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	18d3      	adds	r3, r2, r3
    1e10:	3304      	adds	r3, #4
    1e12:	2200      	movs	r2, #0
    1e14:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e18:	3301      	adds	r3, #1
    1e1a:	637b      	str	r3, [r7, #52]	; 0x34
    1e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e1e:	2b05      	cmp	r3, #5
    1e20:	d9f1      	bls.n	1e06 <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	2200      	movs	r2, #0
    1e26:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1e28:	68fb      	ldr	r3, [r7, #12]
    1e2a:	2200      	movs	r2, #0
    1e2c:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	2200      	movs	r2, #0
    1e32:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1e34:	68fb      	ldr	r3, [r7, #12]
    1e36:	2200      	movs	r2, #0
    1e38:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	2230      	movs	r2, #48	; 0x30
    1e3e:	2100      	movs	r1, #0
    1e40:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	2231      	movs	r2, #49	; 0x31
    1e46:	2100      	movs	r1, #0
    1e48:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	2232      	movs	r2, #50	; 0x32
    1e4e:	2100      	movs	r1, #0
    1e50:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1e52:	68fb      	ldr	r3, [r7, #12]
    1e54:	2233      	movs	r2, #51	; 0x33
    1e56:	2100      	movs	r1, #0
    1e58:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1e5a:	68fb      	ldr	r3, [r7, #12]
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	2227      	movs	r2, #39	; 0x27
    1e60:	18bc      	adds	r4, r7, r2
    1e62:	0018      	movs	r0, r3
    1e64:	4b0c      	ldr	r3, [pc, #48]	; (1e98 <usart_init+0x264>)
    1e66:	4798      	blx	r3
    1e68:	0003      	movs	r3, r0
    1e6a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1e6c:	4a14      	ldr	r2, [pc, #80]	; (1ec0 <usart_init+0x28c>)
    1e6e:	2327      	movs	r3, #39	; 0x27
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	0011      	movs	r1, r2
    1e76:	0018      	movs	r0, r3
    1e78:	4b12      	ldr	r3, [pc, #72]	; (1ec4 <usart_init+0x290>)
    1e7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1e7c:	2327      	movs	r3, #39	; 0x27
    1e7e:	18fb      	adds	r3, r7, r3
    1e80:	781a      	ldrb	r2, [r3, #0]
    1e82:	4b11      	ldr	r3, [pc, #68]	; (1ec8 <usart_init+0x294>)
    1e84:	0092      	lsls	r2, r2, #2
    1e86:	68f9      	ldr	r1, [r7, #12]
    1e88:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1e8a:	2333      	movs	r3, #51	; 0x33
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	781b      	ldrb	r3, [r3, #0]
}
    1e90:	0018      	movs	r0, r3
    1e92:	46bd      	mov	sp, r7
    1e94:	b013      	add	sp, #76	; 0x4c
    1e96:	bd90      	pop	{r4, r7, pc}
    1e98:	00001691 	.word	0x00001691
    1e9c:	0000184d 	.word	0x0000184d
    1ea0:	00001835 	.word	0x00001835
    1ea4:	00002451 	.word	0x00002451
    1ea8:	00002491 	.word	0x00002491
    1eac:	00001449 	.word	0x00001449
    1eb0:	00001955 	.word	0x00001955
    1eb4:	000018c9 	.word	0x000018c9
    1eb8:	000014d5 	.word	0x000014d5
    1ebc:	00002705 	.word	0x00002705
    1ec0:	00001f11 	.word	0x00001f11
    1ec4:	000016f5 	.word	0x000016f5
    1ec8:	200000a0 	.word	0x200000a0

00001ecc <usart_is_syncing>:
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b084      	sub	sp, #16
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	681b      	ldr	r3, [r3, #0]
    1ed8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1eda:	68fb      	ldr	r3, [r7, #12]
    1edc:	69db      	ldr	r3, [r3, #28]
    1ede:	1e5a      	subs	r2, r3, #1
    1ee0:	4193      	sbcs	r3, r2
    1ee2:	b2db      	uxtb	r3, r3
}
    1ee4:	0018      	movs	r0, r3
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}

00001eec <_usart_wait_for_sync>:
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    1ef4:	46c0      	nop			; (mov r8, r8)
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	0018      	movs	r0, r3
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <_usart_wait_for_sync+0x20>)
    1efc:	4798      	blx	r3
    1efe:	1e03      	subs	r3, r0, #0
    1f00:	d1f9      	bne.n	1ef6 <_usart_wait_for_sync+0xa>
}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	46bd      	mov	sp, r7
    1f06:	b002      	add	sp, #8
    1f08:	bd80      	pop	{r7, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00001ecd 	.word	0x00001ecd

00001f10 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	b088      	sub	sp, #32
    1f14:	af00      	add	r7, sp, #0
    1f16:	0002      	movs	r2, r0
    1f18:	1dfb      	adds	r3, r7, #7
    1f1a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1f1c:	1dfb      	adds	r3, r7, #7
    1f1e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1f20:	4ba3      	ldr	r3, [pc, #652]	; (21b0 <STACK_SIZE+0x1b0>)
    1f22:	0092      	lsls	r2, r2, #2
    1f24:	58d3      	ldr	r3, [r2, r3]
    1f26:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f28:	69bb      	ldr	r3, [r7, #24]
    1f2a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    1f2c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1f2e:	69bb      	ldr	r3, [r7, #24]
    1f30:	0018      	movs	r0, r3
    1f32:	4ba0      	ldr	r3, [pc, #640]	; (21b4 <STACK_SIZE+0x1b4>)
    1f34:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f36:	697b      	ldr	r3, [r7, #20]
    1f38:	7e1b      	ldrb	r3, [r3, #24]
    1f3a:	b2da      	uxtb	r2, r3
    1f3c:	2312      	movs	r3, #18
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f42:	697b      	ldr	r3, [r7, #20]
    1f44:	7d9b      	ldrb	r3, [r3, #22]
    1f46:	b2db      	uxtb	r3, r3
    1f48:	b29a      	uxth	r2, r3
    1f4a:	2312      	movs	r3, #18
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	2112      	movs	r1, #18
    1f50:	1879      	adds	r1, r7, r1
    1f52:	8809      	ldrh	r1, [r1, #0]
    1f54:	400a      	ands	r2, r1
    1f56:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1f58:	69bb      	ldr	r3, [r7, #24]
    1f5a:	2230      	movs	r2, #48	; 0x30
    1f5c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    1f5e:	69ba      	ldr	r2, [r7, #24]
    1f60:	2131      	movs	r1, #49	; 0x31
    1f62:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1f64:	4013      	ands	r3, r2
    1f66:	b2da      	uxtb	r2, r3
    1f68:	2310      	movs	r3, #16
    1f6a:	18fb      	adds	r3, r7, r3
    1f6c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1f6e:	2312      	movs	r3, #18
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	881b      	ldrh	r3, [r3, #0]
    1f74:	2201      	movs	r2, #1
    1f76:	4013      	ands	r3, r2
    1f78:	d044      	beq.n	2004 <STACK_SIZE+0x4>
		if (module->remaining_tx_buffer_length) {
    1f7a:	69bb      	ldr	r3, [r7, #24]
    1f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1f7e:	b29b      	uxth	r3, r3
    1f80:	2b00      	cmp	r3, #0
    1f82:	d03c      	beq.n	1ffe <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f84:	69bb      	ldr	r3, [r7, #24]
    1f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	b2da      	uxtb	r2, r3
    1f8c:	231c      	movs	r3, #28
    1f8e:	18fb      	adds	r3, r7, r3
    1f90:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1f92:	69bb      	ldr	r3, [r7, #24]
    1f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f96:	1c5a      	adds	r2, r3, #1
    1f98:	69bb      	ldr	r3, [r7, #24]
    1f9a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f9c:	69bb      	ldr	r3, [r7, #24]
    1f9e:	795b      	ldrb	r3, [r3, #5]
    1fa0:	2b01      	cmp	r3, #1
    1fa2:	d113      	bne.n	1fcc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1fa4:	69bb      	ldr	r3, [r7, #24]
    1fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	b2db      	uxtb	r3, r3
    1fac:	021b      	lsls	r3, r3, #8
    1fae:	b21a      	sxth	r2, r3
    1fb0:	231c      	movs	r3, #28
    1fb2:	18fb      	adds	r3, r7, r3
    1fb4:	2100      	movs	r1, #0
    1fb6:	5e5b      	ldrsh	r3, [r3, r1]
    1fb8:	4313      	orrs	r3, r2
    1fba:	b21a      	sxth	r2, r3
    1fbc:	231c      	movs	r3, #28
    1fbe:	18fb      	adds	r3, r7, r3
    1fc0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1fc2:	69bb      	ldr	r3, [r7, #24]
    1fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fc6:	1c5a      	adds	r2, r3, #1
    1fc8:	69bb      	ldr	r3, [r7, #24]
    1fca:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1fcc:	231c      	movs	r3, #28
    1fce:	18fb      	adds	r3, r7, r3
    1fd0:	881b      	ldrh	r3, [r3, #0]
    1fd2:	05db      	lsls	r3, r3, #23
    1fd4:	0ddb      	lsrs	r3, r3, #23
    1fd6:	b29a      	uxth	r2, r3
    1fd8:	697b      	ldr	r3, [r7, #20]
    1fda:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1fdc:	69bb      	ldr	r3, [r7, #24]
    1fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1fe0:	b29b      	uxth	r3, r3
    1fe2:	3b01      	subs	r3, #1
    1fe4:	b29b      	uxth	r3, r3
    1fe6:	69ba      	ldr	r2, [r7, #24]
    1fe8:	1c19      	adds	r1, r3, #0
    1fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1fec:	2b00      	cmp	r3, #0
    1fee:	d109      	bne.n	2004 <STACK_SIZE+0x4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1ff0:	697b      	ldr	r3, [r7, #20]
    1ff2:	2201      	movs	r2, #1
    1ff4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1ff6:	697b      	ldr	r3, [r7, #20]
    1ff8:	2202      	movs	r2, #2
    1ffa:	759a      	strb	r2, [r3, #22]
    1ffc:	e002      	b.n	2004 <STACK_SIZE+0x4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1ffe:	697b      	ldr	r3, [r7, #20]
    2000:	2201      	movs	r2, #1
    2002:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2004:	2312      	movs	r3, #18
    2006:	18fb      	adds	r3, r7, r3
    2008:	881b      	ldrh	r3, [r3, #0]
    200a:	2202      	movs	r2, #2
    200c:	4013      	ands	r3, r2
    200e:	d011      	beq.n	2034 <STACK_SIZE+0x34>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2010:	697b      	ldr	r3, [r7, #20]
    2012:	2202      	movs	r2, #2
    2014:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2016:	69bb      	ldr	r3, [r7, #24]
    2018:	2233      	movs	r2, #51	; 0x33
    201a:	2100      	movs	r1, #0
    201c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    201e:	2310      	movs	r3, #16
    2020:	18fb      	adds	r3, r7, r3
    2022:	881b      	ldrh	r3, [r3, #0]
    2024:	2201      	movs	r2, #1
    2026:	4013      	ands	r3, r2
    2028:	d004      	beq.n	2034 <STACK_SIZE+0x34>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    202a:	69bb      	ldr	r3, [r7, #24]
    202c:	68db      	ldr	r3, [r3, #12]
    202e:	69ba      	ldr	r2, [r7, #24]
    2030:	0010      	movs	r0, r2
    2032:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2034:	2312      	movs	r3, #18
    2036:	18fb      	adds	r3, r7, r3
    2038:	881b      	ldrh	r3, [r3, #0]
    203a:	2204      	movs	r2, #4
    203c:	4013      	ands	r3, r2
    203e:	d100      	bne.n	2042 <STACK_SIZE+0x42>
    2040:	e0bd      	b.n	21be <STACK_SIZE+0x1be>

		if (module->remaining_rx_buffer_length) {
    2042:	69bb      	ldr	r3, [r7, #24]
    2044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2046:	b29b      	uxth	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	d100      	bne.n	204e <STACK_SIZE+0x4e>
    204c:	e0b4      	b.n	21b8 <STACK_SIZE+0x1b8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    204e:	697b      	ldr	r3, [r7, #20]
    2050:	8b5b      	ldrh	r3, [r3, #26]
    2052:	b29b      	uxth	r3, r3
    2054:	b2da      	uxtb	r2, r3
    2056:	231f      	movs	r3, #31
    2058:	18fb      	adds	r3, r7, r3
    205a:	213f      	movs	r1, #63	; 0x3f
    205c:	400a      	ands	r2, r1
    205e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2060:	231f      	movs	r3, #31
    2062:	18fb      	adds	r3, r7, r3
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2208      	movs	r2, #8
    2068:	4013      	ands	r3, r2
    206a:	d007      	beq.n	207c <STACK_SIZE+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    206c:	231f      	movs	r3, #31
    206e:	18fb      	adds	r3, r7, r3
    2070:	221f      	movs	r2, #31
    2072:	18ba      	adds	r2, r7, r2
    2074:	7812      	ldrb	r2, [r2, #0]
    2076:	2108      	movs	r1, #8
    2078:	438a      	bics	r2, r1
    207a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    207c:	231f      	movs	r3, #31
    207e:	18fb      	adds	r3, r7, r3
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	2b00      	cmp	r3, #0
    2084:	d050      	beq.n	2128 <STACK_SIZE+0x128>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2086:	231f      	movs	r3, #31
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2202      	movs	r2, #2
    208e:	4013      	ands	r3, r2
    2090:	d007      	beq.n	20a2 <STACK_SIZE+0xa2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2092:	69bb      	ldr	r3, [r7, #24]
    2094:	2232      	movs	r2, #50	; 0x32
    2096:	211a      	movs	r1, #26
    2098:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    209a:	697b      	ldr	r3, [r7, #20]
    209c:	2202      	movs	r2, #2
    209e:	835a      	strh	r2, [r3, #26]
    20a0:	e036      	b.n	2110 <STACK_SIZE+0x110>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    20a2:	231f      	movs	r3, #31
    20a4:	18fb      	adds	r3, r7, r3
    20a6:	781b      	ldrb	r3, [r3, #0]
    20a8:	2204      	movs	r2, #4
    20aa:	4013      	ands	r3, r2
    20ac:	d007      	beq.n	20be <STACK_SIZE+0xbe>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    20ae:	69bb      	ldr	r3, [r7, #24]
    20b0:	2232      	movs	r2, #50	; 0x32
    20b2:	211e      	movs	r1, #30
    20b4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    20b6:	697b      	ldr	r3, [r7, #20]
    20b8:	2204      	movs	r2, #4
    20ba:	835a      	strh	r2, [r3, #26]
    20bc:	e028      	b.n	2110 <STACK_SIZE+0x110>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    20be:	231f      	movs	r3, #31
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	2201      	movs	r2, #1
    20c6:	4013      	ands	r3, r2
    20c8:	d007      	beq.n	20da <STACK_SIZE+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    20ca:	69bb      	ldr	r3, [r7, #24]
    20cc:	2232      	movs	r2, #50	; 0x32
    20ce:	2113      	movs	r1, #19
    20d0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    20d2:	697b      	ldr	r3, [r7, #20]
    20d4:	2201      	movs	r2, #1
    20d6:	835a      	strh	r2, [r3, #26]
    20d8:	e01a      	b.n	2110 <STACK_SIZE+0x110>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    20da:	231f      	movs	r3, #31
    20dc:	18fb      	adds	r3, r7, r3
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	2210      	movs	r2, #16
    20e2:	4013      	ands	r3, r2
    20e4:	d007      	beq.n	20f6 <STACK_SIZE+0xf6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    20e6:	69bb      	ldr	r3, [r7, #24]
    20e8:	2232      	movs	r2, #50	; 0x32
    20ea:	2142      	movs	r1, #66	; 0x42
    20ec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    20ee:	697b      	ldr	r3, [r7, #20]
    20f0:	2210      	movs	r2, #16
    20f2:	835a      	strh	r2, [r3, #26]
    20f4:	e00c      	b.n	2110 <STACK_SIZE+0x110>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    20f6:	231f      	movs	r3, #31
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	781b      	ldrb	r3, [r3, #0]
    20fc:	2220      	movs	r2, #32
    20fe:	4013      	ands	r3, r2
    2100:	d006      	beq.n	2110 <STACK_SIZE+0x110>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2102:	69bb      	ldr	r3, [r7, #24]
    2104:	2232      	movs	r2, #50	; 0x32
    2106:	2141      	movs	r1, #65	; 0x41
    2108:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    210a:	697b      	ldr	r3, [r7, #20]
    210c:	2220      	movs	r2, #32
    210e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    2110:	2310      	movs	r3, #16
    2112:	18fb      	adds	r3, r7, r3
    2114:	881b      	ldrh	r3, [r3, #0]
    2116:	2204      	movs	r2, #4
    2118:	4013      	ands	r3, r2
				if (callback_status
    211a:	d050      	beq.n	21be <STACK_SIZE+0x1be>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    211c:	69bb      	ldr	r3, [r7, #24]
    211e:	695b      	ldr	r3, [r3, #20]
    2120:	69ba      	ldr	r2, [r7, #24]
    2122:	0010      	movs	r0, r2
    2124:	4798      	blx	r3
    2126:	e04a      	b.n	21be <STACK_SIZE+0x1be>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2128:	697b      	ldr	r3, [r7, #20]
    212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    212c:	b29a      	uxth	r2, r3
    212e:	230e      	movs	r3, #14
    2130:	18fb      	adds	r3, r7, r3
    2132:	05d2      	lsls	r2, r2, #23
    2134:	0dd2      	lsrs	r2, r2, #23
    2136:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2138:	69bb      	ldr	r3, [r7, #24]
    213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    213c:	220e      	movs	r2, #14
    213e:	18ba      	adds	r2, r7, r2
    2140:	8812      	ldrh	r2, [r2, #0]
    2142:	b2d2      	uxtb	r2, r2
    2144:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2146:	69bb      	ldr	r3, [r7, #24]
    2148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    214a:	1c5a      	adds	r2, r3, #1
    214c:	69bb      	ldr	r3, [r7, #24]
    214e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2150:	69bb      	ldr	r3, [r7, #24]
    2152:	795b      	ldrb	r3, [r3, #5]
    2154:	2b01      	cmp	r3, #1
    2156:	d10d      	bne.n	2174 <STACK_SIZE+0x174>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2158:	69bb      	ldr	r3, [r7, #24]
    215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    215c:	220e      	movs	r2, #14
    215e:	18ba      	adds	r2, r7, r2
    2160:	8812      	ldrh	r2, [r2, #0]
    2162:	0a12      	lsrs	r2, r2, #8
    2164:	b292      	uxth	r2, r2
    2166:	b2d2      	uxtb	r2, r2
    2168:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    216a:	69bb      	ldr	r3, [r7, #24]
    216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    216e:	1c5a      	adds	r2, r3, #1
    2170:	69bb      	ldr	r3, [r7, #24]
    2172:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2174:	69bb      	ldr	r3, [r7, #24]
    2176:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2178:	b29b      	uxth	r3, r3
    217a:	3b01      	subs	r3, #1
    217c:	b29b      	uxth	r3, r3
    217e:	69ba      	ldr	r2, [r7, #24]
    2180:	1c19      	adds	r1, r3, #0
    2182:	8591      	strh	r1, [r2, #44]	; 0x2c
    2184:	2b00      	cmp	r3, #0
    2186:	d11a      	bne.n	21be <STACK_SIZE+0x1be>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2188:	697b      	ldr	r3, [r7, #20]
    218a:	2204      	movs	r2, #4
    218c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    218e:	69bb      	ldr	r3, [r7, #24]
    2190:	2232      	movs	r2, #50	; 0x32
    2192:	2100      	movs	r1, #0
    2194:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    2196:	2310      	movs	r3, #16
    2198:	18fb      	adds	r3, r7, r3
    219a:	881b      	ldrh	r3, [r3, #0]
    219c:	2202      	movs	r2, #2
    219e:	4013      	ands	r3, r2
					if (callback_status
    21a0:	d00d      	beq.n	21be <STACK_SIZE+0x1be>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    21a2:	69bb      	ldr	r3, [r7, #24]
    21a4:	691b      	ldr	r3, [r3, #16]
    21a6:	69ba      	ldr	r2, [r7, #24]
    21a8:	0010      	movs	r0, r2
    21aa:	4798      	blx	r3
    21ac:	e007      	b.n	21be <STACK_SIZE+0x1be>
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	200000a0 	.word	0x200000a0
    21b4:	00001eed 	.word	0x00001eed
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    21b8:	697b      	ldr	r3, [r7, #20]
    21ba:	2204      	movs	r2, #4
    21bc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    21be:	2312      	movs	r3, #18
    21c0:	18fb      	adds	r3, r7, r3
    21c2:	881b      	ldrh	r3, [r3, #0]
    21c4:	2210      	movs	r2, #16
    21c6:	4013      	ands	r3, r2
    21c8:	d010      	beq.n	21ec <STACK_SIZE+0x1ec>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    21ca:	697b      	ldr	r3, [r7, #20]
    21cc:	2210      	movs	r2, #16
    21ce:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    21d0:	697b      	ldr	r3, [r7, #20]
    21d2:	2210      	movs	r2, #16
    21d4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    21d6:	2310      	movs	r3, #16
    21d8:	18fb      	adds	r3, r7, r3
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	2210      	movs	r2, #16
    21de:	4013      	ands	r3, r2
    21e0:	d004      	beq.n	21ec <STACK_SIZE+0x1ec>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    21e2:	69bb      	ldr	r3, [r7, #24]
    21e4:	69db      	ldr	r3, [r3, #28]
    21e6:	69ba      	ldr	r2, [r7, #24]
    21e8:	0010      	movs	r0, r2
    21ea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    21ec:	2312      	movs	r3, #18
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	881b      	ldrh	r3, [r3, #0]
    21f2:	2220      	movs	r2, #32
    21f4:	4013      	ands	r3, r2
    21f6:	d010      	beq.n	221a <STACK_SIZE+0x21a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    21f8:	697b      	ldr	r3, [r7, #20]
    21fa:	2220      	movs	r2, #32
    21fc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    21fe:	697b      	ldr	r3, [r7, #20]
    2200:	2220      	movs	r2, #32
    2202:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2204:	2310      	movs	r3, #16
    2206:	18fb      	adds	r3, r7, r3
    2208:	881b      	ldrh	r3, [r3, #0]
    220a:	2208      	movs	r2, #8
    220c:	4013      	ands	r3, r2
    220e:	d004      	beq.n	221a <STACK_SIZE+0x21a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2210:	69bb      	ldr	r3, [r7, #24]
    2212:	699b      	ldr	r3, [r3, #24]
    2214:	69ba      	ldr	r2, [r7, #24]
    2216:	0010      	movs	r0, r2
    2218:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    221a:	2312      	movs	r3, #18
    221c:	18fb      	adds	r3, r7, r3
    221e:	881b      	ldrh	r3, [r3, #0]
    2220:	2208      	movs	r2, #8
    2222:	4013      	ands	r3, r2
    2224:	d010      	beq.n	2248 <STACK_SIZE+0x248>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2226:	697b      	ldr	r3, [r7, #20]
    2228:	2208      	movs	r2, #8
    222a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    222c:	697b      	ldr	r3, [r7, #20]
    222e:	2208      	movs	r2, #8
    2230:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2232:	2310      	movs	r3, #16
    2234:	18fb      	adds	r3, r7, r3
    2236:	881b      	ldrh	r3, [r3, #0]
    2238:	2220      	movs	r2, #32
    223a:	4013      	ands	r3, r2
    223c:	d004      	beq.n	2248 <STACK_SIZE+0x248>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    223e:	69bb      	ldr	r3, [r7, #24]
    2240:	6a1b      	ldr	r3, [r3, #32]
    2242:	69ba      	ldr	r2, [r7, #24]
    2244:	0010      	movs	r0, r2
    2246:	4798      	blx	r3
		}
	}
#endif
}
    2248:	46c0      	nop			; (mov r8, r8)
    224a:	46bd      	mov	sp, r7
    224c:	b008      	add	sp, #32
    224e:	bd80      	pop	{r7, pc}

00002250 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2250:	b580      	push	{r7, lr}
    2252:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2254:	46c0      	nop			; (mov r8, r8)
    2256:	4b04      	ldr	r3, [pc, #16]	; (2268 <_system_dfll_wait_for_sync+0x18>)
    2258:	68da      	ldr	r2, [r3, #12]
    225a:	2380      	movs	r3, #128	; 0x80
    225c:	005b      	lsls	r3, r3, #1
    225e:	4013      	ands	r3, r2
    2260:	d0f9      	beq.n	2256 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	46bd      	mov	sp, r7
    2266:	bd80      	pop	{r7, pc}
    2268:	40000c00 	.word	0x40000c00

0000226c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    226c:	b580      	push	{r7, lr}
    226e:	b082      	sub	sp, #8
    2270:	af00      	add	r7, sp, #0
    2272:	0002      	movs	r2, r0
    2274:	1dfb      	adds	r3, r7, #7
    2276:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2278:	1dfb      	adds	r3, r7, #7
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	2b08      	cmp	r3, #8
    227e:	d842      	bhi.n	2306 <system_clock_source_get_hz+0x9a>
    2280:	009a      	lsls	r2, r3, #2
    2282:	4b23      	ldr	r3, [pc, #140]	; (2310 <system_clock_source_get_hz+0xa4>)
    2284:	18d3      	adds	r3, r2, r3
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    228a:	4b22      	ldr	r3, [pc, #136]	; (2314 <system_clock_source_get_hz+0xa8>)
    228c:	691b      	ldr	r3, [r3, #16]
    228e:	e03b      	b.n	2308 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2290:	4b21      	ldr	r3, [pc, #132]	; (2318 <system_clock_source_get_hz+0xac>)
    2292:	7d1b      	ldrb	r3, [r3, #20]
    2294:	071b      	lsls	r3, r3, #28
    2296:	0f9b      	lsrs	r3, r3, #30
    2298:	b2db      	uxtb	r3, r3
    229a:	3301      	adds	r3, #1
    229c:	001a      	movs	r2, r3
    229e:	4b1f      	ldr	r3, [pc, #124]	; (231c <system_clock_source_get_hz+0xb0>)
    22a0:	4353      	muls	r3, r2
    22a2:	e031      	b.n	2308 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    22a4:	2380      	movs	r3, #128	; 0x80
    22a6:	021b      	lsls	r3, r3, #8
    22a8:	e02e      	b.n	2308 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    22aa:	2380      	movs	r3, #128	; 0x80
    22ac:	021b      	lsls	r3, r3, #8
    22ae:	e02b      	b.n	2308 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    22b0:	4b18      	ldr	r3, [pc, #96]	; (2314 <system_clock_source_get_hz+0xa8>)
    22b2:	695b      	ldr	r3, [r3, #20]
    22b4:	e028      	b.n	2308 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    22b6:	4b17      	ldr	r3, [pc, #92]	; (2314 <system_clock_source_get_hz+0xa8>)
    22b8:	681b      	ldr	r3, [r3, #0]
    22ba:	2202      	movs	r2, #2
    22bc:	4013      	ands	r3, r2
    22be:	d101      	bne.n	22c4 <system_clock_source_get_hz+0x58>
			return 0;
    22c0:	2300      	movs	r3, #0
    22c2:	e021      	b.n	2308 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    22c4:	4b16      	ldr	r3, [pc, #88]	; (2320 <system_clock_source_get_hz+0xb4>)
    22c6:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    22c8:	4b12      	ldr	r3, [pc, #72]	; (2314 <system_clock_source_get_hz+0xa8>)
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	2224      	movs	r2, #36	; 0x24
    22ce:	4013      	ands	r3, r2
    22d0:	2b04      	cmp	r3, #4
    22d2:	d109      	bne.n	22e8 <system_clock_source_get_hz+0x7c>
				(OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_USBCRM)) {
		case OSCCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    22d4:	2000      	movs	r0, #0
    22d6:	4b13      	ldr	r3, [pc, #76]	; (2324 <system_clock_source_get_hz+0xb8>)
    22d8:	4798      	blx	r3
    22da:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    22dc:	4b0d      	ldr	r3, [pc, #52]	; (2314 <system_clock_source_get_hz+0xa8>)
    22de:	689b      	ldr	r3, [r3, #8]
    22e0:	041b      	lsls	r3, r3, #16
    22e2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    22e4:	4353      	muls	r3, r2
    22e6:	e00f      	b.n	2308 <system_clock_source_get_hz+0x9c>
		default:
			return 48000000UL;
    22e8:	4b0f      	ldr	r3, [pc, #60]	; (2328 <system_clock_source_get_hz+0xbc>)
    22ea:	e00d      	b.n	2308 <system_clock_source_get_hz+0x9c>
		}

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22ec:	4a0a      	ldr	r2, [pc, #40]	; (2318 <system_clock_source_get_hz+0xac>)
    22ee:	2328      	movs	r3, #40	; 0x28
    22f0:	5cd3      	ldrb	r3, [r2, r3]
    22f2:	b2db      	uxtb	r3, r3
    22f4:	001a      	movs	r2, r3
    22f6:	2302      	movs	r3, #2
    22f8:	4013      	ands	r3, r2
    22fa:	d101      	bne.n	2300 <system_clock_source_get_hz+0x94>
			return 0;
    22fc:	2300      	movs	r3, #0
    22fe:	e003      	b.n	2308 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    2300:	4b04      	ldr	r3, [pc, #16]	; (2314 <system_clock_source_get_hz+0xa8>)
    2302:	68db      	ldr	r3, [r3, #12]
    2304:	e000      	b.n	2308 <system_clock_source_get_hz+0x9c>

	default:
		return 0;
    2306:	2300      	movs	r3, #0
	}
}
    2308:	0018      	movs	r0, r3
    230a:	46bd      	mov	sp, r7
    230c:	b002      	add	sp, #8
    230e:	bd80      	pop	{r7, pc}
    2310:	0000606c 	.word	0x0000606c
    2314:	2000007c 	.word	0x2000007c
    2318:	40000c00 	.word	0x40000c00
    231c:	003d0900 	.word	0x003d0900
    2320:	00002251 	.word	0x00002251
    2324:	00002541 	.word	0x00002541
    2328:	02dc6c00 	.word	0x02dc6c00

0000232c <system_interrupt_enter_critical_section>:
{
    232c:	b580      	push	{r7, lr}
    232e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2330:	4b02      	ldr	r3, [pc, #8]	; (233c <system_interrupt_enter_critical_section+0x10>)
    2332:	4798      	blx	r3
}
    2334:	46c0      	nop			; (mov r8, r8)
    2336:	46bd      	mov	sp, r7
    2338:	bd80      	pop	{r7, pc}
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	00000115 	.word	0x00000115

00002340 <system_interrupt_leave_critical_section>:
{
    2340:	b580      	push	{r7, lr}
    2342:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2344:	4b02      	ldr	r3, [pc, #8]	; (2350 <system_interrupt_leave_critical_section+0x10>)
    2346:	4798      	blx	r3
}
    2348:	46c0      	nop			; (mov r8, r8)
    234a:	46bd      	mov	sp, r7
    234c:	bd80      	pop	{r7, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	00000169 	.word	0x00000169

00002354 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    2354:	b580      	push	{r7, lr}
    2356:	b082      	sub	sp, #8
    2358:	af00      	add	r7, sp, #0
    235a:	0002      	movs	r2, r0
    235c:	1dfb      	adds	r3, r7, #7
    235e:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2360:	4b09      	ldr	r3, [pc, #36]	; (2388 <system_gclk_is_syncing+0x34>)
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	1dfa      	adds	r2, r7, #7
    2366:	7812      	ldrb	r2, [r2, #0]
    2368:	2101      	movs	r1, #1
    236a:	4091      	lsls	r1, r2
    236c:	000a      	movs	r2, r1
    236e:	0092      	lsls	r2, r2, #2
    2370:	4013      	ands	r3, r2
    2372:	4a06      	ldr	r2, [pc, #24]	; (238c <system_gclk_is_syncing+0x38>)
    2374:	4013      	ands	r3, r2
    2376:	d001      	beq.n	237c <system_gclk_is_syncing+0x28>
		 return true;
    2378:	2301      	movs	r3, #1
    237a:	e000      	b.n	237e <system_gclk_is_syncing+0x2a>
	}

	 return false;
    237c:	2300      	movs	r3, #0
}
    237e:	0018      	movs	r0, r3
    2380:	46bd      	mov	sp, r7
    2382:	b002      	add	sp, #8
    2384:	bd80      	pop	{r7, pc}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	40001800 	.word	0x40001800
    238c:	000007fc 	.word	0x000007fc

00002390 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2390:	b580      	push	{r7, lr}
    2392:	b086      	sub	sp, #24
    2394:	af00      	add	r7, sp, #0
    2396:	0002      	movs	r2, r0
    2398:	1dfb      	adds	r3, r7, #7
    239a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    239c:	46c0      	nop			; (mov r8, r8)
    239e:	1dfb      	adds	r3, r7, #7
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	0018      	movs	r0, r3
    23a4:	4b24      	ldr	r3, [pc, #144]	; (2438 <system_gclk_gen_get_hz+0xa8>)
    23a6:	4798      	blx	r3
    23a8:	1e03      	subs	r3, r0, #0
    23aa:	d1f8      	bne.n	239e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    23ac:	4b23      	ldr	r3, [pc, #140]	; (243c <system_gclk_gen_get_hz+0xac>)
    23ae:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    23b0:	4a23      	ldr	r2, [pc, #140]	; (2440 <system_gclk_gen_get_hz+0xb0>)
    23b2:	1dfb      	adds	r3, r7, #7
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	3308      	adds	r3, #8
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	589b      	ldr	r3, [r3, r2]
    23bc:	071b      	lsls	r3, r3, #28
    23be:	0f1b      	lsrs	r3, r3, #28
    23c0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    23c2:	0018      	movs	r0, r3
    23c4:	4b1f      	ldr	r3, [pc, #124]	; (2444 <system_gclk_gen_get_hz+0xb4>)
    23c6:	4798      	blx	r3
    23c8:	0003      	movs	r3, r0
    23ca:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    23cc:	4a1c      	ldr	r2, [pc, #112]	; (2440 <system_gclk_gen_get_hz+0xb0>)
    23ce:	1dfb      	adds	r3, r7, #7
    23d0:	781b      	ldrb	r3, [r3, #0]
    23d2:	3308      	adds	r3, #8
    23d4:	009b      	lsls	r3, r3, #2
    23d6:	589b      	ldr	r3, [r3, r2]
    23d8:	04db      	lsls	r3, r3, #19
    23da:	0fdb      	lsrs	r3, r3, #31
    23dc:	b2da      	uxtb	r2, r3
    23de:	2313      	movs	r3, #19
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    23e4:	4a16      	ldr	r2, [pc, #88]	; (2440 <system_gclk_gen_get_hz+0xb0>)
    23e6:	1dfb      	adds	r3, r7, #7
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	3308      	adds	r3, #8
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	589b      	ldr	r3, [r3, r2]
    23f0:	0c1b      	lsrs	r3, r3, #16
    23f2:	b29b      	uxth	r3, r3
    23f4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    23f6:	4b14      	ldr	r3, [pc, #80]	; (2448 <system_gclk_gen_get_hz+0xb8>)
    23f8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    23fa:	2313      	movs	r3, #19
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	2b00      	cmp	r3, #0
    2402:	d109      	bne.n	2418 <system_gclk_gen_get_hz+0x88>
    2404:	68fb      	ldr	r3, [r7, #12]
    2406:	2b01      	cmp	r3, #1
    2408:	d906      	bls.n	2418 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    240a:	4b10      	ldr	r3, [pc, #64]	; (244c <system_gclk_gen_get_hz+0xbc>)
    240c:	68f9      	ldr	r1, [r7, #12]
    240e:	6978      	ldr	r0, [r7, #20]
    2410:	4798      	blx	r3
    2412:	0003      	movs	r3, r0
    2414:	617b      	str	r3, [r7, #20]
    2416:	e00a      	b.n	242e <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    2418:	2313      	movs	r3, #19
    241a:	18fb      	adds	r3, r7, r3
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	2b00      	cmp	r3, #0
    2420:	d005      	beq.n	242e <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	3301      	adds	r3, #1
    2426:	697a      	ldr	r2, [r7, #20]
    2428:	40da      	lsrs	r2, r3
    242a:	0013      	movs	r3, r2
    242c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    242e:	697b      	ldr	r3, [r7, #20]
}
    2430:	0018      	movs	r0, r3
    2432:	46bd      	mov	sp, r7
    2434:	b006      	add	sp, #24
    2436:	bd80      	pop	{r7, pc}
    2438:	00002355 	.word	0x00002355
    243c:	0000232d 	.word	0x0000232d
    2440:	40001800 	.word	0x40001800
    2444:	0000226d 	.word	0x0000226d
    2448:	00002341 	.word	0x00002341
    244c:	00004149 	.word	0x00004149

00002450 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2450:	b580      	push	{r7, lr}
    2452:	b082      	sub	sp, #8
    2454:	af00      	add	r7, sp, #0
    2456:	0002      	movs	r2, r0
    2458:	6039      	str	r1, [r7, #0]
    245a:	1dfb      	adds	r3, r7, #7
    245c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    245e:	1dfb      	adds	r3, r7, #7
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	0018      	movs	r0, r3
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <system_gclk_chan_set_config+0x38>)
    2466:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2468:	4908      	ldr	r1, [pc, #32]	; (248c <system_gclk_chan_set_config+0x3c>)
    246a:	1dfb      	adds	r3, r7, #7
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	683a      	ldr	r2, [r7, #0]
    2470:	7812      	ldrb	r2, [r2, #0]
    2472:	0010      	movs	r0, r2
    2474:	220f      	movs	r2, #15
    2476:	4002      	ands	r2, r0
    2478:	3320      	adds	r3, #32
    247a:	009b      	lsls	r3, r3, #2
    247c:	505a      	str	r2, [r3, r1]


}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	46bd      	mov	sp, r7
    2482:	b002      	add	sp, #8
    2484:	bd80      	pop	{r7, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	000024e9 	.word	0x000024e9
    248c:	40001800 	.word	0x40001800

00002490 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2490:	b580      	push	{r7, lr}
    2492:	b082      	sub	sp, #8
    2494:	af00      	add	r7, sp, #0
    2496:	0002      	movs	r2, r0
    2498:	1dfb      	adds	r3, r7, #7
    249a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    249c:	4b0f      	ldr	r3, [pc, #60]	; (24dc <system_gclk_chan_enable+0x4c>)
    249e:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    24a0:	490f      	ldr	r1, [pc, #60]	; (24e0 <system_gclk_chan_enable+0x50>)
    24a2:	1dfb      	adds	r3, r7, #7
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	480e      	ldr	r0, [pc, #56]	; (24e0 <system_gclk_chan_enable+0x50>)
    24a8:	1dfa      	adds	r2, r7, #7
    24aa:	7812      	ldrb	r2, [r2, #0]
    24ac:	3220      	adds	r2, #32
    24ae:	0092      	lsls	r2, r2, #2
    24b0:	5812      	ldr	r2, [r2, r0]
    24b2:	2040      	movs	r0, #64	; 0x40
    24b4:	4302      	orrs	r2, r0
    24b6:	3320      	adds	r3, #32
    24b8:	009b      	lsls	r3, r3, #2
    24ba:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    24bc:	46c0      	nop			; (mov r8, r8)
    24be:	4a08      	ldr	r2, [pc, #32]	; (24e0 <system_gclk_chan_enable+0x50>)
    24c0:	1dfb      	adds	r3, r7, #7
    24c2:	781b      	ldrb	r3, [r3, #0]
    24c4:	3320      	adds	r3, #32
    24c6:	009b      	lsls	r3, r3, #2
    24c8:	589b      	ldr	r3, [r3, r2]
    24ca:	2240      	movs	r2, #64	; 0x40
    24cc:	4013      	ands	r3, r2
    24ce:	d0f6      	beq.n	24be <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <system_gclk_chan_enable+0x54>)
    24d2:	4798      	blx	r3
}
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	46bd      	mov	sp, r7
    24d8:	b002      	add	sp, #8
    24da:	bd80      	pop	{r7, pc}
    24dc:	0000232d 	.word	0x0000232d
    24e0:	40001800 	.word	0x40001800
    24e4:	00002341 	.word	0x00002341

000024e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	b082      	sub	sp, #8
    24ec:	af00      	add	r7, sp, #0
    24ee:	0002      	movs	r2, r0
    24f0:	1dfb      	adds	r3, r7, #7
    24f2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    24f4:	4b0f      	ldr	r3, [pc, #60]	; (2534 <system_gclk_chan_disable+0x4c>)
    24f6:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    24f8:	490f      	ldr	r1, [pc, #60]	; (2538 <system_gclk_chan_disable+0x50>)
    24fa:	1dfb      	adds	r3, r7, #7
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	480e      	ldr	r0, [pc, #56]	; (2538 <system_gclk_chan_disable+0x50>)
    2500:	1dfa      	adds	r2, r7, #7
    2502:	7812      	ldrb	r2, [r2, #0]
    2504:	3220      	adds	r2, #32
    2506:	0092      	lsls	r2, r2, #2
    2508:	5812      	ldr	r2, [r2, r0]
    250a:	2040      	movs	r0, #64	; 0x40
    250c:	4382      	bics	r2, r0
    250e:	3320      	adds	r3, #32
    2510:	009b      	lsls	r3, r3, #2
    2512:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2514:	46c0      	nop			; (mov r8, r8)
    2516:	4a08      	ldr	r2, [pc, #32]	; (2538 <system_gclk_chan_disable+0x50>)
    2518:	1dfb      	adds	r3, r7, #7
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	3320      	adds	r3, #32
    251e:	009b      	lsls	r3, r3, #2
    2520:	589b      	ldr	r3, [r3, r2]
    2522:	2240      	movs	r2, #64	; 0x40
    2524:	4013      	ands	r3, r2
    2526:	d1f6      	bne.n	2516 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    2528:	4b04      	ldr	r3, [pc, #16]	; (253c <system_gclk_chan_disable+0x54>)
    252a:	4798      	blx	r3
}
    252c:	46c0      	nop			; (mov r8, r8)
    252e:	46bd      	mov	sp, r7
    2530:	b002      	add	sp, #8
    2532:	bd80      	pop	{r7, pc}
    2534:	0000232d 	.word	0x0000232d
    2538:	40001800 	.word	0x40001800
    253c:	00002341 	.word	0x00002341

00002540 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2540:	b580      	push	{r7, lr}
    2542:	b084      	sub	sp, #16
    2544:	af00      	add	r7, sp, #0
    2546:	0002      	movs	r2, r0
    2548:	1dfb      	adds	r3, r7, #7
    254a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    254c:	4b0d      	ldr	r3, [pc, #52]	; (2584 <system_gclk_chan_get_hz+0x44>)
    254e:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2550:	4a0d      	ldr	r2, [pc, #52]	; (2588 <system_gclk_chan_get_hz+0x48>)
    2552:	1dfb      	adds	r3, r7, #7
    2554:	781b      	ldrb	r3, [r3, #0]
    2556:	3320      	adds	r3, #32
    2558:	009b      	lsls	r3, r3, #2
    255a:	589b      	ldr	r3, [r3, r2]
    255c:	071b      	lsls	r3, r3, #28
    255e:	0f1b      	lsrs	r3, r3, #28
    2560:	b2da      	uxtb	r2, r3
    2562:	230f      	movs	r3, #15
    2564:	18fb      	adds	r3, r7, r3
    2566:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    2568:	4b08      	ldr	r3, [pc, #32]	; (258c <system_gclk_chan_get_hz+0x4c>)
    256a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    256c:	230f      	movs	r3, #15
    256e:	18fb      	adds	r3, r7, r3
    2570:	781b      	ldrb	r3, [r3, #0]
    2572:	0018      	movs	r0, r3
    2574:	4b06      	ldr	r3, [pc, #24]	; (2590 <system_gclk_chan_get_hz+0x50>)
    2576:	4798      	blx	r3
    2578:	0003      	movs	r3, r0
}
    257a:	0018      	movs	r0, r3
    257c:	46bd      	mov	sp, r7
    257e:	b004      	add	sp, #16
    2580:	bd80      	pop	{r7, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	0000232d 	.word	0x0000232d
    2588:	40001800 	.word	0x40001800
    258c:	00002341 	.word	0x00002341
    2590:	00002391 	.word	0x00002391

00002594 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2594:	b580      	push	{r7, lr}
    2596:	b084      	sub	sp, #16
    2598:	af00      	add	r7, sp, #0
    259a:	0002      	movs	r2, r0
    259c:	1dfb      	adds	r3, r7, #7
    259e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25a0:	230f      	movs	r3, #15
    25a2:	18fb      	adds	r3, r7, r3
    25a4:	1dfa      	adds	r2, r7, #7
    25a6:	7812      	ldrb	r2, [r2, #0]
    25a8:	09d2      	lsrs	r2, r2, #7
    25aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25ac:	230e      	movs	r3, #14
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	1dfa      	adds	r2, r7, #7
    25b2:	7812      	ldrb	r2, [r2, #0]
    25b4:	0952      	lsrs	r2, r2, #5
    25b6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25b8:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25ba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    25bc:	230f      	movs	r3, #15
    25be:	18fb      	adds	r3, r7, r3
    25c0:	781b      	ldrb	r3, [r3, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d10f      	bne.n	25e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25c6:	230f      	movs	r3, #15
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	009b      	lsls	r3, r3, #2
    25ce:	2210      	movs	r2, #16
    25d0:	4694      	mov	ip, r2
    25d2:	44bc      	add	ip, r7
    25d4:	4463      	add	r3, ip
    25d6:	3b08      	subs	r3, #8
    25d8:	681a      	ldr	r2, [r3, #0]
    25da:	230e      	movs	r3, #14
    25dc:	18fb      	adds	r3, r7, r3
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	01db      	lsls	r3, r3, #7
    25e2:	18d3      	adds	r3, r2, r3
    25e4:	e000      	b.n	25e8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    25e6:	2300      	movs	r3, #0
	}
}
    25e8:	0018      	movs	r0, r3
    25ea:	46bd      	mov	sp, r7
    25ec:	b004      	add	sp, #16
    25ee:	bd80      	pop	{r7, pc}
    25f0:	40002800 	.word	0x40002800

000025f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b088      	sub	sp, #32
    25f8:	af00      	add	r7, sp, #0
    25fa:	60f8      	str	r0, [r7, #12]
    25fc:	60b9      	str	r1, [r7, #8]
    25fe:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2600:	2300      	movs	r3, #0
    2602:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	78db      	ldrb	r3, [r3, #3]
    2608:	2201      	movs	r2, #1
    260a:	4053      	eors	r3, r2
    260c:	b2db      	uxtb	r3, r3
    260e:	2b00      	cmp	r3, #0
    2610:	d035      	beq.n	267e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	2b80      	cmp	r3, #128	; 0x80
    2618:	d00b      	beq.n	2632 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    261a:	69fb      	ldr	r3, [r7, #28]
    261c:	2280      	movs	r2, #128	; 0x80
    261e:	0252      	lsls	r2, r2, #9
    2620:	4313      	orrs	r3, r2
    2622:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	061b      	lsls	r3, r3, #24
    262a:	001a      	movs	r2, r3
    262c:	69fb      	ldr	r3, [r7, #28]
    262e:	4313      	orrs	r3, r2
    2630:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	785b      	ldrb	r3, [r3, #1]
    2636:	2b00      	cmp	r3, #0
    2638:	d003      	beq.n	2642 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    263e:	2b02      	cmp	r3, #2
    2640:	d110      	bne.n	2664 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2642:	69fb      	ldr	r3, [r7, #28]
    2644:	2280      	movs	r2, #128	; 0x80
    2646:	0292      	lsls	r2, r2, #10
    2648:	4313      	orrs	r3, r2
    264a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	789b      	ldrb	r3, [r3, #2]
    2650:	2b00      	cmp	r3, #0
    2652:	d004      	beq.n	265e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2654:	69fb      	ldr	r3, [r7, #28]
    2656:	2280      	movs	r2, #128	; 0x80
    2658:	02d2      	lsls	r2, r2, #11
    265a:	4313      	orrs	r3, r2
    265c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	68ba      	ldr	r2, [r7, #8]
    2662:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	785b      	ldrb	r3, [r3, #1]
    2668:	2b01      	cmp	r3, #1
    266a:	d003      	beq.n	2674 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2670:	2b02      	cmp	r3, #2
    2672:	d107      	bne.n	2684 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2674:	69fb      	ldr	r3, [r7, #28]
    2676:	4a22      	ldr	r2, [pc, #136]	; (2700 <_system_pinmux_config+0x10c>)
    2678:	4013      	ands	r3, r2
    267a:	61fb      	str	r3, [r7, #28]
    267c:	e002      	b.n	2684 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    267e:	68fb      	ldr	r3, [r7, #12]
    2680:	68ba      	ldr	r2, [r7, #8]
    2682:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2684:	68bb      	ldr	r3, [r7, #8]
    2686:	041b      	lsls	r3, r3, #16
    2688:	0c1b      	lsrs	r3, r3, #16
    268a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    268c:	68bb      	ldr	r3, [r7, #8]
    268e:	0c1b      	lsrs	r3, r3, #16
    2690:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2692:	69ba      	ldr	r2, [r7, #24]
    2694:	69fb      	ldr	r3, [r7, #28]
    2696:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2698:	22a0      	movs	r2, #160	; 0xa0
    269a:	05d2      	lsls	r2, r2, #23
    269c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26a2:	697a      	ldr	r2, [r7, #20]
    26a4:	69fb      	ldr	r3, [r7, #28]
    26a6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26a8:	22d0      	movs	r2, #208	; 0xd0
    26aa:	0612      	lsls	r2, r2, #24
    26ac:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ae:	68fb      	ldr	r3, [r7, #12]
    26b0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	78db      	ldrb	r3, [r3, #3]
    26b6:	2201      	movs	r2, #1
    26b8:	4053      	eors	r3, r2
    26ba:	b2db      	uxtb	r3, r3
    26bc:	2b00      	cmp	r3, #0
    26be:	d01a      	beq.n	26f6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    26c0:	69fa      	ldr	r2, [r7, #28]
    26c2:	2380      	movs	r3, #128	; 0x80
    26c4:	02db      	lsls	r3, r3, #11
    26c6:	4013      	ands	r3, r2
    26c8:	d00a      	beq.n	26e0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	789b      	ldrb	r3, [r3, #2]
    26ce:	2b01      	cmp	r3, #1
    26d0:	d103      	bne.n	26da <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	68ba      	ldr	r2, [r7, #8]
    26d6:	619a      	str	r2, [r3, #24]
    26d8:	e002      	b.n	26e0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	68ba      	ldr	r2, [r7, #8]
    26de:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	785b      	ldrb	r3, [r3, #1]
    26e4:	2b01      	cmp	r3, #1
    26e6:	d003      	beq.n	26f0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26ec:	2b02      	cmp	r3, #2
    26ee:	d102      	bne.n	26f6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    26f0:	68fb      	ldr	r3, [r7, #12]
    26f2:	68ba      	ldr	r2, [r7, #8]
    26f4:	609a      	str	r2, [r3, #8]
		}
	}
}
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	46bd      	mov	sp, r7
    26fa:	b008      	add	sp, #32
    26fc:	bd80      	pop	{r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	fffbffff 	.word	0xfffbffff

00002704 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2704:	b580      	push	{r7, lr}
    2706:	b084      	sub	sp, #16
    2708:	af00      	add	r7, sp, #0
    270a:	0002      	movs	r2, r0
    270c:	6039      	str	r1, [r7, #0]
    270e:	1dfb      	adds	r3, r7, #7
    2710:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2712:	1dfb      	adds	r3, r7, #7
    2714:	781b      	ldrb	r3, [r3, #0]
    2716:	0018      	movs	r0, r3
    2718:	4b0a      	ldr	r3, [pc, #40]	; (2744 <system_pinmux_pin_set_config+0x40>)
    271a:	4798      	blx	r3
    271c:	0003      	movs	r3, r0
    271e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2720:	1dfb      	adds	r3, r7, #7
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	221f      	movs	r2, #31
    2726:	4013      	ands	r3, r2
    2728:	2201      	movs	r2, #1
    272a:	409a      	lsls	r2, r3
    272c:	0013      	movs	r3, r2
    272e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2730:	683a      	ldr	r2, [r7, #0]
    2732:	68b9      	ldr	r1, [r7, #8]
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	0018      	movs	r0, r3
    2738:	4b03      	ldr	r3, [pc, #12]	; (2748 <system_pinmux_pin_set_config+0x44>)
    273a:	4798      	blx	r3
}
    273c:	46c0      	nop			; (mov r8, r8)
    273e:	46bd      	mov	sp, r7
    2740:	b004      	add	sp, #16
    2742:	bd80      	pop	{r7, pc}
    2744:	00002595 	.word	0x00002595
    2748:	000025f5 	.word	0x000025f5

0000274c <system_gclk_chan_get_config_defaults>:
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2200      	movs	r2, #0
    2758:	701a      	strb	r2, [r3, #0]
}
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	46bd      	mov	sp, r7
    275e:	b002      	add	sp, #8
    2760:	bd80      	pop	{r7, pc}
	...

00002764 <system_apb_clock_set_mask>:
{
    2764:	b580      	push	{r7, lr}
    2766:	b082      	sub	sp, #8
    2768:	af00      	add	r7, sp, #0
    276a:	0002      	movs	r2, r0
    276c:	6039      	str	r1, [r7, #0]
    276e:	1dfb      	adds	r3, r7, #7
    2770:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2772:	1dfb      	adds	r3, r7, #7
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	2b04      	cmp	r3, #4
    2778:	d827      	bhi.n	27ca <system_apb_clock_set_mask+0x66>
    277a:	009a      	lsls	r2, r3, #2
    277c:	4b16      	ldr	r3, [pc, #88]	; (27d8 <system_apb_clock_set_mask+0x74>)
    277e:	18d3      	adds	r3, r2, r3
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    2784:	4b15      	ldr	r3, [pc, #84]	; (27dc <system_apb_clock_set_mask+0x78>)
    2786:	4a15      	ldr	r2, [pc, #84]	; (27dc <system_apb_clock_set_mask+0x78>)
    2788:	6951      	ldr	r1, [r2, #20]
    278a:	683a      	ldr	r2, [r7, #0]
    278c:	430a      	orrs	r2, r1
    278e:	615a      	str	r2, [r3, #20]
			break;
    2790:	e01d      	b.n	27ce <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    2792:	4b12      	ldr	r3, [pc, #72]	; (27dc <system_apb_clock_set_mask+0x78>)
    2794:	4a11      	ldr	r2, [pc, #68]	; (27dc <system_apb_clock_set_mask+0x78>)
    2796:	6991      	ldr	r1, [r2, #24]
    2798:	683a      	ldr	r2, [r7, #0]
    279a:	430a      	orrs	r2, r1
    279c:	619a      	str	r2, [r3, #24]
			break;
    279e:	e016      	b.n	27ce <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    27a0:	4b0e      	ldr	r3, [pc, #56]	; (27dc <system_apb_clock_set_mask+0x78>)
    27a2:	4a0e      	ldr	r2, [pc, #56]	; (27dc <system_apb_clock_set_mask+0x78>)
    27a4:	69d1      	ldr	r1, [r2, #28]
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	430a      	orrs	r2, r1
    27aa:	61da      	str	r2, [r3, #28]
			break;
    27ac:	e00f      	b.n	27ce <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <system_apb_clock_set_mask+0x78>)
    27b0:	4a0a      	ldr	r2, [pc, #40]	; (27dc <system_apb_clock_set_mask+0x78>)
    27b2:	6a11      	ldr	r1, [r2, #32]
    27b4:	683a      	ldr	r2, [r7, #0]
    27b6:	430a      	orrs	r2, r1
    27b8:	621a      	str	r2, [r3, #32]
			break;
    27ba:	e008      	b.n	27ce <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    27bc:	4b07      	ldr	r3, [pc, #28]	; (27dc <system_apb_clock_set_mask+0x78>)
    27be:	4a07      	ldr	r2, [pc, #28]	; (27dc <system_apb_clock_set_mask+0x78>)
    27c0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    27c2:	683a      	ldr	r2, [r7, #0]
    27c4:	430a      	orrs	r2, r1
    27c6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    27c8:	e001      	b.n	27ce <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    27ca:	2317      	movs	r3, #23
    27cc:	e000      	b.n	27d0 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    27ce:	2300      	movs	r3, #0
}
    27d0:	0018      	movs	r0, r3
    27d2:	46bd      	mov	sp, r7
    27d4:	b002      	add	sp, #8
    27d6:	bd80      	pop	{r7, pc}
    27d8:	00006090 	.word	0x00006090
    27dc:	40000400 	.word	0x40000400

000027e0 <system_pinmux_get_config_defaults>:
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b082      	sub	sp, #8
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2280      	movs	r2, #128	; 0x80
    27ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	2200      	movs	r2, #0
    27f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	2201      	movs	r2, #1
    27f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	2200      	movs	r2, #0
    27fe:	70da      	strb	r2, [r3, #3]
}
    2800:	46c0      	nop			; (mov r8, r8)
    2802:	46bd      	mov	sp, r7
    2804:	b002      	add	sp, #8
    2806:	bd80      	pop	{r7, pc}

00002808 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    2808:	b580      	push	{r7, lr}
    280a:	b084      	sub	sp, #16
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2810:	2300      	movs	r3, #0
    2812:	60fb      	str	r3, [r7, #12]
    2814:	e00c      	b.n	2830 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    2816:	4b0a      	ldr	r3, [pc, #40]	; (2840 <_tcc_get_inst_index+0x38>)
    2818:	68fa      	ldr	r2, [r7, #12]
    281a:	0092      	lsls	r2, r2, #2
    281c:	58d2      	ldr	r2, [r2, r3]
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	429a      	cmp	r2, r3
    2822:	d102      	bne.n	282a <_tcc_get_inst_index+0x22>
			return i;
    2824:	68fb      	ldr	r3, [r7, #12]
    2826:	b2db      	uxtb	r3, r3
    2828:	e006      	b.n	2838 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	3301      	adds	r3, #1
    282e:	60fb      	str	r3, [r7, #12]
    2830:	68fb      	ldr	r3, [r7, #12]
    2832:	2b02      	cmp	r3, #2
    2834:	d9ef      	bls.n	2816 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2836:	2300      	movs	r3, #0
}
    2838:	0018      	movs	r0, r3
    283a:	46bd      	mov	sp, r7
    283c:	b004      	add	sp, #16
    283e:	bd80      	pop	{r7, pc}
    2840:	000060a4 	.word	0x000060a4

00002844 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2844:	b590      	push	{r4, r7, lr}
    2846:	b085      	sub	sp, #20
    2848:	af00      	add	r7, sp, #0
    284a:	6078      	str	r0, [r7, #4]
    284c:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    284e:	230f      	movs	r3, #15
    2850:	18fc      	adds	r4, r7, r3
    2852:	683b      	ldr	r3, [r7, #0]
    2854:	0018      	movs	r0, r3
    2856:	4bae      	ldr	r3, [pc, #696]	; (2b10 <tcc_get_config_defaults+0x2cc>)
    2858:	4798      	blx	r3
    285a:	0003      	movs	r3, r0
    285c:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	2200      	movs	r2, #0
    2862:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2864:	230f      	movs	r3, #15
    2866:	18fb      	adds	r3, r7, r3
    2868:	781a      	ldrb	r2, [r3, #0]
    286a:	4baa      	ldr	r3, [pc, #680]	; (2b14 <tcc_get_config_defaults+0x2d0>)
    286c:	0092      	lsls	r2, r2, #2
    286e:	58d2      	ldr	r2, [r2, r3]
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	2200      	movs	r2, #0
    2878:	72da      	strb	r2, [r3, #11]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	2200      	movs	r2, #0
    287e:	731a      	strb	r2, [r3, #12]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	2200      	movs	r2, #0
    2884:	735a      	strb	r2, [r3, #13]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	2200      	movs	r2, #0
    288a:	729a      	strb	r2, [r3, #10]
	config->counter.oneshot                = false;
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	2200      	movs	r2, #0
    2890:	721a      	strb	r2, [r3, #8]

#ifdef FEATURE_TCC_GENERATE_DMA_TRIGGER
	config->counter.dma_trigger_mode       = TCC_COUNT_OVERFLOW_DMA_TRIGGER_MODE_CONTINUE;
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	2200      	movs	r2, #0
    2896:	725a      	strb	r2, [r3, #9]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2898:	687b      	ldr	r3, [r7, #4]
    289a:	2200      	movs	r2, #0
    289c:	61da      	str	r2, [r3, #28]
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	2200      	movs	r2, #0
    28a2:	621a      	str	r2, [r3, #32]
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	2200      	movs	r2, #0
    28a8:	625a      	str	r2, [r3, #36]	; 0x24
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	2200      	movs	r2, #0
    28ae:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	2200      	movs	r2, #0
    28b4:	751a      	strb	r2, [r3, #20]
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	2200      	movs	r2, #0
    28ba:	755a      	strb	r2, [r3, #21]
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	2200      	movs	r2, #0
    28c0:	759a      	strb	r2, [r3, #22]
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	2200      	movs	r2, #0
    28c6:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	2200      	movs	r2, #0
    28cc:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	2200      	movs	r2, #0
    28d2:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	2200      	movs	r2, #0
    28d8:	741a      	strb	r2, [r3, #16]
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	2200      	movs	r2, #0
    28de:	745a      	strb	r2, [r3, #17]
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	2200      	movs	r2, #0
    28e4:	749a      	strb	r2, [r3, #18]
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	2200      	movs	r2, #0
    28ea:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	222c      	movs	r2, #44	; 0x2c
    28f0:	2100      	movs	r1, #0
    28f2:	5499      	strb	r1, [r3, r2]
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	222d      	movs	r2, #45	; 0x2d
    28f8:	2100      	movs	r1, #0
    28fa:	5499      	strb	r1, [r3, r2]
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	222e      	movs	r2, #46	; 0x2e
    2900:	2100      	movs	r1, #0
    2902:	5499      	strb	r1, [r3, r2]
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	222f      	movs	r2, #47	; 0x2f
    2908:	2100      	movs	r1, #0
    290a:	5499      	strb	r1, [r3, r2]
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	2230      	movs	r2, #48	; 0x30
    2910:	2100      	movs	r1, #0
    2912:	5499      	strb	r1, [r3, r2]
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	2231      	movs	r2, #49	; 0x31
    2918:	2100      	movs	r1, #0
    291a:	5499      	strb	r1, [r3, r2]
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	2232      	movs	r2, #50	; 0x32
    2920:	2100      	movs	r1, #0
    2922:	5499      	strb	r1, [r3, r2]
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	2233      	movs	r2, #51	; 0x33
    2928:	2100      	movs	r1, #0
    292a:	5499      	strb	r1, [r3, r2]
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	2234      	movs	r2, #52	; 0x34
    2930:	2100      	movs	r1, #0
    2932:	5499      	strb	r1, [r3, r2]
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	2235      	movs	r2, #53	; 0x35
    2938:	2100      	movs	r1, #0
    293a:	5499      	strb	r1, [r3, r2]
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	2236      	movs	r2, #54	; 0x36
    2940:	2100      	movs	r1, #0
    2942:	5499      	strb	r1, [r3, r2]
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	2237      	movs	r2, #55	; 0x37
    2948:	2100      	movs	r1, #0
    294a:	5499      	strb	r1, [r3, r2]
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2238      	movs	r2, #56	; 0x38
    2950:	2100      	movs	r1, #0
    2952:	5499      	strb	r1, [r3, r2]
    2954:	687b      	ldr	r3, [r7, #4]
    2956:	2239      	movs	r2, #57	; 0x39
    2958:	2100      	movs	r1, #0
    295a:	5499      	strb	r1, [r3, r2]
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	223a      	movs	r2, #58	; 0x3a
    2960:	2100      	movs	r1, #0
    2962:	5499      	strb	r1, [r3, r2]
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	223b      	movs	r2, #59	; 0x3b
    2968:	2100      	movs	r1, #0
    296a:	5499      	strb	r1, [r3, r2]
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	223c      	movs	r2, #60	; 0x3c
    2970:	2100      	movs	r1, #0
    2972:	5499      	strb	r1, [r3, r2]
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	223d      	movs	r2, #61	; 0x3d
    2978:	2100      	movs	r1, #0
    297a:	5499      	strb	r1, [r3, r2]
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	223e      	movs	r2, #62	; 0x3e
    2980:	2100      	movs	r1, #0
    2982:	5499      	strb	r1, [r3, r2]
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	223f      	movs	r2, #63	; 0x3f
    2988:	2100      	movs	r1, #0
    298a:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	2240      	movs	r2, #64	; 0x40
    2990:	2100      	movs	r1, #0
    2992:	5499      	strb	r1, [r3, r2]
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	2241      	movs	r2, #65	; 0x41
    2998:	2100      	movs	r1, #0
    299a:	5499      	strb	r1, [r3, r2]
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	2242      	movs	r2, #66	; 0x42
    29a0:	2100      	movs	r1, #0
    29a2:	5499      	strb	r1, [r3, r2]
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	2243      	movs	r2, #67	; 0x43
    29a8:	2100      	movs	r1, #0
    29aa:	5499      	strb	r1, [r3, r2]
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	2244      	movs	r2, #68	; 0x44
    29b0:	2100      	movs	r1, #0
    29b2:	5499      	strb	r1, [r3, r2]
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	2245      	movs	r2, #69	; 0x45
    29b8:	2100      	movs	r1, #0
    29ba:	5499      	strb	r1, [r3, r2]
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	2246      	movs	r2, #70	; 0x46
    29c0:	2100      	movs	r1, #0
    29c2:	5499      	strb	r1, [r3, r2]
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	2247      	movs	r2, #71	; 0x47
    29c8:	2100      	movs	r1, #0
    29ca:	5499      	strb	r1, [r3, r2]
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	2248      	movs	r2, #72	; 0x48
    29d0:	2100      	movs	r1, #0
    29d2:	5499      	strb	r1, [r3, r2]
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	2249      	movs	r2, #73	; 0x49
    29d8:	2100      	movs	r1, #0
    29da:	5499      	strb	r1, [r3, r2]
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	224a      	movs	r2, #74	; 0x4a
    29e0:	2100      	movs	r1, #0
    29e2:	5499      	strb	r1, [r3, r2]
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	224b      	movs	r2, #75	; 0x4b
    29e8:	2100      	movs	r1, #0
    29ea:	5499      	strb	r1, [r3, r2]
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	224c      	movs	r2, #76	; 0x4c
    29f0:	2100      	movs	r1, #0
    29f2:	5499      	strb	r1, [r3, r2]
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	224d      	movs	r2, #77	; 0x4d
    29f8:	2100      	movs	r1, #0
    29fa:	5499      	strb	r1, [r3, r2]
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	224e      	movs	r2, #78	; 0x4e
    2a00:	2100      	movs	r1, #0
    2a02:	5499      	strb	r1, [r3, r2]
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	224f      	movs	r2, #79	; 0x4f
    2a08:	2100      	movs	r1, #0
    2a0a:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	2250      	movs	r2, #80	; 0x50
    2a10:	2100      	movs	r1, #0
    2a12:	5499      	strb	r1, [r3, r2]
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	2251      	movs	r2, #81	; 0x51
    2a18:	2100      	movs	r1, #0
    2a1a:	5499      	strb	r1, [r3, r2]
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	2252      	movs	r2, #82	; 0x52
    2a20:	2100      	movs	r1, #0
    2a22:	5499      	strb	r1, [r3, r2]
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	2253      	movs	r2, #83	; 0x53
    2a28:	2100      	movs	r1, #0
    2a2a:	5499      	strb	r1, [r3, r2]
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	2254      	movs	r2, #84	; 0x54
    2a30:	2100      	movs	r1, #0
    2a32:	5499      	strb	r1, [r3, r2]
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2255      	movs	r2, #85	; 0x55
    2a38:	2100      	movs	r1, #0
    2a3a:	5499      	strb	r1, [r3, r2]
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	2256      	movs	r2, #86	; 0x56
    2a40:	2100      	movs	r1, #0
    2a42:	5499      	strb	r1, [r3, r2]
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	2257      	movs	r2, #87	; 0x57
    2a48:	2100      	movs	r1, #0
    2a4a:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	2298      	movs	r2, #152	; 0x98
    2a50:	2100      	movs	r1, #0
    2a52:	5499      	strb	r1, [r3, r2]
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	659a      	str	r2, [r3, #88]	; 0x58
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	2200      	movs	r2, #0
    2a5e:	679a      	str	r2, [r3, #120]	; 0x78
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	2299      	movs	r2, #153	; 0x99
    2a64:	2100      	movs	r1, #0
    2a66:	5499      	strb	r1, [r3, r2]
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	2200      	movs	r2, #0
    2a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	2200      	movs	r2, #0
    2a72:	67da      	str	r2, [r3, #124]	; 0x7c
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	229a      	movs	r2, #154	; 0x9a
    2a78:	2100      	movs	r1, #0
    2a7a:	5499      	strb	r1, [r3, r2]
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	2200      	movs	r2, #0
    2a80:	661a      	str	r2, [r3, #96]	; 0x60
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	2280      	movs	r2, #128	; 0x80
    2a86:	2100      	movs	r1, #0
    2a88:	5099      	str	r1, [r3, r2]
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	229b      	movs	r2, #155	; 0x9b
    2a8e:	2100      	movs	r1, #0
    2a90:	5499      	strb	r1, [r3, r2]
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	2200      	movs	r2, #0
    2a96:	665a      	str	r2, [r3, #100]	; 0x64
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	2284      	movs	r2, #132	; 0x84
    2a9c:	2100      	movs	r1, #0
    2a9e:	5099      	str	r1, [r3, r2]
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	229c      	movs	r2, #156	; 0x9c
    2aa4:	2100      	movs	r1, #0
    2aa6:	5499      	strb	r1, [r3, r2]
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	2200      	movs	r2, #0
    2aac:	669a      	str	r2, [r3, #104]	; 0x68
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	2288      	movs	r2, #136	; 0x88
    2ab2:	2100      	movs	r1, #0
    2ab4:	5099      	str	r1, [r3, r2]
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	229d      	movs	r2, #157	; 0x9d
    2aba:	2100      	movs	r1, #0
    2abc:	5499      	strb	r1, [r3, r2]
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	2200      	movs	r2, #0
    2ac2:	66da      	str	r2, [r3, #108]	; 0x6c
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	228c      	movs	r2, #140	; 0x8c
    2ac8:	2100      	movs	r1, #0
    2aca:	5099      	str	r1, [r3, r2]
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	229e      	movs	r2, #158	; 0x9e
    2ad0:	2100      	movs	r1, #0
    2ad2:	5499      	strb	r1, [r3, r2]
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	2200      	movs	r2, #0
    2ad8:	671a      	str	r2, [r3, #112]	; 0x70
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	2290      	movs	r2, #144	; 0x90
    2ade:	2100      	movs	r1, #0
    2ae0:	5099      	str	r1, [r3, r2]
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	229f      	movs	r2, #159	; 0x9f
    2ae6:	2100      	movs	r1, #0
    2ae8:	5499      	strb	r1, [r3, r2]
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	2200      	movs	r2, #0
    2aee:	675a      	str	r2, [r3, #116]	; 0x74
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	2294      	movs	r2, #148	; 0x94
    2af4:	2100      	movs	r1, #0
    2af6:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	22a0      	movs	r2, #160	; 0xa0
    2afc:	2101      	movs	r1, #1
    2afe:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	22a1      	movs	r2, #161	; 0xa1
    2b04:	2100      	movs	r1, #0
    2b06:	5499      	strb	r1, [r3, r2]
}
    2b08:	46c0      	nop			; (mov r8, r8)
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b005      	add	sp, #20
    2b0e:	bd90      	pop	{r4, r7, pc}
    2b10:	00002809 	.word	0x00002809
    2b14:	000060c0 	.word	0x000060c0

00002b18 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2b18:	b580      	push	{r7, lr}
    2b1a:	b086      	sub	sp, #24
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	60b9      	str	r1, [r7, #8]
    2b20:	607a      	str	r2, [r7, #4]
    2b22:	230f      	movs	r3, #15
    2b24:	18fb      	adds	r3, r7, r3
    2b26:	1c02      	adds	r2, r0, #0
    2b28:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    2b2a:	2300      	movs	r3, #0
    2b2c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2b2e:	2300      	movs	r3, #0
    2b30:	613b      	str	r3, [r7, #16]
    2b32:	e01d      	b.n	2b70 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    2b34:	68ba      	ldr	r2, [r7, #8]
    2b36:	693b      	ldr	r3, [r7, #16]
    2b38:	18d3      	adds	r3, r2, r3
    2b3a:	3310      	adds	r3, #16
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	2b01      	cmp	r3, #1
    2b40:	d113      	bne.n	2b6a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    2b42:	230f      	movs	r3, #15
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	4a1b      	ldr	r2, [pc, #108]	; (2bb8 <_tcc_build_ctrla+0xa0>)
    2b4a:	5cd3      	ldrb	r3, [r2, r3]
    2b4c:	001a      	movs	r2, r3
    2b4e:	693b      	ldr	r3, [r7, #16]
    2b50:	429a      	cmp	r2, r3
    2b52:	da01      	bge.n	2b58 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    2b54:	2317      	movs	r3, #23
    2b56:	e02a      	b.n	2bae <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2b58:	2380      	movs	r3, #128	; 0x80
    2b5a:	045a      	lsls	r2, r3, #17
    2b5c:	693b      	ldr	r3, [r7, #16]
    2b5e:	409a      	lsls	r2, r3
    2b60:	0013      	movs	r3, r2
    2b62:	001a      	movs	r2, r3
    2b64:	697b      	ldr	r3, [r7, #20]
    2b66:	4313      	orrs	r3, r2
    2b68:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2b6a:	693b      	ldr	r3, [r7, #16]
    2b6c:	3301      	adds	r3, #1
    2b6e:	613b      	str	r3, [r7, #16]
    2b70:	693b      	ldr	r3, [r7, #16]
    2b72:	2b03      	cmp	r3, #3
    2b74:	ddde      	ble.n	2b34 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	22a1      	movs	r2, #161	; 0xa1
    2b7a:	5c9b      	ldrb	r3, [r3, r2]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d004      	beq.n	2b8a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2b80:	697b      	ldr	r3, [r7, #20]
    2b82:	2280      	movs	r2, #128	; 0x80
    2b84:	0112      	lsls	r2, r2, #4
    2b86:	4313      	orrs	r3, r2
    2b88:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	7b5b      	ldrb	r3, [r3, #13]
    2b8e:	031b      	lsls	r3, r3, #12
    2b90:	001a      	movs	r2, r3
    2b92:	697b      	ldr	r3, [r7, #20]
    2b94:	4313      	orrs	r3, r2
    2b96:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2b98:	68bb      	ldr	r3, [r7, #8]
    2b9a:	7b1b      	ldrb	r3, [r3, #12]
    2b9c:	021b      	lsls	r3, r3, #8
    2b9e:	001a      	movs	r2, r3
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	4313      	orrs	r3, r2
    2ba4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	697a      	ldr	r2, [r7, #20]
    2baa:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2bac:	2300      	movs	r3, #0
}
    2bae:	0018      	movs	r0, r3
    2bb0:	46bd      	mov	sp, r7
    2bb2:	b006      	add	sp, #24
    2bb4:	bd80      	pop	{r7, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	000060cc 	.word	0x000060cc

00002bbc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b086      	sub	sp, #24
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	60b9      	str	r1, [r7, #8]
    2bc4:	607a      	str	r2, [r7, #4]
    2bc6:	230f      	movs	r3, #15
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	1c02      	adds	r2, r0, #0
    2bcc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    2bce:	2317      	movs	r3, #23
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	2200      	movs	r2, #0
    2bd4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    2bd6:	68bb      	ldr	r3, [r7, #8]
    2bd8:	7a1b      	ldrb	r3, [r3, #8]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d007      	beq.n	2bee <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2bde:	2317      	movs	r3, #23
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	2217      	movs	r2, #23
    2be4:	18ba      	adds	r2, r7, r2
    2be6:	7812      	ldrb	r2, [r2, #0]
    2be8:	2104      	movs	r1, #4
    2bea:	430a      	orrs	r2, r1
    2bec:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2bee:	68bb      	ldr	r3, [r7, #8]
    2bf0:	7a9b      	ldrb	r3, [r3, #10]
    2bf2:	2b01      	cmp	r3, #1
    2bf4:	d107      	bne.n	2c06 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    2bf6:	2317      	movs	r3, #23
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	2217      	movs	r2, #23
    2bfc:	18ba      	adds	r2, r7, r2
    2bfe:	7812      	ldrb	r2, [r2, #0]
    2c00:	2101      	movs	r1, #1
    2c02:	430a      	orrs	r2, r1
    2c04:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	2217      	movs	r2, #23
    2c0a:	18ba      	adds	r2, r7, r2
    2c0c:	7812      	ldrb	r2, [r2, #0]
    2c0e:	701a      	strb	r2, [r3, #0]
}
    2c10:	46c0      	nop			; (mov r8, r8)
    2c12:	46bd      	mov	sp, r7
    2c14:	b006      	add	sp, #24
    2c16:	bd80      	pop	{r7, pc}

00002c18 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b088      	sub	sp, #32
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	60b9      	str	r1, [r7, #8]
    2c20:	607a      	str	r2, [r7, #4]
    2c22:	230f      	movs	r3, #15
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	1c02      	adds	r2, r0, #0
    2c28:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    2c2a:	230f      	movs	r3, #15
    2c2c:	18fb      	adds	r3, r7, r3
    2c2e:	781a      	ldrb	r2, [r3, #0]
    2c30:	231b      	movs	r3, #27
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	493e      	ldr	r1, [pc, #248]	; (2d30 <_tcc_build_faults+0x118>)
    2c36:	5c8a      	ldrb	r2, [r1, r2]
    2c38:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2c3a:	2300      	movs	r3, #0
    2c3c:	61fb      	str	r3, [r7, #28]
    2c3e:	e06e      	b.n	2d1e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    2c40:	69fa      	ldr	r2, [r7, #28]
    2c42:	0013      	movs	r3, r2
    2c44:	009b      	lsls	r3, r3, #2
    2c46:	189b      	adds	r3, r3, r2
    2c48:	005b      	lsls	r3, r3, #1
    2c4a:	3328      	adds	r3, #40	; 0x28
    2c4c:	68ba      	ldr	r2, [r7, #8]
    2c4e:	18d3      	adds	r3, r2, r3
    2c50:	3304      	adds	r3, #4
    2c52:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    2c54:	697b      	ldr	r3, [r7, #20]
    2c56:	7a5b      	ldrb	r3, [r3, #9]
    2c58:	221b      	movs	r2, #27
    2c5a:	18ba      	adds	r2, r7, r2
    2c5c:	7812      	ldrb	r2, [r2, #0]
    2c5e:	429a      	cmp	r2, r3
    2c60:	d801      	bhi.n	2c66 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    2c62:	2317      	movs	r3, #23
    2c64:	e05f      	b.n	2d26 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    2c66:	697b      	ldr	r3, [r7, #20]
    2c68:	781b      	ldrb	r3, [r3, #0]
    2c6a:	2b0f      	cmp	r3, #15
    2c6c:	d901      	bls.n	2c72 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    2c6e:	2317      	movs	r3, #23
    2c70:	e059      	b.n	2d26 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2c72:	697b      	ldr	r3, [r7, #20]
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	061b      	lsls	r3, r3, #24
    2c78:	001a      	movs	r2, r3
    2c7a:	23f0      	movs	r3, #240	; 0xf0
    2c7c:	051b      	lsls	r3, r3, #20
    2c7e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2c80:	697b      	ldr	r3, [r7, #20]
    2c82:	785b      	ldrb	r3, [r3, #1]
    2c84:	041b      	lsls	r3, r3, #16
    2c86:	0019      	movs	r1, r3
    2c88:	23ff      	movs	r3, #255	; 0xff
    2c8a:	041b      	lsls	r3, r3, #16
    2c8c:	400b      	ands	r3, r1
    2c8e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2c90:	697b      	ldr	r3, [r7, #20]
    2c92:	789b      	ldrb	r3, [r3, #2]
    2c94:	2b00      	cmp	r3, #0
    2c96:	d001      	beq.n	2c9c <_tcc_build_faults+0x84>
    2c98:	2380      	movs	r3, #128	; 0x80
    2c9a:	e000      	b.n	2c9e <_tcc_build_faults+0x86>
    2c9c:	2300      	movs	r3, #0
    2c9e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2ca0:	697b      	ldr	r3, [r7, #20]
    2ca2:	78db      	ldrb	r3, [r3, #3]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d001      	beq.n	2cac <_tcc_build_faults+0x94>
    2ca8:	2308      	movs	r3, #8
    2caa:	e000      	b.n	2cae <_tcc_build_faults+0x96>
    2cac:	2300      	movs	r3, #0
    2cae:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2cb0:	697b      	ldr	r3, [r7, #20]
    2cb2:	791b      	ldrb	r3, [r3, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d001      	beq.n	2cbc <_tcc_build_faults+0xa4>
    2cb8:	2310      	movs	r3, #16
    2cba:	e000      	b.n	2cbe <_tcc_build_faults+0xa6>
    2cbc:	2300      	movs	r3, #0
    2cbe:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    2cc0:	697b      	ldr	r3, [r7, #20]
    2cc2:	795b      	ldrb	r3, [r3, #5]
    2cc4:	0019      	movs	r1, r3
    2cc6:	2303      	movs	r3, #3
    2cc8:	400b      	ands	r3, r1
    2cca:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2ccc:	697b      	ldr	r3, [r7, #20]
    2cce:	799b      	ldrb	r3, [r3, #6]
    2cd0:	015b      	lsls	r3, r3, #5
    2cd2:	0019      	movs	r1, r3
    2cd4:	2360      	movs	r3, #96	; 0x60
    2cd6:	400b      	ands	r3, r1
    2cd8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2cda:	697b      	ldr	r3, [r7, #20]
    2cdc:	79db      	ldrb	r3, [r3, #7]
    2cde:	021b      	lsls	r3, r3, #8
    2ce0:	0019      	movs	r1, r3
    2ce2:	23c0      	movs	r3, #192	; 0xc0
    2ce4:	009b      	lsls	r3, r3, #2
    2ce6:	400b      	ands	r3, r1
    2ce8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2cea:	697b      	ldr	r3, [r7, #20]
    2cec:	7a1b      	ldrb	r3, [r3, #8]
    2cee:	031b      	lsls	r3, r3, #12
    2cf0:	0019      	movs	r1, r3
    2cf2:	23e0      	movs	r3, #224	; 0xe0
    2cf4:	01db      	lsls	r3, r3, #7
    2cf6:	400b      	ands	r3, r1
    2cf8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2cfa:	697b      	ldr	r3, [r7, #20]
    2cfc:	7a5b      	ldrb	r3, [r3, #9]
    2cfe:	029b      	lsls	r3, r3, #10
    2d00:	0019      	movs	r1, r3
    2d02:	23c0      	movs	r3, #192	; 0xc0
    2d04:	011b      	lsls	r3, r3, #4
    2d06:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2d08:	4313      	orrs	r3, r2
    2d0a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    2d0c:	69fb      	ldr	r3, [r7, #28]
    2d0e:	009b      	lsls	r3, r3, #2
    2d10:	687a      	ldr	r2, [r7, #4]
    2d12:	18d3      	adds	r3, r2, r3
    2d14:	693a      	ldr	r2, [r7, #16]
    2d16:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2d18:	69fb      	ldr	r3, [r7, #28]
    2d1a:	3301      	adds	r3, #1
    2d1c:	61fb      	str	r3, [r7, #28]
    2d1e:	69fb      	ldr	r3, [r7, #28]
    2d20:	2b01      	cmp	r3, #1
    2d22:	dd8d      	ble.n	2c40 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    2d24:	2300      	movs	r3, #0
}
    2d26:	0018      	movs	r0, r3
    2d28:	46bd      	mov	sp, r7
    2d2a:	b008      	add	sp, #32
    2d2c:	bd80      	pop	{r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	000060cc 	.word	0x000060cc

00002d34 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b088      	sub	sp, #32
    2d38:	af00      	add	r7, sp, #0
    2d3a:	60b9      	str	r1, [r7, #8]
    2d3c:	607a      	str	r2, [r7, #4]
    2d3e:	230f      	movs	r3, #15
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	1c02      	adds	r2, r0, #0
    2d44:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    2d46:	230f      	movs	r3, #15
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	781a      	ldrb	r2, [r3, #0]
    2d4c:	2317      	movs	r3, #23
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	492d      	ldr	r1, [pc, #180]	; (2e08 <_tcc_build_drvctrl+0xd4>)
    2d52:	5c8a      	ldrb	r2, [r1, r2]
    2d54:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    2d56:	2300      	movs	r3, #0
    2d58:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2d5a:	2300      	movs	r3, #0
    2d5c:	61fb      	str	r3, [r7, #28]
    2d5e:	e048      	b.n	2df2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    2d60:	68ba      	ldr	r2, [r7, #8]
    2d62:	2150      	movs	r1, #80	; 0x50
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	18d3      	adds	r3, r2, r3
    2d68:	185b      	adds	r3, r3, r1
    2d6a:	781b      	ldrb	r3, [r3, #0]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d010      	beq.n	2d92 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    2d70:	2317      	movs	r3, #23
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	781a      	ldrb	r2, [r3, #0]
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	429a      	cmp	r2, r3
    2d7a:	d801      	bhi.n	2d80 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    2d7c:	2317      	movs	r3, #23
    2d7e:	e03f      	b.n	2e00 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2d80:	2380      	movs	r3, #128	; 0x80
    2d82:	025a      	lsls	r2, r3, #9
    2d84:	69fb      	ldr	r3, [r7, #28]
    2d86:	409a      	lsls	r2, r3
    2d88:	0013      	movs	r3, r2
    2d8a:	001a      	movs	r2, r3
    2d8c:	69bb      	ldr	r3, [r7, #24]
    2d8e:	4313      	orrs	r3, r2
    2d90:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2d92:	68ba      	ldr	r2, [r7, #8]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	331c      	adds	r3, #28
    2d98:	005b      	lsls	r3, r3, #1
    2d9a:	18d3      	adds	r3, r2, r3
    2d9c:	3309      	adds	r3, #9
    2d9e:	781b      	ldrb	r3, [r3, #0]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d023      	beq.n	2dec <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    2da4:	2317      	movs	r3, #23
    2da6:	18fb      	adds	r3, r7, r3
    2da8:	781a      	ldrb	r2, [r3, #0]
    2daa:	69fb      	ldr	r3, [r7, #28]
    2dac:	429a      	cmp	r2, r3
    2dae:	d801      	bhi.n	2db4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    2db0:	2317      	movs	r3, #23
    2db2:	e025      	b.n	2e00 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2db4:	68ba      	ldr	r2, [r7, #8]
    2db6:	69fb      	ldr	r3, [r7, #28]
    2db8:	331c      	adds	r3, #28
    2dba:	005b      	lsls	r3, r3, #1
    2dbc:	18d3      	adds	r3, r2, r3
    2dbe:	3309      	adds	r3, #9
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	2b02      	cmp	r3, #2
    2dc4:	d10a      	bne.n	2ddc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2dc6:	2302      	movs	r3, #2
    2dc8:	33ff      	adds	r3, #255	; 0xff
    2dca:	001a      	movs	r2, r3
    2dcc:	69fb      	ldr	r3, [r7, #28]
    2dce:	409a      	lsls	r2, r3
    2dd0:	0013      	movs	r3, r2
    2dd2:	001a      	movs	r2, r3
    2dd4:	69bb      	ldr	r3, [r7, #24]
    2dd6:	4313      	orrs	r3, r2
    2dd8:	61bb      	str	r3, [r7, #24]
    2dda:	e007      	b.n	2dec <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2ddc:	2201      	movs	r2, #1
    2dde:	69fb      	ldr	r3, [r7, #28]
    2de0:	409a      	lsls	r2, r3
    2de2:	0013      	movs	r3, r2
    2de4:	001a      	movs	r2, r3
    2de6:	69bb      	ldr	r3, [r7, #24]
    2de8:	4313      	orrs	r3, r2
    2dea:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2dec:	69fb      	ldr	r3, [r7, #28]
    2dee:	3301      	adds	r3, #1
    2df0:	61fb      	str	r3, [r7, #28]
    2df2:	69fb      	ldr	r3, [r7, #28]
    2df4:	2b07      	cmp	r3, #7
    2df6:	d9b3      	bls.n	2d60 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	69ba      	ldr	r2, [r7, #24]
    2dfc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2dfe:	2300      	movs	r3, #0
}
    2e00:	0018      	movs	r0, r3
    2e02:	46bd      	mov	sp, r7
    2e04:	b008      	add	sp, #32
    2e06:	bd80      	pop	{r7, pc}
    2e08:	000060d0 	.word	0x000060d0

00002e0c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b088      	sub	sp, #32
    2e10:	af00      	add	r7, sp, #0
    2e12:	60b9      	str	r1, [r7, #8]
    2e14:	607a      	str	r2, [r7, #4]
    2e16:	230f      	movs	r3, #15
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	1c02      	adds	r2, r0, #0
    2e1c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    2e1e:	230f      	movs	r3, #15
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	781a      	ldrb	r2, [r3, #0]
    2e24:	2317      	movs	r3, #23
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	491d      	ldr	r1, [pc, #116]	; (2ea0 <_tcc_build_waves+0x94>)
    2e2a:	5c8a      	ldrb	r2, [r1, r2]
    2e2c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    2e2e:	68bb      	ldr	r3, [r7, #8]
    2e30:	3310      	adds	r3, #16
    2e32:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2e34:	693b      	ldr	r3, [r7, #16]
    2e36:	7a5b      	ldrb	r3, [r3, #9]
    2e38:	011b      	lsls	r3, r3, #4
    2e3a:	001a      	movs	r2, r3
    2e3c:	2330      	movs	r3, #48	; 0x30
    2e3e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2e40:	693b      	ldr	r3, [r7, #16]
    2e42:	7a1b      	ldrb	r3, [r3, #8]
    2e44:	0019      	movs	r1, r3
    2e46:	2307      	movs	r3, #7
    2e48:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2e4a:	4313      	orrs	r3, r2
    2e4c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2e4e:	2300      	movs	r3, #0
    2e50:	61fb      	str	r3, [r7, #28]
    2e52:	e01a      	b.n	2e8a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    2e54:	693a      	ldr	r2, [r7, #16]
    2e56:	69fb      	ldr	r3, [r7, #28]
    2e58:	18d3      	adds	r3, r2, r3
    2e5a:	3304      	adds	r3, #4
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d010      	beq.n	2e84 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    2e62:	2317      	movs	r3, #23
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	781a      	ldrb	r2, [r3, #0]
    2e68:	69fb      	ldr	r3, [r7, #28]
    2e6a:	429a      	cmp	r2, r3
    2e6c:	dc01      	bgt.n	2e72 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    2e6e:	2317      	movs	r3, #23
    2e70:	e012      	b.n	2e98 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    2e72:	2380      	movs	r3, #128	; 0x80
    2e74:	025a      	lsls	r2, r3, #9
    2e76:	69fb      	ldr	r3, [r7, #28]
    2e78:	409a      	lsls	r2, r3
    2e7a:	0013      	movs	r3, r2
    2e7c:	001a      	movs	r2, r3
    2e7e:	69bb      	ldr	r3, [r7, #24]
    2e80:	4313      	orrs	r3, r2
    2e82:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2e84:	69fb      	ldr	r3, [r7, #28]
    2e86:	3301      	adds	r3, #1
    2e88:	61fb      	str	r3, [r7, #28]
    2e8a:	69fb      	ldr	r3, [r7, #28]
    2e8c:	2b03      	cmp	r3, #3
    2e8e:	dde1      	ble.n	2e54 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	69ba      	ldr	r2, [r7, #24]
    2e94:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    2e96:	2300      	movs	r3, #0
}
    2e98:	0018      	movs	r0, r3
    2e9a:	46bd      	mov	sp, r7
    2e9c:	b008      	add	sp, #32
    2e9e:	bd80      	pop	{r7, pc}
    2ea0:	000060cc 	.word	0x000060cc

00002ea4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    2ea4:	b590      	push	{r4, r7, lr}
    2ea6:	b091      	sub	sp, #68	; 0x44
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	60f8      	str	r0, [r7, #12]
    2eac:	60b9      	str	r1, [r7, #8]
    2eae:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2eb0:	233b      	movs	r3, #59	; 0x3b
    2eb2:	18fc      	adds	r4, r7, r3
    2eb4:	68bb      	ldr	r3, [r7, #8]
    2eb6:	0018      	movs	r0, r3
    2eb8:	4bbf      	ldr	r3, [pc, #764]	; (31b8 <tcc_init+0x314>)
    2eba:	4798      	blx	r3
    2ebc:	0003      	movs	r3, r0
    2ebe:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2ec0:	233b      	movs	r3, #59	; 0x3b
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	781a      	ldrb	r2, [r3, #0]
    2ec6:	4bbd      	ldr	r3, [pc, #756]	; (31bc <tcc_init+0x318>)
    2ec8:	0092      	lsls	r2, r2, #2
    2eca:	58d3      	ldr	r3, [r2, r3]
    2ecc:	0019      	movs	r1, r3
    2ece:	2002      	movs	r0, #2
    2ed0:	4bbb      	ldr	r3, [pc, #748]	; (31c0 <tcc_init+0x31c>)
    2ed2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2ed4:	68bb      	ldr	r3, [r7, #8]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	2202      	movs	r2, #2
    2eda:	4013      	ands	r3, r2
    2edc:	d001      	beq.n	2ee2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    2ede:	231c      	movs	r3, #28
    2ee0:	e165      	b.n	31ae <tcc_init+0x30a>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2ee2:	68bb      	ldr	r3, [r7, #8]
    2ee4:	681b      	ldr	r3, [r3, #0]
    2ee6:	2201      	movs	r2, #1
    2ee8:	4013      	ands	r3, r2
    2eea:	d001      	beq.n	2ef0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    2eec:	231c      	movs	r3, #28
    2eee:	e15e      	b.n	31ae <tcc_init+0x30a>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    2ef0:	233b      	movs	r3, #59	; 0x3b
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	781a      	ldrb	r2, [r3, #0]
    2ef6:	4bb3      	ldr	r3, [pc, #716]	; (31c4 <tcc_init+0x320>)
    2ef8:	0092      	lsls	r2, r2, #2
    2efa:	58d3      	ldr	r3, [r2, r3]
    2efc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f04:	429a      	cmp	r2, r3
    2f06:	d804      	bhi.n	2f12 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	685a      	ldr	r2, [r3, #4]
    2f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f0e:	429a      	cmp	r2, r3
    2f10:	d901      	bls.n	2f16 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    2f12:	2317      	movs	r3, #23
    2f14:	e14b      	b.n	31ae <tcc_init+0x30a>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2f16:	2300      	movs	r3, #0
    2f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f1a:	e00e      	b.n	2f3a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    2f1c:	687a      	ldr	r2, [r7, #4]
    2f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f20:	3306      	adds	r3, #6
    2f22:	009b      	lsls	r3, r3, #2
    2f24:	18d3      	adds	r3, r2, r3
    2f26:	3304      	adds	r3, #4
    2f28:	681a      	ldr	r2, [r3, #0]
    2f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f2c:	429a      	cmp	r2, r3
    2f2e:	d901      	bls.n	2f34 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    2f30:	2317      	movs	r3, #23
    2f32:	e13c      	b.n	31ae <tcc_init+0x30a>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f36:	3301      	adds	r3, #1
    2f38:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f3c:	2b03      	cmp	r3, #3
    2f3e:	dded      	ble.n	2f1c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2f40:	2300      	movs	r3, #0
    2f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f44:	e019      	b.n	2f7a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    2f46:	687a      	ldr	r2, [r7, #4]
    2f48:	2198      	movs	r1, #152	; 0x98
    2f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f4c:	18d3      	adds	r3, r2, r3
    2f4e:	185b      	adds	r3, r3, r1
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	2201      	movs	r2, #1
    2f54:	4053      	eors	r3, r2
    2f56:	b2db      	uxtb	r3, r3
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d10a      	bne.n	2f72 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    2f5c:	233b      	movs	r3, #59	; 0x3b
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	781b      	ldrb	r3, [r3, #0]
    2f62:	4a99      	ldr	r2, [pc, #612]	; (31c8 <tcc_init+0x324>)
    2f64:	5cd3      	ldrb	r3, [r2, r3]
    2f66:	001a      	movs	r2, r3
    2f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f6a:	429a      	cmp	r2, r3
    2f6c:	dc02      	bgt.n	2f74 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    2f6e:	2317      	movs	r3, #23
    2f70:	e11d      	b.n	31ae <tcc_init+0x30a>
			continue;
    2f72:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f76:	3301      	adds	r3, #1
    2f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    2f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2f7c:	2b07      	cmp	r3, #7
    2f7e:	dde2      	ble.n	2f46 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    2f80:	2300      	movs	r3, #0
    2f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    2f84:	2333      	movs	r3, #51	; 0x33
    2f86:	18fc      	adds	r4, r7, r3
    2f88:	232c      	movs	r3, #44	; 0x2c
    2f8a:	18fa      	adds	r2, r7, r3
    2f8c:	6879      	ldr	r1, [r7, #4]
    2f8e:	233b      	movs	r3, #59	; 0x3b
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	781b      	ldrb	r3, [r3, #0]
    2f94:	0018      	movs	r0, r3
    2f96:	4b8d      	ldr	r3, [pc, #564]	; (31cc <tcc_init+0x328>)
    2f98:	4798      	blx	r3
    2f9a:	0003      	movs	r3, r0
    2f9c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2f9e:	2333      	movs	r3, #51	; 0x33
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d003      	beq.n	2fb0 <tcc_init+0x10c>
		return status;
    2fa8:	2333      	movs	r3, #51	; 0x33
    2faa:	18fb      	adds	r3, r7, r3
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	e0fe      	b.n	31ae <tcc_init+0x30a>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    2fb0:	232b      	movs	r3, #43	; 0x2b
    2fb2:	18fa      	adds	r2, r7, r3
    2fb4:	6879      	ldr	r1, [r7, #4]
    2fb6:	233b      	movs	r3, #59	; 0x3b
    2fb8:	18fb      	adds	r3, r7, r3
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	0018      	movs	r0, r3
    2fbe:	4b84      	ldr	r3, [pc, #528]	; (31d0 <tcc_init+0x32c>)
    2fc0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    2fc2:	2333      	movs	r3, #51	; 0x33
    2fc4:	18fc      	adds	r4, r7, r3
    2fc6:	2320      	movs	r3, #32
    2fc8:	18fa      	adds	r2, r7, r3
    2fca:	6879      	ldr	r1, [r7, #4]
    2fcc:	233b      	movs	r3, #59	; 0x3b
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	781b      	ldrb	r3, [r3, #0]
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b7f      	ldr	r3, [pc, #508]	; (31d4 <tcc_init+0x330>)
    2fd6:	4798      	blx	r3
    2fd8:	0003      	movs	r3, r0
    2fda:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2fdc:	2333      	movs	r3, #51	; 0x33
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	781b      	ldrb	r3, [r3, #0]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d003      	beq.n	2fee <tcc_init+0x14a>
		return status;
    2fe6:	2333      	movs	r3, #51	; 0x33
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	e0df      	b.n	31ae <tcc_init+0x30a>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    2fee:	2300      	movs	r3, #0
    2ff0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    2ff2:	2333      	movs	r3, #51	; 0x33
    2ff4:	18fc      	adds	r4, r7, r3
    2ff6:	231c      	movs	r3, #28
    2ff8:	18fa      	adds	r2, r7, r3
    2ffa:	6879      	ldr	r1, [r7, #4]
    2ffc:	233b      	movs	r3, #59	; 0x3b
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	0018      	movs	r0, r3
    3004:	4b74      	ldr	r3, [pc, #464]	; (31d8 <tcc_init+0x334>)
    3006:	4798      	blx	r3
    3008:	0003      	movs	r3, r0
    300a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    300c:	2333      	movs	r3, #51	; 0x33
    300e:	18fb      	adds	r3, r7, r3
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d003      	beq.n	301e <tcc_init+0x17a>
		return status;
    3016:	2333      	movs	r3, #51	; 0x33
    3018:	18fb      	adds	r3, r7, r3
    301a:	781b      	ldrb	r3, [r3, #0]
    301c:	e0c7      	b.n	31ae <tcc_init+0x30a>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    301e:	2333      	movs	r3, #51	; 0x33
    3020:	18fc      	adds	r4, r7, r3
    3022:	2318      	movs	r3, #24
    3024:	18fa      	adds	r2, r7, r3
    3026:	6879      	ldr	r1, [r7, #4]
    3028:	233b      	movs	r3, #59	; 0x3b
    302a:	18fb      	adds	r3, r7, r3
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	0018      	movs	r0, r3
    3030:	4b6a      	ldr	r3, [pc, #424]	; (31dc <tcc_init+0x338>)
    3032:	4798      	blx	r3
    3034:	0003      	movs	r3, r0
    3036:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    3038:	2333      	movs	r3, #51	; 0x33
    303a:	18fb      	adds	r3, r7, r3
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	2b00      	cmp	r3, #0
    3040:	d003      	beq.n	304a <tcc_init+0x1a6>
		return status;
    3042:	2333      	movs	r3, #51	; 0x33
    3044:	18fb      	adds	r3, r7, r3
    3046:	781b      	ldrb	r3, [r3, #0]
    3048:	e0b1      	b.n	31ae <tcc_init+0x30a>
	module_inst->register_callback_mask = 0;
	module_inst->enable_callback_mask = 0;
	_tcc_instances[module_index] = module_inst;
#endif

	module_inst->hw = hw;
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	68ba      	ldr	r2, [r7, #8]
    304e:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	22a0      	movs	r2, #160	; 0xa0
    3054:	5c9a      	ldrb	r2, [r3, r2]
    3056:	68fb      	ldr	r3, [r7, #12]
    3058:	711a      	strb	r2, [r3, #4]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    305a:	2314      	movs	r3, #20
    305c:	18fb      	adds	r3, r7, r3
    305e:	0018      	movs	r0, r3
    3060:	4b5f      	ldr	r3, [pc, #380]	; (31e0 <tcc_init+0x33c>)
    3062:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	7ada      	ldrb	r2, [r3, #11]
    3068:	2314      	movs	r3, #20
    306a:	18fb      	adds	r3, r7, r3
    306c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    306e:	233b      	movs	r3, #59	; 0x3b
    3070:	18fb      	adds	r3, r7, r3
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	4a5b      	ldr	r2, [pc, #364]	; (31e4 <tcc_init+0x340>)
    3076:	5cd3      	ldrb	r3, [r2, r3]
    3078:	2214      	movs	r2, #20
    307a:	18ba      	adds	r2, r7, r2
    307c:	0011      	movs	r1, r2
    307e:	0018      	movs	r0, r3
    3080:	4b59      	ldr	r3, [pc, #356]	; (31e8 <tcc_init+0x344>)
    3082:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    3084:	233b      	movs	r3, #59	; 0x3b
    3086:	18fb      	adds	r3, r7, r3
    3088:	781b      	ldrb	r3, [r3, #0]
    308a:	4a56      	ldr	r2, [pc, #344]	; (31e4 <tcc_init+0x340>)
    308c:	5cd3      	ldrb	r3, [r2, r3]
    308e:	0018      	movs	r0, r3
    3090:	4b56      	ldr	r3, [pc, #344]	; (31ec <tcc_init+0x348>)
    3092:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    3094:	2300      	movs	r3, #0
    3096:	63fb      	str	r3, [r7, #60]	; 0x3c
    3098:	e02d      	b.n	30f6 <tcc_init+0x252>
		if (!config->pins.enable_wave_out_pin[i]) {
    309a:	687a      	ldr	r2, [r7, #4]
    309c:	2198      	movs	r1, #152	; 0x98
    309e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30a0:	18d3      	adds	r3, r2, r3
    30a2:	185b      	adds	r3, r3, r1
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	2201      	movs	r2, #1
    30a8:	4053      	eors	r3, r2
    30aa:	b2db      	uxtb	r3, r3
    30ac:	2b00      	cmp	r3, #0
    30ae:	d11e      	bne.n	30ee <tcc_init+0x24a>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    30b0:	2310      	movs	r3, #16
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	0018      	movs	r0, r3
    30b6:	4b4e      	ldr	r3, [pc, #312]	; (31f0 <tcc_init+0x34c>)
    30b8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    30be:	321e      	adds	r2, #30
    30c0:	0092      	lsls	r2, r2, #2
    30c2:	58d3      	ldr	r3, [r2, r3]
    30c4:	b2da      	uxtb	r2, r3
    30c6:	2310      	movs	r3, #16
    30c8:	18fb      	adds	r3, r7, r3
    30ca:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    30cc:	2310      	movs	r3, #16
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	2201      	movs	r2, #1
    30d2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    30d8:	3216      	adds	r2, #22
    30da:	0092      	lsls	r2, r2, #2
    30dc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    30de:	b2db      	uxtb	r3, r3
    30e0:	2210      	movs	r2, #16
    30e2:	18ba      	adds	r2, r7, r2
    30e4:	0011      	movs	r1, r2
    30e6:	0018      	movs	r0, r3
    30e8:	4b42      	ldr	r3, [pc, #264]	; (31f4 <tcc_init+0x350>)
    30ea:	4798      	blx	r3
    30ec:	e000      	b.n	30f0 <tcc_init+0x24c>
			continue;
    30ee:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    30f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    30f2:	3301      	adds	r3, #1
    30f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    30f6:	233b      	movs	r3, #59	; 0x3b
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	4a32      	ldr	r2, [pc, #200]	; (31c8 <tcc_init+0x324>)
    30fe:	5cd3      	ldrb	r3, [r2, r3]
    3100:	001a      	movs	r2, r3
    3102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3104:	429a      	cmp	r2, r3
    3106:	dcc8      	bgt.n	309a <tcc_init+0x1f6>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    3108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    310a:	68bb      	ldr	r3, [r7, #8]
    310c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	68bb      	ldr	r3, [r7, #8]
    3112:	689b      	ldr	r3, [r3, #8]
    3114:	2204      	movs	r2, #4
    3116:	4013      	ands	r3, r2
    3118:	d1fa      	bne.n	3110 <tcc_init+0x26c>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    311a:	68bb      	ldr	r3, [r7, #8]
    311c:	22ff      	movs	r2, #255	; 0xff
    311e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3120:	46c0      	nop			; (mov r8, r8)
    3122:	68bb      	ldr	r3, [r7, #8]
    3124:	689b      	ldr	r3, [r3, #8]
    3126:	2204      	movs	r2, #4
    3128:	4013      	ands	r3, r2
    312a:	d1fa      	bne.n	3122 <tcc_init+0x27e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    312c:	232b      	movs	r3, #43	; 0x2b
    312e:	18fb      	adds	r3, r7, r3
    3130:	781a      	ldrb	r2, [r3, #0]
    3132:	68bb      	ldr	r3, [r7, #8]
    3134:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    3136:	2320      	movs	r3, #32
    3138:	18fb      	adds	r3, r7, r3
    313a:	681a      	ldr	r2, [r3, #0]
    313c:	68bb      	ldr	r3, [r7, #8]
    313e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    3140:	2320      	movs	r3, #32
    3142:	18fb      	adds	r3, r7, r3
    3144:	685a      	ldr	r2, [r3, #4]
    3146:	68bb      	ldr	r3, [r7, #8]
    3148:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    314a:	69fa      	ldr	r2, [r7, #28]
    314c:	68bb      	ldr	r3, [r7, #8]
    314e:	619a      	str	r2, [r3, #24]
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30) && (!SAMR34) && (!SAMR35)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    3150:	69ba      	ldr	r2, [r7, #24]
    3152:	68bb      	ldr	r3, [r7, #8]
    3154:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	68bb      	ldr	r3, [r7, #8]
    315a:	689b      	ldr	r3, [r3, #8]
    315c:	2210      	movs	r2, #16
    315e:	4013      	ands	r3, r2
    3160:	d1fa      	bne.n	3158 <tcc_init+0x2b4>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	681a      	ldr	r2, [r3, #0]
    3166:	68bb      	ldr	r3, [r7, #8]
    3168:	635a      	str	r2, [r3, #52]	; 0x34
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30) && (!SAMR34) && (!SAMR35)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	685a      	ldr	r2, [r3, #4]
    316e:	68bb      	ldr	r3, [r7, #8]
    3170:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    3172:	2300      	movs	r3, #0
    3174:	63fb      	str	r3, [r7, #60]	; 0x3c
    3176:	e010      	b.n	319a <tcc_init+0x2f6>
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    3178:	687a      	ldr	r2, [r7, #4]
    317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    317c:	3306      	adds	r3, #6
    317e:	009b      	lsls	r3, r3, #2
    3180:	18d3      	adds	r3, r2, r3
    3182:	3304      	adds	r3, #4
    3184:	681a      	ldr	r2, [r3, #0]
    3186:	68b9      	ldr	r1, [r7, #8]
    3188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    318a:	3310      	adds	r3, #16
    318c:	009b      	lsls	r3, r3, #2
    318e:	18cb      	adds	r3, r1, r3
    3190:	3304      	adds	r3, #4
    3192:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    3194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3196:	3301      	adds	r3, #1
    3198:	63fb      	str	r3, [r7, #60]	; 0x3c
    319a:	233b      	movs	r3, #59	; 0x3b
    319c:	18fb      	adds	r3, r7, r3
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	4a15      	ldr	r2, [pc, #84]	; (31f8 <tcc_init+0x354>)
    31a2:	5cd3      	ldrb	r3, [r2, r3]
    31a4:	001a      	movs	r2, r3
    31a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31a8:	429a      	cmp	r2, r3
    31aa:	dce5      	bgt.n	3178 <tcc_init+0x2d4>
	}

	return STATUS_OK;
    31ac:	2300      	movs	r3, #0
}
    31ae:	0018      	movs	r0, r3
    31b0:	46bd      	mov	sp, r7
    31b2:	b011      	add	sp, #68	; 0x44
    31b4:	bd90      	pop	{r4, r7, pc}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	00002809 	.word	0x00002809
    31bc:	000060b4 	.word	0x000060b4
    31c0:	00002765 	.word	0x00002765
    31c4:	000060c0 	.word	0x000060c0
    31c8:	000060d0 	.word	0x000060d0
    31cc:	00002b19 	.word	0x00002b19
    31d0:	00002bbd 	.word	0x00002bbd
    31d4:	00002c19 	.word	0x00002c19
    31d8:	00002d35 	.word	0x00002d35
    31dc:	00002e0d 	.word	0x00002e0d
    31e0:	0000274d 	.word	0x0000274d
    31e4:	000060b0 	.word	0x000060b0
    31e8:	00002451 	.word	0x00002451
    31ec:	00002491 	.word	0x00002491
    31f0:	000027e1 	.word	0x000027e1
    31f4:	00002705 	.word	0x00002705
    31f8:	000060cc 	.word	0x000060cc

000031fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b082      	sub	sp, #8
    3200:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3202:	4b19      	ldr	r3, [pc, #100]	; (3268 <Reset_Handler+0x6c>)
    3204:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3206:	4b19      	ldr	r3, [pc, #100]	; (326c <Reset_Handler+0x70>)
    3208:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    320a:	687a      	ldr	r2, [r7, #4]
    320c:	683b      	ldr	r3, [r7, #0]
    320e:	429a      	cmp	r2, r3
    3210:	d00c      	beq.n	322c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3212:	e007      	b.n	3224 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3214:	683b      	ldr	r3, [r7, #0]
    3216:	1d1a      	adds	r2, r3, #4
    3218:	603a      	str	r2, [r7, #0]
    321a:	687a      	ldr	r2, [r7, #4]
    321c:	1d11      	adds	r1, r2, #4
    321e:	6079      	str	r1, [r7, #4]
    3220:	6812      	ldr	r2, [r2, #0]
    3222:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3224:	683a      	ldr	r2, [r7, #0]
    3226:	4b12      	ldr	r3, [pc, #72]	; (3270 <Reset_Handler+0x74>)
    3228:	429a      	cmp	r2, r3
    322a:	d3f3      	bcc.n	3214 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    322c:	4b11      	ldr	r3, [pc, #68]	; (3274 <Reset_Handler+0x78>)
    322e:	603b      	str	r3, [r7, #0]
    3230:	e004      	b.n	323c <Reset_Handler+0x40>
                *pDest++ = 0;
    3232:	683b      	ldr	r3, [r7, #0]
    3234:	1d1a      	adds	r2, r3, #4
    3236:	603a      	str	r2, [r7, #0]
    3238:	2200      	movs	r2, #0
    323a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    323c:	683a      	ldr	r2, [r7, #0]
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <Reset_Handler+0x7c>)
    3240:	429a      	cmp	r2, r3
    3242:	d3f6      	bcc.n	3232 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3244:	4b0d      	ldr	r3, [pc, #52]	; (327c <Reset_Handler+0x80>)
    3246:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3248:	4b0d      	ldr	r3, [pc, #52]	; (3280 <Reset_Handler+0x84>)
    324a:	687a      	ldr	r2, [r7, #4]
    324c:	21ff      	movs	r1, #255	; 0xff
    324e:	438a      	bics	r2, r1
    3250:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3252:	4a0c      	ldr	r2, [pc, #48]	; (3284 <Reset_Handler+0x88>)
    3254:	6853      	ldr	r3, [r2, #4]
    3256:	2180      	movs	r1, #128	; 0x80
    3258:	430b      	orrs	r3, r1
    325a:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    325c:	4b0a      	ldr	r3, [pc, #40]	; (3288 <Reset_Handler+0x8c>)
    325e:	4798      	blx	r3

        /* Branch to main function */
        main();
    3260:	4b0a      	ldr	r3, [pc, #40]	; (328c <Reset_Handler+0x90>)
    3262:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3264:	e7fe      	b.n	3264 <Reset_Handler+0x68>
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	00006234 	.word	0x00006234
    326c:	20000000 	.word	0x20000000
    3270:	20000014 	.word	0x20000014
    3274:	20000020 	.word	0x20000020
    3278:	2000015c 	.word	0x2000015c
    327c:	00000000 	.word	0x00000000
    3280:	e000ed00 	.word	0xe000ed00
    3284:	41004000 	.word	0x41004000
    3288:	00005e95 	.word	0x00005e95
    328c:	00003c39 	.word	0x00003c39

00003290 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3290:	b580      	push	{r7, lr}
    3292:	af00      	add	r7, sp, #0
        while (1) {
    3294:	e7fe      	b.n	3294 <Dummy_Handler+0x4>

00003296 <system_pinmux_get_config_defaults>:
{
    3296:	b580      	push	{r7, lr}
    3298:	b082      	sub	sp, #8
    329a:	af00      	add	r7, sp, #0
    329c:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	2280      	movs	r2, #128	; 0x80
    32a2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	2200      	movs	r2, #0
    32a8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    32aa:	687b      	ldr	r3, [r7, #4]
    32ac:	2201      	movs	r2, #1
    32ae:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    32b0:	687b      	ldr	r3, [r7, #4]
    32b2:	2200      	movs	r2, #0
    32b4:	70da      	strb	r2, [r3, #3]
}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	46bd      	mov	sp, r7
    32ba:	b002      	add	sp, #8
    32bc:	bd80      	pop	{r7, pc}
	...

000032c0 <system_pinmux_get_group_from_gpio_pin>:
{
    32c0:	b580      	push	{r7, lr}
    32c2:	b084      	sub	sp, #16
    32c4:	af00      	add	r7, sp, #0
    32c6:	0002      	movs	r2, r0
    32c8:	1dfb      	adds	r3, r7, #7
    32ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    32cc:	230f      	movs	r3, #15
    32ce:	18fb      	adds	r3, r7, r3
    32d0:	1dfa      	adds	r2, r7, #7
    32d2:	7812      	ldrb	r2, [r2, #0]
    32d4:	09d2      	lsrs	r2, r2, #7
    32d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    32d8:	230e      	movs	r3, #14
    32da:	18fb      	adds	r3, r7, r3
    32dc:	1dfa      	adds	r2, r7, #7
    32de:	7812      	ldrb	r2, [r2, #0]
    32e0:	0952      	lsrs	r2, r2, #5
    32e2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    32e4:	4b0d      	ldr	r3, [pc, #52]	; (331c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    32e6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    32e8:	230f      	movs	r3, #15
    32ea:	18fb      	adds	r3, r7, r3
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d10f      	bne.n	3312 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    32f2:	230f      	movs	r3, #15
    32f4:	18fb      	adds	r3, r7, r3
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	009b      	lsls	r3, r3, #2
    32fa:	2210      	movs	r2, #16
    32fc:	4694      	mov	ip, r2
    32fe:	44bc      	add	ip, r7
    3300:	4463      	add	r3, ip
    3302:	3b08      	subs	r3, #8
    3304:	681a      	ldr	r2, [r3, #0]
    3306:	230e      	movs	r3, #14
    3308:	18fb      	adds	r3, r7, r3
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	01db      	lsls	r3, r3, #7
    330e:	18d3      	adds	r3, r2, r3
    3310:	e000      	b.n	3314 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3312:	2300      	movs	r3, #0
}
    3314:	0018      	movs	r0, r3
    3316:	46bd      	mov	sp, r7
    3318:	b004      	add	sp, #16
    331a:	bd80      	pop	{r7, pc}
    331c:	40002800 	.word	0x40002800

00003320 <system_voltage_reference_get_config_defaults>:
{
    3320:	b580      	push	{r7, lr}
    3322:	b082      	sub	sp, #8
    3324:	af00      	add	r7, sp, #0
    3326:	6078      	str	r0, [r7, #4]
	config->sel            = SYSTEM_VOLTAGE_REFERENCE_1V0;
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	2200      	movs	r2, #0
    332c:	701a      	strb	r2, [r3, #0]
	config->on_demand      = false;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	2200      	movs	r2, #0
    3332:	705a      	strb	r2, [r3, #1]
	config->run_in_standby = false;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2200      	movs	r2, #0
    3338:	709a      	strb	r2, [r3, #2]
}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	46bd      	mov	sp, r7
    333e:	b002      	add	sp, #8
    3340:	bd80      	pop	{r7, pc}
	...

00003344 <system_voltage_reference_set_config>:
{
    3344:	b580      	push	{r7, lr}
    3346:	b082      	sub	sp, #8
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
	SUPC->VREF.bit.SEL      = config->sel;
    334c:	4a14      	ldr	r2, [pc, #80]	; (33a0 <system_voltage_reference_set_config+0x5c>)
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	1c19      	adds	r1, r3, #0
    3354:	230f      	movs	r3, #15
    3356:	400b      	ands	r3, r1
    3358:	b2d9      	uxtb	r1, r3
    335a:	69d3      	ldr	r3, [r2, #28]
    335c:	200f      	movs	r0, #15
    335e:	4001      	ands	r1, r0
    3360:	0409      	lsls	r1, r1, #16
    3362:	4810      	ldr	r0, [pc, #64]	; (33a4 <system_voltage_reference_set_config+0x60>)
    3364:	4003      	ands	r3, r0
    3366:	430b      	orrs	r3, r1
    3368:	61d3      	str	r3, [r2, #28]
	SUPC->VREF.bit.ONDEMAND = config->on_demand;
    336a:	4a0d      	ldr	r2, [pc, #52]	; (33a0 <system_voltage_reference_set_config+0x5c>)
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	7859      	ldrb	r1, [r3, #1]
    3370:	69d3      	ldr	r3, [r2, #28]
    3372:	2001      	movs	r0, #1
    3374:	4001      	ands	r1, r0
    3376:	01c9      	lsls	r1, r1, #7
    3378:	2080      	movs	r0, #128	; 0x80
    337a:	4383      	bics	r3, r0
    337c:	430b      	orrs	r3, r1
    337e:	61d3      	str	r3, [r2, #28]
	SUPC->VREF.bit.RUNSTDBY = config->run_in_standby;
    3380:	4a07      	ldr	r2, [pc, #28]	; (33a0 <system_voltage_reference_set_config+0x5c>)
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	7899      	ldrb	r1, [r3, #2]
    3386:	69d3      	ldr	r3, [r2, #28]
    3388:	2001      	movs	r0, #1
    338a:	4001      	ands	r1, r0
    338c:	0189      	lsls	r1, r1, #6
    338e:	2040      	movs	r0, #64	; 0x40
    3390:	4383      	bics	r3, r0
    3392:	430b      	orrs	r3, r1
    3394:	61d3      	str	r3, [r2, #28]
}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	46bd      	mov	sp, r7
    339a:	b002      	add	sp, #8
    339c:	bd80      	pop	{r7, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	40001400 	.word	0x40001400
    33a4:	fff0ffff 	.word	0xfff0ffff

000033a8 <adc_is_syncing>:
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b084      	sub	sp, #16
    33ac:	af00      	add	r7, sp, #0
    33ae:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
    33b6:	68fb      	ldr	r3, [r7, #12]
    33b8:	8c1b      	ldrh	r3, [r3, #32]
    33ba:	b29b      	uxth	r3, r3
    33bc:	2b00      	cmp	r3, #0
    33be:	d001      	beq.n	33c4 <adc_is_syncing+0x1c>
		return true;
    33c0:	2301      	movs	r3, #1
    33c2:	e000      	b.n	33c6 <adc_is_syncing+0x1e>
	return false;
    33c4:	2300      	movs	r3, #0
}
    33c6:	0018      	movs	r0, r3
    33c8:	46bd      	mov	sp, r7
    33ca:	b004      	add	sp, #16
    33cc:	bd80      	pop	{r7, pc}

000033ce <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    33ce:	b580      	push	{r7, lr}
    33d0:	b086      	sub	sp, #24
    33d2:	af00      	add	r7, sp, #0
    33d4:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    33dc:	693b      	ldr	r3, [r7, #16]
    33de:	799b      	ldrb	r3, [r3, #6]
    33e0:	b2db      	uxtb	r3, r3
    33e2:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    33e4:	2300      	movs	r3, #0
    33e6:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    33e8:	68fb      	ldr	r3, [r7, #12]
    33ea:	2201      	movs	r2, #1
    33ec:	4013      	ands	r3, r2
    33ee:	d003      	beq.n	33f8 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    33f0:	697b      	ldr	r3, [r7, #20]
    33f2:	2201      	movs	r2, #1
    33f4:	4313      	orrs	r3, r2
    33f6:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	2204      	movs	r2, #4
    33fc:	4013      	ands	r3, r2
    33fe:	d003      	beq.n	3408 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    3400:	697b      	ldr	r3, [r7, #20]
    3402:	2202      	movs	r2, #2
    3404:	4313      	orrs	r3, r2
    3406:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	2202      	movs	r2, #2
    340c:	4013      	ands	r3, r2
    340e:	d003      	beq.n	3418 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    3410:	697b      	ldr	r3, [r7, #20]
    3412:	2204      	movs	r2, #4
    3414:	4313      	orrs	r3, r2
    3416:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    3418:	697b      	ldr	r3, [r7, #20]
}
    341a:	0018      	movs	r0, r3
    341c:	46bd      	mov	sp, r7
    341e:	b006      	add	sp, #24
    3420:	bd80      	pop	{r7, pc}

00003422 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    3422:	b580      	push	{r7, lr}
    3424:	b084      	sub	sp, #16
    3426:	af00      	add	r7, sp, #0
    3428:	6078      	str	r0, [r7, #4]
    342a:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	681b      	ldr	r3, [r3, #0]
    3430:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3432:	2300      	movs	r3, #0
    3434:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    3436:	683b      	ldr	r3, [r7, #0]
    3438:	2201      	movs	r2, #1
    343a:	4013      	ands	r3, r2
    343c:	d003      	beq.n	3446 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    343e:	68fb      	ldr	r3, [r7, #12]
    3440:	2201      	movs	r2, #1
    3442:	4313      	orrs	r3, r2
    3444:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    3446:	683b      	ldr	r3, [r7, #0]
    3448:	2202      	movs	r2, #2
    344a:	4013      	ands	r3, r2
    344c:	d003      	beq.n	3456 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	2204      	movs	r2, #4
    3452:	4313      	orrs	r3, r2
    3454:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    3456:	683b      	ldr	r3, [r7, #0]
    3458:	2204      	movs	r2, #4
    345a:	4013      	ands	r3, r2
    345c:	d003      	beq.n	3466 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	2202      	movs	r2, #2
    3462:	4313      	orrs	r3, r2
    3464:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	b2da      	uxtb	r2, r3
    346a:	68bb      	ldr	r3, [r7, #8]
    346c:	719a      	strb	r2, [r3, #6]
}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	46bd      	mov	sp, r7
    3472:	b004      	add	sp, #16
    3474:	bd80      	pop	{r7, pc}
	...

00003478 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    3478:	b580      	push	{r7, lr}
    347a:	b084      	sub	sp, #16
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3486:	46c0      	nop			; (mov r8, r8)
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	0018      	movs	r0, r3
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <adc_enable+0x50>)
    348e:	4798      	blx	r3
    3490:	1e03      	subs	r3, r0, #0
    3492:	d1f9      	bne.n	3488 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3494:	68fb      	ldr	r3, [r7, #12]
    3496:	2207      	movs	r2, #7
    3498:	711a      	strb	r2, [r3, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	2207      	movs	r2, #7
    349e:	719a      	strb	r2, [r3, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    34a0:	68fb      	ldr	r3, [r7, #12]
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	b2db      	uxtb	r3, r3
    34a6:	2202      	movs	r2, #2
    34a8:	4313      	orrs	r3, r2
    34aa:	b2da      	uxtb	r2, r3
    34ac:	68fb      	ldr	r3, [r7, #12]
    34ae:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	0018      	movs	r0, r3
    34b6:	4b04      	ldr	r3, [pc, #16]	; (34c8 <adc_enable+0x50>)
    34b8:	4798      	blx	r3
    34ba:	1e03      	subs	r3, r0, #0
    34bc:	d1f9      	bne.n	34b2 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    34be:	2300      	movs	r3, #0
}
    34c0:	0018      	movs	r0, r3
    34c2:	46bd      	mov	sp, r7
    34c4:	b004      	add	sp, #16
    34c6:	bd80      	pop	{r7, pc}
    34c8:	000033a9 	.word	0x000033a9

000034cc <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b084      	sub	sp, #16
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	0018      	movs	r0, r3
    34e0:	4b0b      	ldr	r3, [pc, #44]	; (3510 <adc_start_conversion+0x44>)
    34e2:	4798      	blx	r3
    34e4:	1e03      	subs	r3, r0, #0
    34e6:	d1f9      	bne.n	34dc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    34e8:	68fb      	ldr	r3, [r7, #12]
    34ea:	7e1b      	ldrb	r3, [r3, #24]
    34ec:	b2db      	uxtb	r3, r3
    34ee:	2202      	movs	r2, #2
    34f0:	4313      	orrs	r3, r2
    34f2:	b2da      	uxtb	r2, r3
    34f4:	68fb      	ldr	r3, [r7, #12]
    34f6:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	0018      	movs	r0, r3
    34fe:	4b04      	ldr	r3, [pc, #16]	; (3510 <adc_start_conversion+0x44>)
    3500:	4798      	blx	r3
    3502:	1e03      	subs	r3, r0, #0
    3504:	d1f9      	bne.n	34fa <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	46bd      	mov	sp, r7
    350a:	b004      	add	sp, #16
    350c:	bd80      	pop	{r7, pc}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	000033a9 	.word	0x000033a9

00003514 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    3514:	b580      	push	{r7, lr}
    3516:	b084      	sub	sp, #16
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
    351c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	0018      	movs	r0, r3
    3522:	4b14      	ldr	r3, [pc, #80]	; (3574 <adc_read+0x60>)
    3524:	4798      	blx	r3
    3526:	0002      	movs	r2, r0
    3528:	2301      	movs	r3, #1
    352a:	4013      	ands	r3, r2
    352c:	d101      	bne.n	3532 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    352e:	2305      	movs	r3, #5
    3530:	e01c      	b.n	356c <adc_read+0x58>
	}

	Adc *const adc_module = module_inst->hw;
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	60fb      	str	r3, [r7, #12]
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3538:	68fb      	ldr	r3, [r7, #12]
    353a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    353c:	b29a      	uxth	r2, r3
    353e:	683b      	ldr	r3, [r7, #0]
    3540:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	2101      	movs	r1, #1
    3546:	0018      	movs	r0, r3
    3548:	4b0b      	ldr	r3, [pc, #44]	; (3578 <adc_read+0x64>)
    354a:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	0018      	movs	r0, r3
    3550:	4b08      	ldr	r3, [pc, #32]	; (3574 <adc_read+0x60>)
    3552:	4798      	blx	r3
    3554:	0002      	movs	r2, r0
    3556:	2304      	movs	r3, #4
    3558:	4013      	ands	r3, r2
    355a:	d006      	beq.n	356a <adc_read+0x56>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	2104      	movs	r1, #4
    3560:	0018      	movs	r0, r3
    3562:	4b05      	ldr	r3, [pc, #20]	; (3578 <adc_read+0x64>)
    3564:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    3566:	231e      	movs	r3, #30
    3568:	e000      	b.n	356c <adc_read+0x58>
	}

	return STATUS_OK;
    356a:	2300      	movs	r3, #0
}
    356c:	0018      	movs	r0, r3
    356e:	46bd      	mov	sp, r7
    3570:	b004      	add	sp, #16
    3572:	bd80      	pop	{r7, pc}
    3574:	000033cf 	.word	0x000033cf
    3578:	00003423 	.word	0x00003423

0000357c <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    357c:	b580      	push	{r7, lr}
    357e:	b084      	sub	sp, #16
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
    3584:	000a      	movs	r2, r1
    3586:	1cfb      	adds	r3, r7, #3
    3588:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	681b      	ldr	r3, [r3, #0]
    358e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3590:	46c0      	nop			; (mov r8, r8)
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	0018      	movs	r0, r3
    3596:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <adc_set_positive_input+0x54>)
    3598:	4798      	blx	r3
    359a:	1e03      	subs	r3, r0, #0
    359c:	d1f9      	bne.n	3592 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    359e:	68fb      	ldr	r3, [r7, #12]
    35a0:	891b      	ldrh	r3, [r3, #8]
    35a2:	b29b      	uxth	r3, r3
    35a4:	221f      	movs	r2, #31
    35a6:	4393      	bics	r3, r2
    35a8:	b29a      	uxth	r2, r3
    35aa:	1cfb      	adds	r3, r7, #3
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	b29b      	uxth	r3, r3
    35b0:	4313      	orrs	r3, r2
    35b2:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
    35b4:	68fb      	ldr	r3, [r7, #12]
    35b6:	811a      	strh	r2, [r3, #8]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    35b8:	46c0      	nop			; (mov r8, r8)
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	0018      	movs	r0, r3
    35be:	4b04      	ldr	r3, [pc, #16]	; (35d0 <adc_set_positive_input+0x54>)
    35c0:	4798      	blx	r3
    35c2:	1e03      	subs	r3, r0, #0
    35c4:	d1f9      	bne.n	35ba <adc_set_positive_input+0x3e>
		/* Wait for synchronization */
	}
}
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	46bd      	mov	sp, r7
    35ca:	b004      	add	sp, #16
    35cc:	bd80      	pop	{r7, pc}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	000033a9 	.word	0x000033a9

000035d4 <dma_enable_callback>:
 * \param[in] type Callback function type
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b082      	sub	sp, #8
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
    35dc:	000a      	movs	r2, r1
    35de:	1cfb      	adds	r3, r7, #3
    35e0:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	resource->callback_enable |= 1 << type;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	7c1b      	ldrb	r3, [r3, #16]
    35e6:	b25a      	sxtb	r2, r3
    35e8:	1cfb      	adds	r3, r7, #3
    35ea:	781b      	ldrb	r3, [r3, #0]
    35ec:	2101      	movs	r1, #1
    35ee:	4099      	lsls	r1, r3
    35f0:	000b      	movs	r3, r1
    35f2:	b25b      	sxtb	r3, r3
    35f4:	4313      	orrs	r3, r2
    35f6:	b25b      	sxtb	r3, r3
    35f8:	b2da      	uxtb	r2, r3
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	741a      	strb	r2, [r3, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	0018      	movs	r0, r3
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	781b      	ldrb	r3, [r3, #0]
    3608:	001a      	movs	r2, r3
    360a:	4b08      	ldr	r3, [pc, #32]	; (362c <dma_enable_callback+0x58>)
    360c:	5c9a      	ldrb	r2, [r3, r2]
    360e:	1cfb      	adds	r3, r7, #3
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	2101      	movs	r1, #1
    3614:	4099      	lsls	r1, r3
    3616:	000b      	movs	r3, r1
    3618:	b2db      	uxtb	r3, r3
    361a:	4313      	orrs	r3, r2
    361c:	b2da      	uxtb	r2, r3
    361e:	4b03      	ldr	r3, [pc, #12]	; (362c <dma_enable_callback+0x58>)
    3620:	541a      	strb	r2, [r3, r0]
}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	46bd      	mov	sp, r7
    3626:	b002      	add	sp, #8
    3628:	bd80      	pop	{r7, pc}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	20000058 	.word	0x20000058

00003630 <dma_register_callback>:
 * \param[in] type Callback function type
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
    3630:	b580      	push	{r7, lr}
    3632:	b084      	sub	sp, #16
    3634:	af00      	add	r7, sp, #0
    3636:	60f8      	str	r0, [r7, #12]
    3638:	60b9      	str	r1, [r7, #8]
    363a:	1dfb      	adds	r3, r7, #7
    363c:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	resource->callback[type] = callback;
    363e:	1dfb      	adds	r3, r7, #7
    3640:	781b      	ldrb	r3, [r3, #0]
    3642:	68fa      	ldr	r2, [r7, #12]
    3644:	009b      	lsls	r3, r3, #2
    3646:	18d3      	adds	r3, r2, r3
    3648:	3304      	adds	r3, #4
    364a:	68ba      	ldr	r2, [r7, #8]
    364c:	601a      	str	r2, [r3, #0]
}
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	46bd      	mov	sp, r7
    3652:	b004      	add	sp, #16
    3654:	bd80      	pop	{r7, pc}

00003656 <dma_descriptor_get_config_defaults>:
 *  \li Default next descriptor not available
 * \param[out] config Pointer to the configuration
 *
 */
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
    3656:	b580      	push	{r7, lr}
    3658:	b082      	sub	sp, #8
    365a:	af00      	add	r7, sp, #0
    365c:	6078      	str	r0, [r7, #4]
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	2201      	movs	r2, #1
    3662:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	2200      	movs	r2, #0
    3668:	705a      	strb	r2, [r3, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	2200      	movs	r2, #0
    366e:	709a      	strb	r2, [r3, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	2200      	movs	r2, #0
    3674:	70da      	strb	r2, [r3, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    3676:	687b      	ldr	r3, [r7, #4]
    3678:	2201      	movs	r2, #1
    367a:	711a      	strb	r2, [r3, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	2201      	movs	r2, #1
    3680:	715a      	strb	r2, [r3, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	2200      	movs	r2, #0
    3686:	719a      	strb	r2, [r3, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	2200      	movs	r2, #0
    368c:	71da      	strb	r2, [r3, #7]
	/* Default transfer size is set to 0 */
	config->block_transfer_count = 0;
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	2200      	movs	r2, #0
    3692:	811a      	strh	r2, [r3, #8]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	2200      	movs	r2, #0
    3698:	60da      	str	r2, [r3, #12]
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	2200      	movs	r2, #0
    369e:	611a      	str	r2, [r3, #16]
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    36a0:	687b      	ldr	r3, [r7, #4]
    36a2:	2200      	movs	r2, #0
    36a4:	615a      	str	r2, [r3, #20]
}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	46bd      	mov	sp, r7
    36aa:	b002      	add	sp, #8
    36ac:	bd80      	pop	{r7, pc}
	...

000036b0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	b082      	sub	sp, #8
    36b4:	af00      	add	r7, sp, #0
    36b6:	0002      	movs	r2, r0
    36b8:	1dfb      	adds	r3, r7, #7
    36ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    36bc:	1dfb      	adds	r3, r7, #7
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	0018      	movs	r0, r3
    36c2:	4b03      	ldr	r3, [pc, #12]	; (36d0 <port_get_group_from_gpio_pin+0x20>)
    36c4:	4798      	blx	r3
    36c6:	0003      	movs	r3, r0
}
    36c8:	0018      	movs	r0, r3
    36ca:	46bd      	mov	sp, r7
    36cc:	b002      	add	sp, #8
    36ce:	bd80      	pop	{r7, pc}
    36d0:	000032c1 	.word	0x000032c1

000036d4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    36d4:	b580      	push	{r7, lr}
    36d6:	b082      	sub	sp, #8
    36d8:	af00      	add	r7, sp, #0
    36da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	2200      	movs	r2, #0
    36e0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	2201      	movs	r2, #1
    36e6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2200      	movs	r2, #0
    36ec:	709a      	strb	r2, [r3, #2]
}
    36ee:	46c0      	nop			; (mov r8, r8)
    36f0:	46bd      	mov	sp, r7
    36f2:	b002      	add	sp, #8
    36f4:	bd80      	pop	{r7, pc}
	...

000036f8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    36f8:	b580      	push	{r7, lr}
    36fa:	b084      	sub	sp, #16
    36fc:	af00      	add	r7, sp, #0
    36fe:	0002      	movs	r2, r0
    3700:	1dfb      	adds	r3, r7, #7
    3702:	701a      	strb	r2, [r3, #0]
    3704:	1dbb      	adds	r3, r7, #6
    3706:	1c0a      	adds	r2, r1, #0
    3708:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    370a:	1dfb      	adds	r3, r7, #7
    370c:	781b      	ldrb	r3, [r3, #0]
    370e:	0018      	movs	r0, r3
    3710:	4b0d      	ldr	r3, [pc, #52]	; (3748 <port_pin_set_output_level+0x50>)
    3712:	4798      	blx	r3
    3714:	0003      	movs	r3, r0
    3716:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3718:	1dfb      	adds	r3, r7, #7
    371a:	781b      	ldrb	r3, [r3, #0]
    371c:	221f      	movs	r2, #31
    371e:	4013      	ands	r3, r2
    3720:	2201      	movs	r2, #1
    3722:	409a      	lsls	r2, r3
    3724:	0013      	movs	r3, r2
    3726:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3728:	1dbb      	adds	r3, r7, #6
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	2b00      	cmp	r3, #0
    372e:	d003      	beq.n	3738 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3730:	68fb      	ldr	r3, [r7, #12]
    3732:	68ba      	ldr	r2, [r7, #8]
    3734:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3736:	e002      	b.n	373e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3738:	68fb      	ldr	r3, [r7, #12]
    373a:	68ba      	ldr	r2, [r7, #8]
    373c:	615a      	str	r2, [r3, #20]
}
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	46bd      	mov	sp, r7
    3742:	b004      	add	sp, #16
    3744:	bd80      	pop	{r7, pc}
    3746:	46c0      	nop			; (mov r8, r8)
    3748:	000036b1 	.word	0x000036b1

0000374c <system_interrupt_enable>:
{
    374c:	b580      	push	{r7, lr}
    374e:	b082      	sub	sp, #8
    3750:	af00      	add	r7, sp, #0
    3752:	0002      	movs	r2, r0
    3754:	1dfb      	adds	r3, r7, #7
    3756:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3758:	4b06      	ldr	r3, [pc, #24]	; (3774 <system_interrupt_enable+0x28>)
    375a:	1dfa      	adds	r2, r7, #7
    375c:	7812      	ldrb	r2, [r2, #0]
    375e:	0011      	movs	r1, r2
    3760:	221f      	movs	r2, #31
    3762:	400a      	ands	r2, r1
    3764:	2101      	movs	r1, #1
    3766:	4091      	lsls	r1, r2
    3768:	000a      	movs	r2, r1
    376a:	601a      	str	r2, [r3, #0]
}
    376c:	46c0      	nop			; (mov r8, r8)
    376e:	46bd      	mov	sp, r7
    3770:	b002      	add	sp, #8
    3772:	bd80      	pop	{r7, pc}
    3774:	e000e100 	.word	0xe000e100

00003778 <usart_is_syncing>:
{
    3778:	b580      	push	{r7, lr}
    377a:	b084      	sub	sp, #16
    377c:	af00      	add	r7, sp, #0
    377e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	681b      	ldr	r3, [r3, #0]
    3784:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    3786:	68fb      	ldr	r3, [r7, #12]
    3788:	69db      	ldr	r3, [r3, #28]
    378a:	1e5a      	subs	r2, r3, #1
    378c:	4193      	sbcs	r3, r2
    378e:	b2db      	uxtb	r3, r3
}
    3790:	0018      	movs	r0, r3
    3792:	46bd      	mov	sp, r7
    3794:	b004      	add	sp, #16
    3796:	bd80      	pop	{r7, pc}

00003798 <_usart_wait_for_sync>:
{
    3798:	b580      	push	{r7, lr}
    379a:	b082      	sub	sp, #8
    379c:	af00      	add	r7, sp, #0
    379e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    37a0:	46c0      	nop			; (mov r8, r8)
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	0018      	movs	r0, r3
    37a6:	4b04      	ldr	r3, [pc, #16]	; (37b8 <_usart_wait_for_sync+0x20>)
    37a8:	4798      	blx	r3
    37aa:	1e03      	subs	r3, r0, #0
    37ac:	d1f9      	bne.n	37a2 <_usart_wait_for_sync+0xa>
}
    37ae:	46c0      	nop			; (mov r8, r8)
    37b0:	46bd      	mov	sp, r7
    37b2:	b002      	add	sp, #8
    37b4:	bd80      	pop	{r7, pc}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	00003779 	.word	0x00003779

000037bc <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    37bc:	b580      	push	{r7, lr}
    37be:	b082      	sub	sp, #8
    37c0:	af00      	add	r7, sp, #0
    37c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    37c4:	687b      	ldr	r3, [r7, #4]
    37c6:	2280      	movs	r2, #128	; 0x80
    37c8:	05d2      	lsls	r2, r2, #23
    37ca:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	2200      	movs	r2, #0
    37d0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	22ff      	movs	r2, #255	; 0xff
    37d6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	2200      	movs	r2, #0
    37dc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	2200      	movs	r2, #0
    37e2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	2296      	movs	r2, #150	; 0x96
    37e8:	0192      	lsls	r2, r2, #6
    37ea:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	2224      	movs	r2, #36	; 0x24
    37f0:	2101      	movs	r1, #1
    37f2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	2225      	movs	r2, #37	; 0x25
    37f8:	2101      	movs	r1, #1
    37fa:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	2226      	movs	r2, #38	; 0x26
    3800:	2100      	movs	r1, #0
    3802:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	2227      	movs	r2, #39	; 0x27
    3808:	2100      	movs	r1, #0
    380a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	2200      	movs	r2, #0
    3810:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	2288      	movs	r2, #136	; 0x88
    3816:	0352      	lsls	r2, r2, #13
    3818:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	222c      	movs	r2, #44	; 0x2c
    381e:	2100      	movs	r1, #0
    3820:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	222d      	movs	r2, #45	; 0x2d
    3826:	2100      	movs	r1, #0
    3828:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	2200      	movs	r2, #0
    382e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2200      	movs	r2, #0
    3834:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	2200      	movs	r2, #0
    383a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	2200      	movs	r2, #0
    3840:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	2200      	movs	r2, #0
    3846:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	2200      	movs	r2, #0
    384c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	2200      	movs	r2, #0
    3852:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	2200      	movs	r2, #0
    3858:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	2200      	movs	r2, #0
    385e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	2200      	movs	r2, #0
    3864:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	2213      	movs	r2, #19
    386a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    386c:	687b      	ldr	r3, [r7, #4]
    386e:	2200      	movs	r2, #0
    3870:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	46bd      	mov	sp, r7
    3876:	b002      	add	sp, #8
    3878:	bd80      	pop	{r7, pc}
	...

0000387c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    387c:	b580      	push	{r7, lr}
    387e:	b084      	sub	sp, #16
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	681b      	ldr	r3, [r3, #0]
    388e:	0018      	movs	r0, r3
    3890:	4b09      	ldr	r3, [pc, #36]	; (38b8 <usart_enable+0x3c>)
    3892:	4798      	blx	r3
    3894:	0003      	movs	r3, r0
    3896:	0018      	movs	r0, r3
    3898:	4b08      	ldr	r3, [pc, #32]	; (38bc <usart_enable+0x40>)
    389a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	0018      	movs	r0, r3
    38a0:	4b07      	ldr	r3, [pc, #28]	; (38c0 <usart_enable+0x44>)
    38a2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    38a4:	68fb      	ldr	r3, [r7, #12]
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	2202      	movs	r2, #2
    38aa:	431a      	orrs	r2, r3
    38ac:	68fb      	ldr	r3, [r7, #12]
    38ae:	601a      	str	r2, [r3, #0]
}
    38b0:	46c0      	nop			; (mov r8, r8)
    38b2:	46bd      	mov	sp, r7
    38b4:	b004      	add	sp, #16
    38b6:	bd80      	pop	{r7, pc}
    38b8:	00001761 	.word	0x00001761
    38bc:	0000374d 	.word	0x0000374d
    38c0:	00003799 	.word	0x00003799

000038c4 <transfer_done_rx>:
DmacDescriptor example_descriptor_rx;
DmacDescriptor example_descriptor_tx;

// Configure DMA
// Create a callback function of receiver done
static void transfer_done_rx( const struct dma_resource* const resource ) {
    38c4:	b580      	push	{r7, lr}
    38c6:	b082      	sub	sp, #8
    38c8:	af00      	add	r7, sp, #0
    38ca:	6078      	str	r0, [r7, #4]
	g_data_valid = true;
    38cc:	4b05      	ldr	r3, [pc, #20]	; (38e4 <transfer_done_rx+0x20>)
    38ce:	2201      	movs	r2, #1
    38d0:	701a      	strb	r2, [r3, #0]
	dma_start_transfer_job(&usart_dma_resource_rx);
    38d2:	4b05      	ldr	r3, [pc, #20]	; (38e8 <transfer_done_rx+0x24>)
    38d4:	0018      	movs	r0, r3
    38d6:	4b05      	ldr	r3, [pc, #20]	; (38ec <transfer_done_rx+0x28>)
    38d8:	4798      	blx	r3
}
    38da:	46c0      	nop			; (mov r8, r8)
    38dc:	46bd      	mov	sp, r7
    38de:	b002      	add	sp, #8
    38e0:	bd80      	pop	{r7, pc}
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	2000009c 	.word	0x2000009c
    38e8:	20000140 	.word	0x20000140
    38ec:	00000e45 	.word	0x00000e45

000038f0 <configure_dma_resource_rx>:

//Create a DMA resource configuration structure
static void configure_dma_resource_rx(struct dma_resource *resource)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b084      	sub	sp, #16
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
	struct dma_resource_config config;
	
	//Initialize the DMA resource configuration struct with the module's default values
	dma_get_config_defaults(&config);
    38f8:	2308      	movs	r3, #8
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	0018      	movs	r0, r3
    38fe:	4b0a      	ldr	r3, [pc, #40]	; (3928 <configure_dma_resource_rx+0x38>)
    3900:	4798      	blx	r3
	
	//Set extra configurations for the DMA resource.
	//It is using peripheral trigger, SERCOM Tx empty trigger and
	//trigger causes a beat transfer in this example
	config.peripheral_trigger = SERCOM3_DMAC_ID_RX;
    3902:	2308      	movs	r3, #8
    3904:	18fb      	adds	r3, r7, r3
    3906:	2207      	movs	r2, #7
    3908:	705a      	strb	r2, [r3, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    390a:	2308      	movs	r3, #8
    390c:	18fb      	adds	r3, r7, r3
    390e:	2202      	movs	r2, #2
    3910:	709a      	strb	r2, [r3, #2]
	
	//Allocate a DMA resource with the configurations
	dma_allocate(resource, &config);
    3912:	2308      	movs	r3, #8
    3914:	18fa      	adds	r2, r7, r3
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	0011      	movs	r1, r2
    391a:	0018      	movs	r0, r3
    391c:	4b03      	ldr	r3, [pc, #12]	; (392c <configure_dma_resource_rx+0x3c>)
    391e:	4798      	blx	r3
}
    3920:	46c0      	nop			; (mov r8, r8)
    3922:	46bd      	mov	sp, r7
    3924:	b004      	add	sp, #16
    3926:	bd80      	pop	{r7, pc}
    3928:	00000cf1 	.word	0x00000cf1
    392c:	00000d25 	.word	0x00000d25

00003930 <setup_transfer_descriptor_rx>:

// Initialize the DMA transfer descriptor configuration struct with the module's default values.
static void setup_transfer_descriptor_rx(DmacDescriptor *descriptor)
{
    3930:	b580      	push	{r7, lr}
    3932:	b088      	sub	sp, #32
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
	struct dma_descriptor_config descriptor_config;
	dma_descriptor_get_config_defaults(&descriptor_config);
    3938:	2308      	movs	r3, #8
    393a:	18fb      	adds	r3, r7, r3
    393c:	0018      	movs	r0, r3
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <setup_transfer_descriptor_rx+0x58>)
    3940:	4798      	blx	r3
	
	//Set the specific parameters for a DMA transfer with transfer size, source address, destination address
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    3942:	2308      	movs	r3, #8
    3944:	18fb      	adds	r3, r7, r3
    3946:	2201      	movs	r2, #1
    3948:	70da      	strb	r2, [r3, #3]
	descriptor_config.src_increment_enable = false;
    394a:	2308      	movs	r3, #8
    394c:	18fb      	adds	r3, r7, r3
    394e:	2200      	movs	r2, #0
    3950:	711a      	strb	r2, [r3, #4]
	descriptor_config.block_transfer_count = INPUT_BUF_SIZE;
    3952:	2308      	movs	r3, #8
    3954:	18fb      	adds	r3, r7, r3
    3956:	2201      	movs	r2, #1
    3958:	811a      	strh	r2, [r3, #8]
	descriptor_config.destination_address = (uint32_t)input_buffer + sizeof(input_buffer);
    395a:	4b0c      	ldr	r3, [pc, #48]	; (398c <setup_transfer_descriptor_rx+0x5c>)
    395c:	1c9a      	adds	r2, r3, #2
    395e:	2308      	movs	r3, #8
    3960:	18fb      	adds	r3, r7, r3
    3962:	611a      	str	r2, [r3, #16]
	descriptor_config.source_address = (uint32_t)(&usart_instance.hw->USART.DATA.reg);
    3964:	4b0a      	ldr	r3, [pc, #40]	; (3990 <setup_transfer_descriptor_rx+0x60>)
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	3328      	adds	r3, #40	; 0x28
    396a:	001a      	movs	r2, r3
    396c:	2308      	movs	r3, #8
    396e:	18fb      	adds	r3, r7, r3
    3970:	60da      	str	r2, [r3, #12]
	
	//Create the DMA transfer descriptor
	dma_descriptor_create(descriptor, &descriptor_config);
    3972:	2308      	movs	r3, #8
    3974:	18fa      	adds	r2, r7, r3
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	0011      	movs	r1, r2
    397a:	0018      	movs	r0, r3
    397c:	4b05      	ldr	r3, [pc, #20]	; (3994 <setup_transfer_descriptor_rx+0x64>)
    397e:	4798      	blx	r3
}
    3980:	46c0      	nop			; (mov r8, r8)
    3982:	46bd      	mov	sp, r7
    3984:	b008      	add	sp, #32
    3986:	bd80      	pop	{r7, pc}
    3988:	00003657 	.word	0x00003657
    398c:	20000094 	.word	0x20000094
    3990:	200000c0 	.word	0x200000c0
    3994:	00000efd 	.word	0x00000efd

00003998 <configure_dma_resource_tx>:


static void configure_dma_resource_tx(struct dma_resource *resource)
{
    3998:	b580      	push	{r7, lr}
    399a:	b084      	sub	sp, #16
    399c:	af00      	add	r7, sp, #0
    399e:	6078      	str	r0, [r7, #4]
	//Create a DMA resource configuration structure for tx
	struct dma_resource_config config;
	
	//Initialize the DMA resource configuration struct with the module's default values
	dma_get_config_defaults(&config);
    39a0:	2308      	movs	r3, #8
    39a2:	18fb      	adds	r3, r7, r3
    39a4:	0018      	movs	r0, r3
    39a6:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <configure_dma_resource_tx+0x38>)
    39a8:	4798      	blx	r3
	config.peripheral_trigger = SERCOM3_DMAC_ID_TX;
    39aa:	2308      	movs	r3, #8
    39ac:	18fb      	adds	r3, r7, r3
    39ae:	2208      	movs	r2, #8
    39b0:	705a      	strb	r2, [r3, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    39b2:	2308      	movs	r3, #8
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	2202      	movs	r2, #2
    39b8:	709a      	strb	r2, [r3, #2]
	dma_allocate(resource, &config);
    39ba:	2308      	movs	r3, #8
    39bc:	18fa      	adds	r2, r7, r3
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	0011      	movs	r1, r2
    39c2:	0018      	movs	r0, r3
    39c4:	4b03      	ldr	r3, [pc, #12]	; (39d4 <configure_dma_resource_tx+0x3c>)
    39c6:	4798      	blx	r3
}
    39c8:	46c0      	nop			; (mov r8, r8)
    39ca:	46bd      	mov	sp, r7
    39cc:	b004      	add	sp, #16
    39ce:	bd80      	pop	{r7, pc}
    39d0:	00000cf1 	.word	0x00000cf1
    39d4:	00000d25 	.word	0x00000d25

000039d8 <setup_transfer_descriptor_tx>:
static void setup_transfer_descriptor_tx(DmacDescriptor *descriptor)
{
    39d8:	b580      	push	{r7, lr}
    39da:	b088      	sub	sp, #32
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
	struct dma_descriptor_config descriptor_config;
	dma_descriptor_get_config_defaults(&descriptor_config);
    39e0:	2308      	movs	r3, #8
    39e2:	18fb      	adds	r3, r7, r3
    39e4:	0018      	movs	r0, r3
    39e6:	4b12      	ldr	r3, [pc, #72]	; (3a30 <setup_transfer_descriptor_tx+0x58>)
    39e8:	4798      	blx	r3
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    39ea:	2308      	movs	r3, #8
    39ec:	18fb      	adds	r3, r7, r3
    39ee:	2201      	movs	r2, #1
    39f0:	70da      	strb	r2, [r3, #3]
	descriptor_config.dst_increment_enable = false;
    39f2:	2308      	movs	r3, #8
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	2200      	movs	r2, #0
    39f8:	715a      	strb	r2, [r3, #5]
	descriptor_config.block_transfer_count = OUTPUT_BUF_SIZE;
    39fa:	2308      	movs	r3, #8
    39fc:	18fb      	adds	r3, r7, r3
    39fe:	2202      	movs	r2, #2
    3a00:	811a      	strh	r2, [r3, #8]
	descriptor_config.source_address = (uint32_t)output_buffer + sizeof(output_buffer);
    3a02:	4b0c      	ldr	r3, [pc, #48]	; (3a34 <setup_transfer_descriptor_tx+0x5c>)
    3a04:	1d1a      	adds	r2, r3, #4
    3a06:	2308      	movs	r3, #8
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	60da      	str	r2, [r3, #12]
	descriptor_config.destination_address = (uint32_t)(&usart_instance.hw->USART.DATA.reg);
    3a0c:	4b0a      	ldr	r3, [pc, #40]	; (3a38 <setup_transfer_descriptor_tx+0x60>)
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	3328      	adds	r3, #40	; 0x28
    3a12:	001a      	movs	r2, r3
    3a14:	2308      	movs	r3, #8
    3a16:	18fb      	adds	r3, r7, r3
    3a18:	611a      	str	r2, [r3, #16]
	dma_descriptor_create(descriptor, &descriptor_config);
    3a1a:	2308      	movs	r3, #8
    3a1c:	18fa      	adds	r2, r7, r3
    3a1e:	687b      	ldr	r3, [r7, #4]
    3a20:	0011      	movs	r1, r2
    3a22:	0018      	movs	r0, r3
    3a24:	4b05      	ldr	r3, [pc, #20]	; (3a3c <setup_transfer_descriptor_tx+0x64>)
    3a26:	4798      	blx	r3
}
    3a28:	46c0      	nop			; (mov r8, r8)
    3a2a:	46bd      	mov	sp, r7
    3a2c:	b008      	add	sp, #32
    3a2e:	bd80      	pop	{r7, pc}
    3a30:	00003657 	.word	0x00003657
    3a34:	20000098 	.word	0x20000098
    3a38:	200000c0 	.word	0x200000c0
    3a3c:	00000efd 	.word	0x00000efd

00003a40 <check_for_commands>:
 
void check_for_commands() {
    3a40:	b580      	push	{r7, lr}
    3a42:	af00      	add	r7, sp, #0
	if (g_data_valid) {
    3a44:	4b2a      	ldr	r3, [pc, #168]	; (3af0 <check_for_commands+0xb0>)
    3a46:	781b      	ldrb	r3, [r3, #0]
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d04d      	beq.n	3ae8 <check_for_commands+0xa8>
		g_data_valid = false;
    3a4c:	4b28      	ldr	r3, [pc, #160]	; (3af0 <check_for_commands+0xb0>)
    3a4e:	2200      	movs	r2, #0
    3a50:	701a      	strb	r2, [r3, #0]
		output_buffer[0] = 'o';
    3a52:	4b28      	ldr	r3, [pc, #160]	; (3af4 <check_for_commands+0xb4>)
    3a54:	226f      	movs	r2, #111	; 0x6f
    3a56:	801a      	strh	r2, [r3, #0]
		output_buffer[1] = '\n';
    3a58:	4b26      	ldr	r3, [pc, #152]	; (3af4 <check_for_commands+0xb4>)
    3a5a:	220a      	movs	r2, #10
    3a5c:	805a      	strh	r2, [r3, #2]
			
		if (input_buffer[0] == 'u') {
    3a5e:	4b26      	ldr	r3, [pc, #152]	; (3af8 <check_for_commands+0xb8>)
    3a60:	881b      	ldrh	r3, [r3, #0]
    3a62:	2b75      	cmp	r3, #117	; 0x75
    3a64:	d10e      	bne.n	3a84 <check_for_commands+0x44>
			// Frequency goes up, this period gets smaller
			g_pwm_period -= 10;
    3a66:	4b25      	ldr	r3, [pc, #148]	; (3afc <check_for_commands+0xbc>)
    3a68:	781b      	ldrb	r3, [r3, #0]
    3a6a:	3b0a      	subs	r3, #10
    3a6c:	b2da      	uxtb	r2, r3
    3a6e:	4b23      	ldr	r3, [pc, #140]	; (3afc <check_for_commands+0xbc>)
    3a70:	701a      	strb	r2, [r3, #0]
			TCC0->PER.reg = g_pwm_period;
    3a72:	4b23      	ldr	r3, [pc, #140]	; (3b00 <check_for_commands+0xc0>)
    3a74:	4a21      	ldr	r2, [pc, #132]	; (3afc <check_for_commands+0xbc>)
    3a76:	7812      	ldrb	r2, [r2, #0]
    3a78:	641a      	str	r2, [r3, #64]	; 0x40
			TCC1->PER.reg = g_pwm_period;
    3a7a:	4b22      	ldr	r3, [pc, #136]	; (3b04 <check_for_commands+0xc4>)
    3a7c:	4a1f      	ldr	r2, [pc, #124]	; (3afc <check_for_commands+0xbc>)
    3a7e:	7812      	ldrb	r2, [r2, #0]
    3a80:	641a      	str	r2, [r3, #64]	; 0x40
    3a82:	e02d      	b.n	3ae0 <check_for_commands+0xa0>
			} else if (input_buffer[0] == 'd') {
    3a84:	4b1c      	ldr	r3, [pc, #112]	; (3af8 <check_for_commands+0xb8>)
    3a86:	881b      	ldrh	r3, [r3, #0]
    3a88:	2b64      	cmp	r3, #100	; 0x64
    3a8a:	d10e      	bne.n	3aaa <check_for_commands+0x6a>
				// Frequency goes down, thus period gets longer
				g_pwm_period += 10;
    3a8c:	4b1b      	ldr	r3, [pc, #108]	; (3afc <check_for_commands+0xbc>)
    3a8e:	781b      	ldrb	r3, [r3, #0]
    3a90:	330a      	adds	r3, #10
    3a92:	b2da      	uxtb	r2, r3
    3a94:	4b19      	ldr	r3, [pc, #100]	; (3afc <check_for_commands+0xbc>)
    3a96:	701a      	strb	r2, [r3, #0]
				TCC0->PER.reg = g_pwm_period;
    3a98:	4b19      	ldr	r3, [pc, #100]	; (3b00 <check_for_commands+0xc0>)
    3a9a:	4a18      	ldr	r2, [pc, #96]	; (3afc <check_for_commands+0xbc>)
    3a9c:	7812      	ldrb	r2, [r2, #0]
    3a9e:	641a      	str	r2, [r3, #64]	; 0x40
				TCC1->PER.reg = g_pwm_period;
    3aa0:	4b18      	ldr	r3, [pc, #96]	; (3b04 <check_for_commands+0xc4>)
    3aa2:	4a16      	ldr	r2, [pc, #88]	; (3afc <check_for_commands+0xbc>)
    3aa4:	7812      	ldrb	r2, [r2, #0]
    3aa6:	641a      	str	r2, [r3, #64]	; 0x40
    3aa8:	e01a      	b.n	3ae0 <check_for_commands+0xa0>
			} else if (input_buffer[0] == 's') {
    3aaa:	4b13      	ldr	r3, [pc, #76]	; (3af8 <check_for_commands+0xb8>)
    3aac:	881b      	ldrh	r3, [r3, #0]
    3aae:	2b73      	cmp	r3, #115	; 0x73
    3ab0:	d107      	bne.n	3ac2 <check_for_commands+0x82>
				g_enable_output = false;
    3ab2:	4b15      	ldr	r3, [pc, #84]	; (3b08 <check_for_commands+0xc8>)
    3ab4:	2200      	movs	r2, #0
    3ab6:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_0_PIN, true);
    3ab8:	2101      	movs	r1, #1
    3aba:	202a      	movs	r0, #42	; 0x2a
    3abc:	4b13      	ldr	r3, [pc, #76]	; (3b0c <check_for_commands+0xcc>)
    3abe:	4798      	blx	r3
    3ac0:	e00e      	b.n	3ae0 <check_for_commands+0xa0>
			} else if (input_buffer[0] == 'r') {
    3ac2:	4b0d      	ldr	r3, [pc, #52]	; (3af8 <check_for_commands+0xb8>)
    3ac4:	881b      	ldrh	r3, [r3, #0]
    3ac6:	2b72      	cmp	r3, #114	; 0x72
    3ac8:	d107      	bne.n	3ada <check_for_commands+0x9a>
				g_enable_output = true;
    3aca:	4b0f      	ldr	r3, [pc, #60]	; (3b08 <check_for_commands+0xc8>)
    3acc:	2201      	movs	r2, #1
    3ace:	701a      	strb	r2, [r3, #0]
				port_pin_set_output_level(LED_0_PIN, false);
    3ad0:	2100      	movs	r1, #0
    3ad2:	202a      	movs	r0, #42	; 0x2a
    3ad4:	4b0d      	ldr	r3, [pc, #52]	; (3b0c <check_for_commands+0xcc>)
    3ad6:	4798      	blx	r3
    3ad8:	e002      	b.n	3ae0 <check_for_commands+0xa0>
			} else {
			output_buffer[0] = 'e';
    3ada:	4b06      	ldr	r3, [pc, #24]	; (3af4 <check_for_commands+0xb4>)
    3adc:	2265      	movs	r2, #101	; 0x65
    3ade:	801a      	strh	r2, [r3, #0]
		}
		dma_start_transfer_job(&usart_dma_resource_tx);
    3ae0:	4b0b      	ldr	r3, [pc, #44]	; (3b10 <check_for_commands+0xd0>)
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b0b      	ldr	r3, [pc, #44]	; (3b14 <check_for_commands+0xd4>)
    3ae6:	4798      	blx	r3
	}
}
    3ae8:	46c0      	nop			; (mov r8, r8)
    3aea:	46bd      	mov	sp, r7
    3aec:	bd80      	pop	{r7, pc}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	2000009c 	.word	0x2000009c
    3af4:	20000098 	.word	0x20000098
    3af8:	20000094 	.word	0x20000094
    3afc:	20000011 	.word	0x20000011
    3b00:	42001400 	.word	0x42001400
    3b04:	42001800 	.word	0x42001800
    3b08:	20000010 	.word	0x20000010
    3b0c:	000036f9 	.word	0x000036f9
    3b10:	20000110 	.word	0x20000110
    3b14:	00000e45 	.word	0x00000e45

00003b18 <configure_usart>:

// CONFIGURE USART
// Create a USART module configuration struct, which can be filled out to adjust the configuration of
// a physical USART peripheral
static void configure_usart(void) {
    3b18:	b580      	push	{r7, lr}
    3b1a:	b090      	sub	sp, #64	; 0x40
    3b1c:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	
	//Initialize the USART configuration struct with the module's default values
	usart_get_config_defaults(&config_usart);
    3b1e:	003b      	movs	r3, r7
    3b20:	0018      	movs	r0, r3
    3b22:	4b14      	ldr	r3, [pc, #80]	; (3b74 <configure_usart+0x5c>)
    3b24:	4798      	blx	r3
	config_usart.baudrate = 9600;
    3b26:	003b      	movs	r3, r7
    3b28:	2296      	movs	r2, #150	; 0x96
    3b2a:	0192      	lsls	r2, r2, #6
    3b2c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3b2e:	003b      	movs	r3, r7
    3b30:	2280      	movs	r2, #128	; 0x80
    3b32:	0352      	lsls	r2, r2, #13
    3b34:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3b36:	003b      	movs	r3, r7
    3b38:	4a0f      	ldr	r2, [pc, #60]	; (3b78 <configure_usart+0x60>)
    3b3a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3b3c:	003b      	movs	r3, r7
    3b3e:	4a0f      	ldr	r2, [pc, #60]	; (3b7c <configure_usart+0x64>)
    3b40:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3b42:	003b      	movs	r3, r7
    3b44:	2201      	movs	r2, #1
    3b46:	4252      	negs	r2, r2
    3b48:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3b4a:	003b      	movs	r3, r7
    3b4c:	2201      	movs	r2, #1
    3b4e:	4252      	negs	r2, r2
    3b50:	63da      	str	r2, [r3, #60]	; 0x3c
	
	//Configure the USART module with the desired settings, retrying while the driver is busy
	//until the configuration is stressfully set.
	while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK);
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	003a      	movs	r2, r7
    3b56:	490a      	ldr	r1, [pc, #40]	; (3b80 <configure_usart+0x68>)
    3b58:	4b0a      	ldr	r3, [pc, #40]	; (3b84 <configure_usart+0x6c>)
    3b5a:	0018      	movs	r0, r3
    3b5c:	4b0a      	ldr	r3, [pc, #40]	; (3b88 <configure_usart+0x70>)
    3b5e:	4798      	blx	r3
    3b60:	1e03      	subs	r3, r0, #0
    3b62:	d1f7      	bne.n	3b54 <configure_usart+0x3c>
	
	//Enable the USART module.
	usart_enable(&usart_instance);
    3b64:	4b07      	ldr	r3, [pc, #28]	; (3b84 <configure_usart+0x6c>)
    3b66:	0018      	movs	r0, r3
    3b68:	4b08      	ldr	r3, [pc, #32]	; (3b8c <configure_usart+0x74>)
    3b6a:	4798      	blx	r3
}
    3b6c:	46c0      	nop			; (mov r8, r8)
    3b6e:	46bd      	mov	sp, r7
    3b70:	b010      	add	sp, #64	; 0x40
    3b72:	bd80      	pop	{r7, pc}
    3b74:	000037bd 	.word	0x000037bd
    3b78:	00160002 	.word	0x00160002
    3b7c:	00170002 	.word	0x00170002
    3b80:	42000c00 	.word	0x42000c00
    3b84:	200000c0 	.word	0x200000c0
    3b88:	00001c35 	.word	0x00001c35
    3b8c:	0000387d 	.word	0x0000387d

00003b90 <measure_voltage>:


static float measure_voltage(struct adc_module *adc, enum adc_positive_input analog_ch, float ref_voltage){
    3b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b92:	b087      	sub	sp, #28
    3b94:	af00      	add	r7, sp, #0
    3b96:	60f8      	str	r0, [r7, #12]
    3b98:	607a      	str	r2, [r7, #4]
    3b9a:	230b      	movs	r3, #11
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	1c0a      	adds	r2, r1, #0
    3ba0:	701a      	strb	r2, [r3, #0]
	
	adc_set_positive_input(adc, analog_ch);
    3ba2:	230b      	movs	r3, #11
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	781a      	ldrb	r2, [r3, #0]
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	0011      	movs	r1, r2
    3bac:	0018      	movs	r0, r3
    3bae:	4b19      	ldr	r3, [pc, #100]	; (3c14 <measure_voltage+0x84>)
    3bb0:	4798      	blx	r3
	adc_start_conversion(adc);
    3bb2:	68fb      	ldr	r3, [r7, #12]
    3bb4:	0018      	movs	r0, r3
    3bb6:	4b18      	ldr	r3, [pc, #96]	; (3c18 <measure_voltage+0x88>)
    3bb8:	4798      	blx	r3
	
	uint16_t adc_value;
	adc_read(adc, &adc_value);
    3bba:	2316      	movs	r3, #22
    3bbc:	18fa      	adds	r2, r7, r3
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	0011      	movs	r1, r2
    3bc2:	0018      	movs	r0, r3
    3bc4:	4b15      	ldr	r3, [pc, #84]	; (3c1c <measure_voltage+0x8c>)
    3bc6:	4798      	blx	r3
	
	return (adc_value / 255.0) * ref_voltage;
    3bc8:	2316      	movs	r3, #22
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	881b      	ldrh	r3, [r3, #0]
    3bce:	001a      	movs	r2, r3
    3bd0:	4b13      	ldr	r3, [pc, #76]	; (3c20 <measure_voltage+0x90>)
    3bd2:	0010      	movs	r0, r2
    3bd4:	4798      	blx	r3
    3bd6:	4c13      	ldr	r4, [pc, #76]	; (3c24 <measure_voltage+0x94>)
    3bd8:	2200      	movs	r2, #0
    3bda:	4b13      	ldr	r3, [pc, #76]	; (3c28 <measure_voltage+0x98>)
    3bdc:	47a0      	blx	r4
    3bde:	0003      	movs	r3, r0
    3be0:	000c      	movs	r4, r1
    3be2:	001d      	movs	r5, r3
    3be4:	0026      	movs	r6, r4
    3be6:	4b11      	ldr	r3, [pc, #68]	; (3c2c <measure_voltage+0x9c>)
    3be8:	6878      	ldr	r0, [r7, #4]
    3bea:	4798      	blx	r3
    3bec:	0002      	movs	r2, r0
    3bee:	000b      	movs	r3, r1
    3bf0:	4c0f      	ldr	r4, [pc, #60]	; (3c30 <measure_voltage+0xa0>)
    3bf2:	0028      	movs	r0, r5
    3bf4:	0031      	movs	r1, r6
    3bf6:	47a0      	blx	r4
    3bf8:	0003      	movs	r3, r0
    3bfa:	000c      	movs	r4, r1
    3bfc:	0019      	movs	r1, r3
    3bfe:	0022      	movs	r2, r4
    3c00:	4b0c      	ldr	r3, [pc, #48]	; (3c34 <measure_voltage+0xa4>)
    3c02:	0008      	movs	r0, r1
    3c04:	0011      	movs	r1, r2
    3c06:	4798      	blx	r3
    3c08:	1c03      	adds	r3, r0, #0
}
    3c0a:	1c18      	adds	r0, r3, #0
    3c0c:	46bd      	mov	sp, r7
    3c0e:	b007      	add	sp, #28
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	0000357d 	.word	0x0000357d
    3c18:	000034cd 	.word	0x000034cd
    3c1c:	00003515 	.word	0x00003515
    3c20:	00005a59 	.word	0x00005a59
    3c24:	00004ef1 	.word	0x00004ef1
    3c28:	406fe000 	.word	0x406fe000
    3c2c:	00005add 	.word	0x00005add
    3c30:	00005559 	.word	0x00005559
    3c34:	00005b81 	.word	0x00005b81

00003c38 <main>:

int main (void) {
    3c38:	b590      	push	{r4, r7, lr}
    3c3a:	b0eb      	sub	sp, #428	; 0x1ac
    3c3c:	af00      	add	r7, sp, #0
	// https://asf.microchip.com/docs/latest/search.html?device=saml21
	/************************************************************************/
	/* Increase CPU clock to 16MHz                                          */
	/************************************************************************/
	OSCCTRL->OSC16MCTRL.bit.FSEL = 0x3;
    3c3e:	4afe      	ldr	r2, [pc, #1016]	; (4038 <main+0x400>)
    3c40:	7d13      	ldrb	r3, [r2, #20]
    3c42:	210c      	movs	r1, #12
    3c44:	430b      	orrs	r3, r1
    3c46:	7513      	strb	r3, [r2, #20]
	/************************************************************************/
	/* Set internal voltage reference for ADC/SDADC/DAC                     */
	/* Family data sheet 23.8.7                                             */
	/************************************************************************/
	struct system_voltage_references_config voltage_reference_cfg;
	system_voltage_reference_get_config_defaults(&voltage_reference_cfg);
    3c48:	23cc      	movs	r3, #204	; 0xcc
    3c4a:	005b      	lsls	r3, r3, #1
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	0018      	movs	r0, r3
    3c50:	4bfa      	ldr	r3, [pc, #1000]	; (403c <main+0x404>)
    3c52:	4798      	blx	r3
	voltage_reference_cfg.sel = SYSTEM_VOLTAGE_REFERENCE_2V0;
    3c54:	23cc      	movs	r3, #204	; 0xcc
    3c56:	005b      	lsls	r3, r3, #1
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	2204      	movs	r2, #4
    3c5c:	701a      	strb	r2, [r3, #0]
	system_voltage_reference_set_config(&voltage_reference_cfg);
    3c5e:	23cc      	movs	r3, #204	; 0xcc
    3c60:	005b      	lsls	r3, r3, #1
    3c62:	18fb      	adds	r3, r7, r3
    3c64:	0018      	movs	r0, r3
    3c66:	4bf6      	ldr	r3, [pc, #984]	; (4040 <main+0x408>)
    3c68:	4798      	blx	r3
	/************************************************************************/
	/* Enable UART communication                                            */
	/* Family data sheet 15.0.0                                             */
	/************************************************************************/
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3c6a:	23ca      	movs	r3, #202	; 0xca
    3c6c:	005b      	lsls	r3, r3, #1
    3c6e:	18fb      	adds	r3, r7, r3
    3c70:	0018      	movs	r0, r3
    3c72:	4bf4      	ldr	r3, [pc, #976]	; (4044 <main+0x40c>)
    3c74:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3c76:	23ca      	movs	r3, #202	; 0xca
    3c78:	005b      	lsls	r3, r3, #1
    3c7a:	18fb      	adds	r3, r7, r3
    3c7c:	2201      	movs	r2, #1
    3c7e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    3c80:	23ca      	movs	r3, #202	; 0xca
    3c82:	005b      	lsls	r3, r3, #1
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	0019      	movs	r1, r3
    3c88:	202a      	movs	r0, #42	; 0x2a
    3c8a:	4bef      	ldr	r3, [pc, #956]	; (4048 <main+0x410>)
    3c8c:	4798      	blx	r3
	
	configure_usart();
    3c8e:	4bef      	ldr	r3, [pc, #956]	; (404c <main+0x414>)
    3c90:	4798      	blx	r3
	configure_dma_resource_rx(&usart_dma_resource_rx);
    3c92:	4bef      	ldr	r3, [pc, #956]	; (4050 <main+0x418>)
    3c94:	0018      	movs	r0, r3
    3c96:	4bef      	ldr	r3, [pc, #956]	; (4054 <main+0x41c>)
    3c98:	4798      	blx	r3
	configure_dma_resource_tx(&usart_dma_resource_tx);
    3c9a:	4bef      	ldr	r3, [pc, #956]	; (4058 <main+0x420>)
    3c9c:	0018      	movs	r0, r3
    3c9e:	4bef      	ldr	r3, [pc, #956]	; (405c <main+0x424>)
    3ca0:	4798      	blx	r3
	
	setup_transfer_descriptor_rx(&example_descriptor_rx);
    3ca2:	4bef      	ldr	r3, [pc, #956]	; (4060 <main+0x428>)
    3ca4:	0018      	movs	r0, r3
    3ca6:	4bef      	ldr	r3, [pc, #956]	; (4064 <main+0x42c>)
    3ca8:	4798      	blx	r3
	setup_transfer_descriptor_tx(&example_descriptor_tx);
    3caa:	4bef      	ldr	r3, [pc, #956]	; (4068 <main+0x430>)
    3cac:	0018      	movs	r0, r3
    3cae:	4bef      	ldr	r3, [pc, #956]	; (406c <main+0x434>)
    3cb0:	4798      	blx	r3
	
	dma_add_descriptor(&usart_dma_resource_rx, &example_descriptor_rx);
    3cb2:	4aeb      	ldr	r2, [pc, #940]	; (4060 <main+0x428>)
    3cb4:	4be6      	ldr	r3, [pc, #920]	; (4050 <main+0x418>)
    3cb6:	0011      	movs	r1, r2
    3cb8:	0018      	movs	r0, r3
    3cba:	4bed      	ldr	r3, [pc, #948]	; (4070 <main+0x438>)
    3cbc:	4798      	blx	r3
	dma_add_descriptor(&usart_dma_resource_tx, &example_descriptor_tx);
    3cbe:	4aea      	ldr	r2, [pc, #936]	; (4068 <main+0x430>)
    3cc0:	4be5      	ldr	r3, [pc, #916]	; (4058 <main+0x420>)
    3cc2:	0011      	movs	r1, r2
    3cc4:	0018      	movs	r0, r3
    3cc6:	4bea      	ldr	r3, [pc, #936]	; (4070 <main+0x438>)
    3cc8:	4798      	blx	r3
	
	dma_register_callback(&usart_dma_resource_rx, transfer_done_rx, DMA_CALLBACK_TRANSFER_DONE);
    3cca:	49ea      	ldr	r1, [pc, #936]	; (4074 <main+0x43c>)
    3ccc:	4be0      	ldr	r3, [pc, #896]	; (4050 <main+0x418>)
    3cce:	2201      	movs	r2, #1
    3cd0:	0018      	movs	r0, r3
    3cd2:	4be9      	ldr	r3, [pc, #932]	; (4078 <main+0x440>)
    3cd4:	4798      	blx	r3
	
	dma_enable_callback(&usart_dma_resource_rx, DMA_CALLBACK_TRANSFER_DONE);
    3cd6:	4bde      	ldr	r3, [pc, #888]	; (4050 <main+0x418>)
    3cd8:	2101      	movs	r1, #1
    3cda:	0018      	movs	r0, r3
    3cdc:	4be7      	ldr	r3, [pc, #924]	; (407c <main+0x444>)
    3cde:	4798      	blx	r3
	dma_enable_callback(&usart_dma_resource_tx, DMA_CALLBACK_TRANSFER_DONE);
    3ce0:	4bdd      	ldr	r3, [pc, #884]	; (4058 <main+0x420>)
    3ce2:	2101      	movs	r1, #1
    3ce4:	0018      	movs	r0, r3
    3ce6:	4be5      	ldr	r3, [pc, #916]	; (407c <main+0x444>)
    3ce8:	4798      	blx	r3
	
	dma_start_transfer_job(&usart_dma_resource_rx);
    3cea:	4bd9      	ldr	r3, [pc, #868]	; (4050 <main+0x418>)
    3cec:	0018      	movs	r0, r3
    3cee:	4be4      	ldr	r3, [pc, #912]	; (4080 <main+0x448>)
    3cf0:	4798      	blx	r3
	/* Initialize the PWM                                                   */
	/* We're using TCC0 pin PA04 and TCC1 pin PA06                          */
	/************************************************************************/
	
	struct tcc_config tcc0_cfg;
	tcc_get_config_defaults(&tcc0_cfg, TCC0);
    3cf2:	4ae4      	ldr	r2, [pc, #912]	; (4084 <main+0x44c>)
    3cf4:	23f0      	movs	r3, #240	; 0xf0
    3cf6:	18fb      	adds	r3, r7, r3
    3cf8:	0011      	movs	r1, r2
    3cfa:	0018      	movs	r0, r3
    3cfc:	4be2      	ldr	r3, [pc, #904]	; (4088 <main+0x450>)
    3cfe:	4798      	blx	r3
	tcc0_cfg.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    3d00:	23f0      	movs	r3, #240	; 0xf0
    3d02:	18fb      	adds	r3, r7, r3
    3d04:	2200      	movs	r2, #0
    3d06:	731a      	strb	r2, [r3, #12]
	tcc0_cfg.counter.period = g_pwm_period;
    3d08:	4be0      	ldr	r3, [pc, #896]	; (408c <main+0x454>)
    3d0a:	781b      	ldrb	r3, [r3, #0]
    3d0c:	001a      	movs	r2, r3
    3d0e:	23f0      	movs	r3, #240	; 0xf0
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	605a      	str	r2, [r3, #4]
	// output low when count is greater than CCx
	tcc0_cfg.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    3d14:	23f0      	movs	r3, #240	; 0xf0
    3d16:	18fb      	adds	r3, r7, r3
    3d18:	2202      	movs	r2, #2
    3d1a:	761a      	strb	r2, [r3, #24]
	//tcc0_cfg.counter.count = 66; // Offset the first PWM pulse
	
	tcc0_cfg.compare.match[0] = g_pwm_period / 2;
    3d1c:	4bdb      	ldr	r3, [pc, #876]	; (408c <main+0x454>)
    3d1e:	781b      	ldrb	r3, [r3, #0]
    3d20:	085b      	lsrs	r3, r3, #1
    3d22:	b2db      	uxtb	r3, r3
    3d24:	001a      	movs	r2, r3
    3d26:	23f0      	movs	r3, #240	; 0xf0
    3d28:	18fb      	adds	r3, r7, r3
    3d2a:	61da      	str	r2, [r3, #28]
	tcc0_cfg.pins.enable_wave_out_pin[0] = true;
    3d2c:	23f0      	movs	r3, #240	; 0xf0
    3d2e:	18fb      	adds	r3, r7, r3
    3d30:	2298      	movs	r2, #152	; 0x98
    3d32:	2101      	movs	r1, #1
    3d34:	5499      	strb	r1, [r3, r2]
	tcc0_cfg.pins.wave_out_pin[0]        = PIN_PA04E_TCC0_WO0;
    3d36:	23f0      	movs	r3, #240	; 0xf0
    3d38:	18fb      	adds	r3, r7, r3
    3d3a:	2204      	movs	r2, #4
    3d3c:	659a      	str	r2, [r3, #88]	; 0x58
	tcc0_cfg.pins.wave_out_pin_mux[0]    = MUX_PA04E_TCC0_WO0;
    3d3e:	23f0      	movs	r3, #240	; 0xf0
    3d40:	18fb      	adds	r3, r7, r3
    3d42:	2204      	movs	r2, #4
    3d44:	679a      	str	r2, [r3, #120]	; 0x78
	
	tcc0_cfg.compare.match[1] = g_pwm_period / 2;
    3d46:	4bd1      	ldr	r3, [pc, #836]	; (408c <main+0x454>)
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	085b      	lsrs	r3, r3, #1
    3d4c:	b2db      	uxtb	r3, r3
    3d4e:	001a      	movs	r2, r3
    3d50:	23f0      	movs	r3, #240	; 0xf0
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	621a      	str	r2, [r3, #32]
	tcc0_cfg.pins.enable_wave_out_pin[1] = true;
    3d56:	23f0      	movs	r3, #240	; 0xf0
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	2299      	movs	r2, #153	; 0x99
    3d5c:	2101      	movs	r1, #1
    3d5e:	5499      	strb	r1, [r3, r2]
	tcc0_cfg.pins.wave_out_pin[1]        = PIN_PA05E_TCC0_WO1;
    3d60:	23f0      	movs	r3, #240	; 0xf0
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	2205      	movs	r2, #5
    3d66:	65da      	str	r2, [r3, #92]	; 0x5c
	tcc0_cfg.pins.wave_out_pin_mux[1]    = MUX_PA05E_TCC0_WO1;
    3d68:	23f0      	movs	r3, #240	; 0xf0
    3d6a:	18fb      	adds	r3, r7, r3
    3d6c:	2204      	movs	r2, #4
    3d6e:	67da      	str	r2, [r3, #124]	; 0x7c
	
	struct tcc_module tcc0_instance;
	tcc_init(&tcc0_instance, TCC0, &tcc0_cfg);
    3d70:	23f0      	movs	r3, #240	; 0xf0
    3d72:	18fa      	adds	r2, r7, r3
    3d74:	49c3      	ldr	r1, [pc, #780]	; (4084 <main+0x44c>)
    3d76:	23e8      	movs	r3, #232	; 0xe8
    3d78:	18fb      	adds	r3, r7, r3
    3d7a:	0018      	movs	r0, r3
    3d7c:	4bc4      	ldr	r3, [pc, #784]	; (4090 <main+0x458>)
    3d7e:	4798      	blx	r3
	
	struct tcc_config tcc1_cfg;
	tcc_get_config_defaults(&tcc1_cfg, TCC1);
    3d80:	4ac4      	ldr	r2, [pc, #784]	; (4094 <main+0x45c>)
    3d82:	2344      	movs	r3, #68	; 0x44
    3d84:	18fb      	adds	r3, r7, r3
    3d86:	0011      	movs	r1, r2
    3d88:	0018      	movs	r0, r3
    3d8a:	4bbf      	ldr	r3, [pc, #764]	; (4088 <main+0x450>)
    3d8c:	4798      	blx	r3
	tcc1_cfg.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    3d8e:	4bc2      	ldr	r3, [pc, #776]	; (4098 <main+0x460>)
    3d90:	22d4      	movs	r2, #212	; 0xd4
    3d92:	0052      	lsls	r2, r2, #1
    3d94:	4694      	mov	ip, r2
    3d96:	44bc      	add	ip, r7
    3d98:	4463      	add	r3, ip
    3d9a:	2200      	movs	r2, #0
    3d9c:	731a      	strb	r2, [r3, #12]
	tcc1_cfg.counter.period = g_pwm_period;
    3d9e:	4bbb      	ldr	r3, [pc, #748]	; (408c <main+0x454>)
    3da0:	781b      	ldrb	r3, [r3, #0]
    3da2:	001a      	movs	r2, r3
    3da4:	4bbc      	ldr	r3, [pc, #752]	; (4098 <main+0x460>)
    3da6:	21d4      	movs	r1, #212	; 0xd4
    3da8:	0049      	lsls	r1, r1, #1
    3daa:	468c      	mov	ip, r1
    3dac:	44bc      	add	ip, r7
    3dae:	4463      	add	r3, ip
    3db0:	605a      	str	r2, [r3, #4]
	tcc1_cfg.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    3db2:	4bb9      	ldr	r3, [pc, #740]	; (4098 <main+0x460>)
    3db4:	22d4      	movs	r2, #212	; 0xd4
    3db6:	0052      	lsls	r2, r2, #1
    3db8:	4694      	mov	ip, r2
    3dba:	44bc      	add	ip, r7
    3dbc:	4463      	add	r3, ip
    3dbe:	2202      	movs	r2, #2
    3dc0:	761a      	strb	r2, [r3, #24]
	
	tcc1_cfg.compare.match[0] = g_pwm_period / 2;
    3dc2:	4bb2      	ldr	r3, [pc, #712]	; (408c <main+0x454>)
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	085b      	lsrs	r3, r3, #1
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	001a      	movs	r2, r3
    3dcc:	4bb2      	ldr	r3, [pc, #712]	; (4098 <main+0x460>)
    3dce:	21d4      	movs	r1, #212	; 0xd4
    3dd0:	0049      	lsls	r1, r1, #1
    3dd2:	468c      	mov	ip, r1
    3dd4:	44bc      	add	ip, r7
    3dd6:	4463      	add	r3, ip
    3dd8:	61da      	str	r2, [r3, #28]
	tcc1_cfg.pins.enable_wave_out_pin[0] = true;
    3dda:	4baf      	ldr	r3, [pc, #700]	; (4098 <main+0x460>)
    3ddc:	22d4      	movs	r2, #212	; 0xd4
    3dde:	0052      	lsls	r2, r2, #1
    3de0:	4694      	mov	ip, r2
    3de2:	44bc      	add	ip, r7
    3de4:	4463      	add	r3, ip
    3de6:	2298      	movs	r2, #152	; 0x98
    3de8:	2101      	movs	r1, #1
    3dea:	5499      	strb	r1, [r3, r2]
	tcc1_cfg.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
    3dec:	4baa      	ldr	r3, [pc, #680]	; (4098 <main+0x460>)
    3dee:	22d4      	movs	r2, #212	; 0xd4
    3df0:	0052      	lsls	r2, r2, #1
    3df2:	4694      	mov	ip, r2
    3df4:	44bc      	add	ip, r7
    3df6:	4463      	add	r3, ip
    3df8:	2206      	movs	r2, #6
    3dfa:	659a      	str	r2, [r3, #88]	; 0x58
	tcc1_cfg.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
    3dfc:	4ba6      	ldr	r3, [pc, #664]	; (4098 <main+0x460>)
    3dfe:	22d4      	movs	r2, #212	; 0xd4
    3e00:	0052      	lsls	r2, r2, #1
    3e02:	4694      	mov	ip, r2
    3e04:	44bc      	add	ip, r7
    3e06:	4463      	add	r3, ip
    3e08:	2204      	movs	r2, #4
    3e0a:	679a      	str	r2, [r3, #120]	; 0x78
	
	tcc1_cfg.compare.match[1] = g_pwm_period / 2;
    3e0c:	4b9f      	ldr	r3, [pc, #636]	; (408c <main+0x454>)
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	085b      	lsrs	r3, r3, #1
    3e12:	b2db      	uxtb	r3, r3
    3e14:	001a      	movs	r2, r3
    3e16:	4ba0      	ldr	r3, [pc, #640]	; (4098 <main+0x460>)
    3e18:	21d4      	movs	r1, #212	; 0xd4
    3e1a:	0049      	lsls	r1, r1, #1
    3e1c:	468c      	mov	ip, r1
    3e1e:	44bc      	add	ip, r7
    3e20:	4463      	add	r3, ip
    3e22:	621a      	str	r2, [r3, #32]
	tcc1_cfg.pins.enable_wave_out_pin[1] = true;
    3e24:	4b9c      	ldr	r3, [pc, #624]	; (4098 <main+0x460>)
    3e26:	22d4      	movs	r2, #212	; 0xd4
    3e28:	0052      	lsls	r2, r2, #1
    3e2a:	4694      	mov	ip, r2
    3e2c:	44bc      	add	ip, r7
    3e2e:	4463      	add	r3, ip
    3e30:	2299      	movs	r2, #153	; 0x99
    3e32:	2101      	movs	r1, #1
    3e34:	5499      	strb	r1, [r3, r2]
	tcc1_cfg.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    3e36:	4b98      	ldr	r3, [pc, #608]	; (4098 <main+0x460>)
    3e38:	22d4      	movs	r2, #212	; 0xd4
    3e3a:	0052      	lsls	r2, r2, #1
    3e3c:	4694      	mov	ip, r2
    3e3e:	44bc      	add	ip, r7
    3e40:	4463      	add	r3, ip
    3e42:	2207      	movs	r2, #7
    3e44:	65da      	str	r2, [r3, #92]	; 0x5c
	tcc1_cfg.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    3e46:	4b94      	ldr	r3, [pc, #592]	; (4098 <main+0x460>)
    3e48:	22d4      	movs	r2, #212	; 0xd4
    3e4a:	0052      	lsls	r2, r2, #1
    3e4c:	4694      	mov	ip, r2
    3e4e:	44bc      	add	ip, r7
    3e50:	4463      	add	r3, ip
    3e52:	2204      	movs	r2, #4
    3e54:	67da      	str	r2, [r3, #124]	; 0x7c
	
	struct tcc_module tcc1_instance;
	tcc_init(&tcc1_instance, TCC1, &tcc1_cfg);
    3e56:	2344      	movs	r3, #68	; 0x44
    3e58:	18fa      	adds	r2, r7, r3
    3e5a:	498e      	ldr	r1, [pc, #568]	; (4094 <main+0x45c>)
    3e5c:	233c      	movs	r3, #60	; 0x3c
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	0018      	movs	r0, r3
    3e62:	4b8b      	ldr	r3, [pc, #556]	; (4090 <main+0x458>)
    3e64:	4798      	blx	r3
	tcc1_instance.hw->WAVE.bit.POL0 = !tcc1_instance.hw->WAVE.bit.POL0;
    3e66:	4b8d      	ldr	r3, [pc, #564]	; (409c <main+0x464>)
    3e68:	22d4      	movs	r2, #212	; 0xd4
    3e6a:	0052      	lsls	r2, r2, #1
    3e6c:	4694      	mov	ip, r2
    3e6e:	44bc      	add	ip, r7
    3e70:	4463      	add	r3, ip
    3e72:	681b      	ldr	r3, [r3, #0]
    3e74:	4a89      	ldr	r2, [pc, #548]	; (409c <main+0x464>)
    3e76:	21d4      	movs	r1, #212	; 0xd4
    3e78:	0049      	lsls	r1, r1, #1
    3e7a:	468c      	mov	ip, r1
    3e7c:	44bc      	add	ip, r7
    3e7e:	4462      	add	r2, ip
    3e80:	6812      	ldr	r2, [r2, #0]
    3e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    3e84:	03d2      	lsls	r2, r2, #15
    3e86:	0fd2      	lsrs	r2, r2, #31
    3e88:	b2d2      	uxtb	r2, r2
    3e8a:	2101      	movs	r1, #1
    3e8c:	404a      	eors	r2, r1
    3e8e:	b2d1      	uxtb	r1, r2
    3e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3e92:	2001      	movs	r0, #1
    3e94:	4001      	ands	r1, r0
    3e96:	0409      	lsls	r1, r1, #16
    3e98:	4881      	ldr	r0, [pc, #516]	; (40a0 <main+0x468>)
    3e9a:	4002      	ands	r2, r0
    3e9c:	430a      	orrs	r2, r1
    3e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	tcc1_instance.hw->WAVE.bit.POL1 = !tcc1_instance.hw->WAVE.bit.POL1;
    3ea0:	4b7e      	ldr	r3, [pc, #504]	; (409c <main+0x464>)
    3ea2:	22d4      	movs	r2, #212	; 0xd4
    3ea4:	0052      	lsls	r2, r2, #1
    3ea6:	4694      	mov	ip, r2
    3ea8:	44bc      	add	ip, r7
    3eaa:	4463      	add	r3, ip
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	4a7b      	ldr	r2, [pc, #492]	; (409c <main+0x464>)
    3eb0:	21d4      	movs	r1, #212	; 0xd4
    3eb2:	0049      	lsls	r1, r1, #1
    3eb4:	468c      	mov	ip, r1
    3eb6:	44bc      	add	ip, r7
    3eb8:	4462      	add	r2, ip
    3eba:	6812      	ldr	r2, [r2, #0]
    3ebc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    3ebe:	0392      	lsls	r2, r2, #14
    3ec0:	0fd2      	lsrs	r2, r2, #31
    3ec2:	b2d2      	uxtb	r2, r2
    3ec4:	2101      	movs	r1, #1
    3ec6:	404a      	eors	r2, r1
    3ec8:	b2d1      	uxtb	r1, r2
    3eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3ecc:	2001      	movs	r0, #1
    3ece:	4001      	ands	r1, r0
    3ed0:	0449      	lsls	r1, r1, #17
    3ed2:	4874      	ldr	r0, [pc, #464]	; (40a4 <main+0x46c>)
    3ed4:	4002      	ands	r2, r0
    3ed6:	430a      	orrs	r2, r1
    3ed8:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Initialize the ADCs                                                  */
	/* We're using pins PA03 (AIN1) and PB07 (AIN15)                        */
	/************************************************************************/
	// Configure analog pins
	struct system_pinmux_config config;
	system_pinmux_get_config_defaults(&config);
    3eda:	2338      	movs	r3, #56	; 0x38
    3edc:	18fb      	adds	r3, r7, r3
    3ede:	0018      	movs	r0, r3
    3ee0:	4b71      	ldr	r3, [pc, #452]	; (40a8 <main+0x470>)
    3ee2:	4798      	blx	r3

	// input_pull is being set to SYSTEM_PINMUX_PIN_PULL_NONE to cancel out the
	// default pinmux_config struct setting of a pull-up enabled.
	config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3ee4:	4b71      	ldr	r3, [pc, #452]	; (40ac <main+0x474>)
    3ee6:	22d4      	movs	r2, #212	; 0xd4
    3ee8:	0052      	lsls	r2, r2, #1
    3eea:	4694      	mov	ip, r2
    3eec:	44bc      	add	ip, r7
    3eee:	4463      	add	r3, ip
    3ef0:	2200      	movs	r2, #0
    3ef2:	709a      	strb	r2, [r3, #2]
	config.mux_position = 1;
    3ef4:	4b6d      	ldr	r3, [pc, #436]	; (40ac <main+0x474>)
    3ef6:	22d4      	movs	r2, #212	; 0xd4
    3ef8:	0052      	lsls	r2, r2, #1
    3efa:	4694      	mov	ip, r2
    3efc:	44bc      	add	ip, r7
    3efe:	4463      	add	r3, ip
    3f00:	2201      	movs	r2, #1
    3f02:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA03, &config);
    3f04:	2338      	movs	r3, #56	; 0x38
    3f06:	18fb      	adds	r3, r7, r3
    3f08:	0019      	movs	r1, r3
    3f0a:	2003      	movs	r0, #3
    3f0c:	4b68      	ldr	r3, [pc, #416]	; (40b0 <main+0x478>)
    3f0e:	4798      	blx	r3
	system_pinmux_pin_set_config(PIN_PB07, &config);
    3f10:	2338      	movs	r3, #56	; 0x38
    3f12:	18fb      	adds	r3, r7, r3
    3f14:	0019      	movs	r1, r3
    3f16:	2027      	movs	r0, #39	; 0x27
    3f18:	4b65      	ldr	r3, [pc, #404]	; (40b0 <main+0x478>)
    3f1a:	4798      	blx	r3
	
	// Configure the ADC
	struct adc_config adc0_cfg;
	adc_get_config_defaults(&adc0_cfg);
    3f1c:	230c      	movs	r3, #12
    3f1e:	18fb      	adds	r3, r7, r3
    3f20:	0018      	movs	r0, r3
    3f22:	4b64      	ldr	r3, [pc, #400]	; (40b4 <main+0x47c>)
    3f24:	4798      	blx	r3
	adc0_cfg.resolution = ADC_RESOLUTION_8BIT;
    3f26:	4b64      	ldr	r3, [pc, #400]	; (40b8 <main+0x480>)
    3f28:	22d4      	movs	r2, #212	; 0xd4
    3f2a:	0052      	lsls	r2, r2, #1
    3f2c:	4694      	mov	ip, r2
    3f2e:	44bc      	add	ip, r7
    3f30:	4463      	add	r3, ip
    3f32:	2230      	movs	r2, #48	; 0x30
    3f34:	70da      	strb	r2, [r3, #3]

	struct adc_module adc0_instance;
	adc_init(&adc0_instance, ADC, &adc0_cfg);
    3f36:	230c      	movs	r3, #12
    3f38:	18fa      	adds	r2, r7, r3
    3f3a:	4960      	ldr	r1, [pc, #384]	; (40bc <main+0x484>)
    3f3c:	1d3b      	adds	r3, r7, #4
    3f3e:	0018      	movs	r0, r3
    3f40:	4b5f      	ldr	r3, [pc, #380]	; (40c0 <main+0x488>)
    3f42:	4798      	blx	r3
	/************************************************************************/
	/* Enable all the peripherals with the configurations stated above      */
	/************************************************************************/
	adc_enable(&adc0_instance);
    3f44:	1d3b      	adds	r3, r7, #4
    3f46:	0018      	movs	r0, r3
    3f48:	4b5e      	ldr	r3, [pc, #376]	; (40c4 <main+0x48c>)
    3f4a:	4798      	blx	r3
	tcc0_instance.hw->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3f4c:	23e8      	movs	r3, #232	; 0xe8
    3f4e:	18fb      	adds	r3, r7, r3
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	22e8      	movs	r2, #232	; 0xe8
    3f54:	18ba      	adds	r2, r7, r2
    3f56:	6812      	ldr	r2, [r2, #0]
    3f58:	6812      	ldr	r2, [r2, #0]
    3f5a:	2102      	movs	r1, #2
    3f5c:	430a      	orrs	r2, r1
    3f5e:	601a      	str	r2, [r3, #0]
	tcc1_instance.hw->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3f60:	4b4e      	ldr	r3, [pc, #312]	; (409c <main+0x464>)
    3f62:	22d4      	movs	r2, #212	; 0xd4
    3f64:	0052      	lsls	r2, r2, #1
    3f66:	4694      	mov	ip, r2
    3f68:	44bc      	add	ip, r7
    3f6a:	4463      	add	r3, ip
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	4a4b      	ldr	r2, [pc, #300]	; (409c <main+0x464>)
    3f70:	21d4      	movs	r1, #212	; 0xd4
    3f72:	0049      	lsls	r1, r1, #1
    3f74:	468c      	mov	ip, r1
    3f76:	44bc      	add	ip, r7
    3f78:	4462      	add	r2, ip
    3f7a:	6812      	ldr	r2, [r2, #0]
    3f7c:	6812      	ldr	r2, [r2, #0]
    3f7e:	2102      	movs	r1, #2
    3f80:	430a      	orrs	r2, r1
    3f82:	601a      	str	r2, [r3, #0]


	uint8_t duty_cycle2;
	uint8_t duty_cycle;
	int8_t offset = 10; //66 Tested offset of a half a period
    3f84:	23d3      	movs	r3, #211	; 0xd3
    3f86:	005b      	lsls	r3, r3, #1
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	220a      	movs	r2, #10
    3f8c:	701a      	strb	r2, [r3, #0]
	float measured_voltage1;
	float measured_voltage2;
	bool offset_timer_zero = false;
    3f8e:	23a6      	movs	r3, #166	; 0xa6
    3f90:	33ff      	adds	r3, #255	; 0xff
    3f92:	18fb      	adds	r3, r7, r3
    3f94:	2200      	movs	r2, #0
    3f96:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		check_for_commands();
    3f98:	4b4b      	ldr	r3, [pc, #300]	; (40c8 <main+0x490>)
    3f9a:	4798      	blx	r3
		
		measured_voltage1 = measure_voltage(&adc0_instance, ADC_POSITIVE_INPUT_PIN1, 2.0);
    3f9c:	2280      	movs	r2, #128	; 0x80
    3f9e:	05d2      	lsls	r2, r2, #23
    3fa0:	1d3b      	adds	r3, r7, #4
    3fa2:	2101      	movs	r1, #1
    3fa4:	0018      	movs	r0, r3
    3fa6:	4b49      	ldr	r3, [pc, #292]	; (40cc <main+0x494>)
    3fa8:	4798      	blx	r3
    3faa:	1c03      	adds	r3, r0, #0
    3fac:	22d0      	movs	r2, #208	; 0xd0
    3fae:	0052      	lsls	r2, r2, #1
    3fb0:	18ba      	adds	r2, r7, r2
    3fb2:	6013      	str	r3, [r2, #0]
		measured_voltage2 = measure_voltage(&adc0_instance, ADC_POSITIVE_INPUT_PIN15, 2.0);
    3fb4:	2280      	movs	r2, #128	; 0x80
    3fb6:	05d2      	lsls	r2, r2, #23
    3fb8:	1d3b      	adds	r3, r7, #4
    3fba:	210f      	movs	r1, #15
    3fbc:	0018      	movs	r0, r3
    3fbe:	4b43      	ldr	r3, [pc, #268]	; (40cc <main+0x494>)
    3fc0:	4798      	blx	r3
    3fc2:	1c03      	adds	r3, r0, #0
    3fc4:	22ce      	movs	r2, #206	; 0xce
    3fc6:	0052      	lsls	r2, r2, #1
    3fc8:	18ba      	adds	r2, r7, r2
    3fca:	6013      	str	r3, [r2, #0]
		duty_cycle =( (measured_voltage1 / (measured_voltage1 + measured_voltage2)) * g_pwm_period)/2;
    3fcc:	4b40      	ldr	r3, [pc, #256]	; (40d0 <main+0x498>)
    3fce:	22ce      	movs	r2, #206	; 0xce
    3fd0:	0052      	lsls	r2, r2, #1
    3fd2:	18ba      	adds	r2, r7, r2
    3fd4:	6811      	ldr	r1, [r2, #0]
    3fd6:	22d0      	movs	r2, #208	; 0xd0
    3fd8:	0052      	lsls	r2, r2, #1
    3fda:	18ba      	adds	r2, r7, r2
    3fdc:	6810      	ldr	r0, [r2, #0]
    3fde:	4798      	blx	r3
    3fe0:	1c03      	adds	r3, r0, #0
    3fe2:	1c1a      	adds	r2, r3, #0
    3fe4:	4b3b      	ldr	r3, [pc, #236]	; (40d4 <main+0x49c>)
    3fe6:	1c11      	adds	r1, r2, #0
    3fe8:	22d0      	movs	r2, #208	; 0xd0
    3fea:	0052      	lsls	r2, r2, #1
    3fec:	18ba      	adds	r2, r7, r2
    3fee:	6810      	ldr	r0, [r2, #0]
    3ff0:	4798      	blx	r3
    3ff2:	1c03      	adds	r3, r0, #0
    3ff4:	1c1c      	adds	r4, r3, #0
    3ff6:	4b25      	ldr	r3, [pc, #148]	; (408c <main+0x454>)
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	001a      	movs	r2, r3
    3ffc:	4b36      	ldr	r3, [pc, #216]	; (40d8 <main+0x4a0>)
    3ffe:	0010      	movs	r0, r2
    4000:	4798      	blx	r3
    4002:	1c02      	adds	r2, r0, #0
    4004:	4b35      	ldr	r3, [pc, #212]	; (40dc <main+0x4a4>)
    4006:	1c11      	adds	r1, r2, #0
    4008:	1c20      	adds	r0, r4, #0
    400a:	4798      	blx	r3
    400c:	1c03      	adds	r3, r0, #0
    400e:	1c1a      	adds	r2, r3, #0
    4010:	4b30      	ldr	r3, [pc, #192]	; (40d4 <main+0x49c>)
    4012:	2180      	movs	r1, #128	; 0x80
    4014:	05c9      	lsls	r1, r1, #23
    4016:	1c10      	adds	r0, r2, #0
    4018:	4798      	blx	r3
    401a:	1c03      	adds	r3, r0, #0
    401c:	1c1a      	adds	r2, r3, #0
    401e:	23a8      	movs	r3, #168	; 0xa8
    4020:	33ff      	adds	r3, #255	; 0xff
    4022:	18fc      	adds	r4, r7, r3
    4024:	4b2e      	ldr	r3, [pc, #184]	; (40e0 <main+0x4a8>)
    4026:	1c10      	adds	r0, r2, #0
    4028:	4798      	blx	r3
    402a:	0003      	movs	r3, r0
    402c:	7023      	strb	r3, [r4, #0]
		
		if (!g_enable_output) {
    402e:	4b2d      	ldr	r3, [pc, #180]	; (40e4 <main+0x4ac>)
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	2201      	movs	r2, #1
    4034:	4053      	eors	r3, r2
    4036:	e057      	b.n	40e8 <main+0x4b0>
    4038:	40000c00 	.word	0x40000c00
    403c:	00003321 	.word	0x00003321
    4040:	00003345 	.word	0x00003345
    4044:	000036d5 	.word	0x000036d5
    4048:	000010b5 	.word	0x000010b5
    404c:	00003b19 	.word	0x00003b19
    4050:	20000140 	.word	0x20000140
    4054:	000038f1 	.word	0x000038f1
    4058:	20000110 	.word	0x20000110
    405c:	00003999 	.word	0x00003999
    4060:	20000100 	.word	0x20000100
    4064:	00003931 	.word	0x00003931
    4068:	20000130 	.word	0x20000130
    406c:	000039d9 	.word	0x000039d9
    4070:	00001041 	.word	0x00001041
    4074:	000038c5 	.word	0x000038c5
    4078:	00003631 	.word	0x00003631
    407c:	000035d5 	.word	0x000035d5
    4080:	00000e45 	.word	0x00000e45
    4084:	42001400 	.word	0x42001400
    4088:	00002845 	.word	0x00002845
    408c:	20000011 	.word	0x20000011
    4090:	00002ea5 	.word	0x00002ea5
    4094:	42001800 	.word	0x42001800
    4098:	fffffe9c 	.word	0xfffffe9c
    409c:	fffffe94 	.word	0xfffffe94
    40a0:	fffeffff 	.word	0xfffeffff
    40a4:	fffdffff 	.word	0xfffdffff
    40a8:	00003297 	.word	0x00003297
    40ac:	fffffe90 	.word	0xfffffe90
    40b0:	00002705 	.word	0x00002705
    40b4:	00000315 	.word	0x00000315
    40b8:	fffffe64 	.word	0xfffffe64
    40bc:	43000c00 	.word	0x43000c00
    40c0:	0000094d 	.word	0x0000094d
    40c4:	00003479 	.word	0x00003479
    40c8:	00003a41 	.word	0x00003a41
    40cc:	00003b91 	.word	0x00003b91
    40d0:	000042e5 	.word	0x000042e5
    40d4:	00004609 	.word	0x00004609
    40d8:	00004e51 	.word	0x00004e51
    40dc:	00004899 	.word	0x00004899
    40e0:	000042b5 	.word	0x000042b5
    40e4:	20000010 	.word	0x20000010
    40e8:	b2db      	uxtb	r3, r3
    40ea:	2b00      	cmp	r3, #0
    40ec:	d004      	beq.n	40f8 <main+0x4c0>
			duty_cycle = 0;
    40ee:	23a8      	movs	r3, #168	; 0xa8
    40f0:	33ff      	adds	r3, #255	; 0xff
    40f2:	18fb      	adds	r3, r7, r3
    40f4:	2200      	movs	r2, #0
    40f6:	701a      	strb	r2, [r3, #0]
		}

		TCC0->CC[0].reg = duty_cycle;
    40f8:	4b11      	ldr	r3, [pc, #68]	; (4140 <main+0x508>)
    40fa:	22a8      	movs	r2, #168	; 0xa8
    40fc:	32ff      	adds	r2, #255	; 0xff
    40fe:	18ba      	adds	r2, r7, r2
    4100:	7812      	ldrb	r2, [r2, #0]
    4102:	645a      	str	r2, [r3, #68]	; 0x44
		TCC0->CC[1].reg = duty_cycle;
    4104:	4b0e      	ldr	r3, [pc, #56]	; (4140 <main+0x508>)
    4106:	22a8      	movs	r2, #168	; 0xa8
    4108:	32ff      	adds	r2, #255	; 0xff
    410a:	18ba      	adds	r2, r7, r2
    410c:	7812      	ldrb	r2, [r2, #0]
    410e:	649a      	str	r2, [r3, #72]	; 0x48
		
		TCC1->CC[0].reg = duty_cycle;
    4110:	4b0c      	ldr	r3, [pc, #48]	; (4144 <main+0x50c>)
    4112:	22a8      	movs	r2, #168	; 0xa8
    4114:	32ff      	adds	r2, #255	; 0xff
    4116:	18ba      	adds	r2, r7, r2
    4118:	7812      	ldrb	r2, [r2, #0]
    411a:	645a      	str	r2, [r3, #68]	; 0x44
		TCC1->CC[1].reg = duty_cycle;
    411c:	4b09      	ldr	r3, [pc, #36]	; (4144 <main+0x50c>)
    411e:	22a8      	movs	r2, #168	; 0xa8
    4120:	32ff      	adds	r2, #255	; 0xff
    4122:	18ba      	adds	r2, r7, r2
    4124:	7812      	ldrb	r2, [r2, #0]
    4126:	649a      	str	r2, [r3, #72]	; 0x48
		
		TCC0->COUNT.reg = 0;
    4128:	4b05      	ldr	r3, [pc, #20]	; (4140 <main+0x508>)
    412a:	2200      	movs	r2, #0
    412c:	635a      	str	r2, [r3, #52]	; 0x34
		TCC1->COUNT.reg = offset;
    412e:	4b05      	ldr	r3, [pc, #20]	; (4144 <main+0x50c>)
    4130:	22d3      	movs	r2, #211	; 0xd3
    4132:	0052      	lsls	r2, r2, #1
    4134:	18ba      	adds	r2, r7, r2
    4136:	7812      	ldrb	r2, [r2, #0]
    4138:	b252      	sxtb	r2, r2
    413a:	635a      	str	r2, [r3, #52]	; 0x34
		check_for_commands();
    413c:	e72c      	b.n	3f98 <main+0x360>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	42001400 	.word	0x42001400
    4144:	42001800 	.word	0x42001800

00004148 <__udivsi3>:
    4148:	2200      	movs	r2, #0
    414a:	0843      	lsrs	r3, r0, #1
    414c:	428b      	cmp	r3, r1
    414e:	d374      	bcc.n	423a <__udivsi3+0xf2>
    4150:	0903      	lsrs	r3, r0, #4
    4152:	428b      	cmp	r3, r1
    4154:	d35f      	bcc.n	4216 <__udivsi3+0xce>
    4156:	0a03      	lsrs	r3, r0, #8
    4158:	428b      	cmp	r3, r1
    415a:	d344      	bcc.n	41e6 <__udivsi3+0x9e>
    415c:	0b03      	lsrs	r3, r0, #12
    415e:	428b      	cmp	r3, r1
    4160:	d328      	bcc.n	41b4 <__udivsi3+0x6c>
    4162:	0c03      	lsrs	r3, r0, #16
    4164:	428b      	cmp	r3, r1
    4166:	d30d      	bcc.n	4184 <__udivsi3+0x3c>
    4168:	22ff      	movs	r2, #255	; 0xff
    416a:	0209      	lsls	r1, r1, #8
    416c:	ba12      	rev	r2, r2
    416e:	0c03      	lsrs	r3, r0, #16
    4170:	428b      	cmp	r3, r1
    4172:	d302      	bcc.n	417a <__udivsi3+0x32>
    4174:	1212      	asrs	r2, r2, #8
    4176:	0209      	lsls	r1, r1, #8
    4178:	d065      	beq.n	4246 <__udivsi3+0xfe>
    417a:	0b03      	lsrs	r3, r0, #12
    417c:	428b      	cmp	r3, r1
    417e:	d319      	bcc.n	41b4 <__udivsi3+0x6c>
    4180:	e000      	b.n	4184 <__udivsi3+0x3c>
    4182:	0a09      	lsrs	r1, r1, #8
    4184:	0bc3      	lsrs	r3, r0, #15
    4186:	428b      	cmp	r3, r1
    4188:	d301      	bcc.n	418e <__udivsi3+0x46>
    418a:	03cb      	lsls	r3, r1, #15
    418c:	1ac0      	subs	r0, r0, r3
    418e:	4152      	adcs	r2, r2
    4190:	0b83      	lsrs	r3, r0, #14
    4192:	428b      	cmp	r3, r1
    4194:	d301      	bcc.n	419a <__udivsi3+0x52>
    4196:	038b      	lsls	r3, r1, #14
    4198:	1ac0      	subs	r0, r0, r3
    419a:	4152      	adcs	r2, r2
    419c:	0b43      	lsrs	r3, r0, #13
    419e:	428b      	cmp	r3, r1
    41a0:	d301      	bcc.n	41a6 <__udivsi3+0x5e>
    41a2:	034b      	lsls	r3, r1, #13
    41a4:	1ac0      	subs	r0, r0, r3
    41a6:	4152      	adcs	r2, r2
    41a8:	0b03      	lsrs	r3, r0, #12
    41aa:	428b      	cmp	r3, r1
    41ac:	d301      	bcc.n	41b2 <__udivsi3+0x6a>
    41ae:	030b      	lsls	r3, r1, #12
    41b0:	1ac0      	subs	r0, r0, r3
    41b2:	4152      	adcs	r2, r2
    41b4:	0ac3      	lsrs	r3, r0, #11
    41b6:	428b      	cmp	r3, r1
    41b8:	d301      	bcc.n	41be <__udivsi3+0x76>
    41ba:	02cb      	lsls	r3, r1, #11
    41bc:	1ac0      	subs	r0, r0, r3
    41be:	4152      	adcs	r2, r2
    41c0:	0a83      	lsrs	r3, r0, #10
    41c2:	428b      	cmp	r3, r1
    41c4:	d301      	bcc.n	41ca <__udivsi3+0x82>
    41c6:	028b      	lsls	r3, r1, #10
    41c8:	1ac0      	subs	r0, r0, r3
    41ca:	4152      	adcs	r2, r2
    41cc:	0a43      	lsrs	r3, r0, #9
    41ce:	428b      	cmp	r3, r1
    41d0:	d301      	bcc.n	41d6 <__udivsi3+0x8e>
    41d2:	024b      	lsls	r3, r1, #9
    41d4:	1ac0      	subs	r0, r0, r3
    41d6:	4152      	adcs	r2, r2
    41d8:	0a03      	lsrs	r3, r0, #8
    41da:	428b      	cmp	r3, r1
    41dc:	d301      	bcc.n	41e2 <__udivsi3+0x9a>
    41de:	020b      	lsls	r3, r1, #8
    41e0:	1ac0      	subs	r0, r0, r3
    41e2:	4152      	adcs	r2, r2
    41e4:	d2cd      	bcs.n	4182 <__udivsi3+0x3a>
    41e6:	09c3      	lsrs	r3, r0, #7
    41e8:	428b      	cmp	r3, r1
    41ea:	d301      	bcc.n	41f0 <__udivsi3+0xa8>
    41ec:	01cb      	lsls	r3, r1, #7
    41ee:	1ac0      	subs	r0, r0, r3
    41f0:	4152      	adcs	r2, r2
    41f2:	0983      	lsrs	r3, r0, #6
    41f4:	428b      	cmp	r3, r1
    41f6:	d301      	bcc.n	41fc <__udivsi3+0xb4>
    41f8:	018b      	lsls	r3, r1, #6
    41fa:	1ac0      	subs	r0, r0, r3
    41fc:	4152      	adcs	r2, r2
    41fe:	0943      	lsrs	r3, r0, #5
    4200:	428b      	cmp	r3, r1
    4202:	d301      	bcc.n	4208 <__udivsi3+0xc0>
    4204:	014b      	lsls	r3, r1, #5
    4206:	1ac0      	subs	r0, r0, r3
    4208:	4152      	adcs	r2, r2
    420a:	0903      	lsrs	r3, r0, #4
    420c:	428b      	cmp	r3, r1
    420e:	d301      	bcc.n	4214 <__udivsi3+0xcc>
    4210:	010b      	lsls	r3, r1, #4
    4212:	1ac0      	subs	r0, r0, r3
    4214:	4152      	adcs	r2, r2
    4216:	08c3      	lsrs	r3, r0, #3
    4218:	428b      	cmp	r3, r1
    421a:	d301      	bcc.n	4220 <__udivsi3+0xd8>
    421c:	00cb      	lsls	r3, r1, #3
    421e:	1ac0      	subs	r0, r0, r3
    4220:	4152      	adcs	r2, r2
    4222:	0883      	lsrs	r3, r0, #2
    4224:	428b      	cmp	r3, r1
    4226:	d301      	bcc.n	422c <__udivsi3+0xe4>
    4228:	008b      	lsls	r3, r1, #2
    422a:	1ac0      	subs	r0, r0, r3
    422c:	4152      	adcs	r2, r2
    422e:	0843      	lsrs	r3, r0, #1
    4230:	428b      	cmp	r3, r1
    4232:	d301      	bcc.n	4238 <__udivsi3+0xf0>
    4234:	004b      	lsls	r3, r1, #1
    4236:	1ac0      	subs	r0, r0, r3
    4238:	4152      	adcs	r2, r2
    423a:	1a41      	subs	r1, r0, r1
    423c:	d200      	bcs.n	4240 <__udivsi3+0xf8>
    423e:	4601      	mov	r1, r0
    4240:	4152      	adcs	r2, r2
    4242:	4610      	mov	r0, r2
    4244:	4770      	bx	lr
    4246:	e7ff      	b.n	4248 <__udivsi3+0x100>
    4248:	b501      	push	{r0, lr}
    424a:	2000      	movs	r0, #0
    424c:	f000 f806 	bl	425c <__aeabi_idiv0>
    4250:	bd02      	pop	{r1, pc}
    4252:	46c0      	nop			; (mov r8, r8)

00004254 <__aeabi_uidivmod>:
    4254:	2900      	cmp	r1, #0
    4256:	d0f7      	beq.n	4248 <__udivsi3+0x100>
    4258:	e776      	b.n	4148 <__udivsi3>
    425a:	4770      	bx	lr

0000425c <__aeabi_idiv0>:
    425c:	4770      	bx	lr
    425e:	46c0      	nop			; (mov r8, r8)

00004260 <__aeabi_lmul>:
    4260:	b5f0      	push	{r4, r5, r6, r7, lr}
    4262:	46ce      	mov	lr, r9
    4264:	4647      	mov	r7, r8
    4266:	0415      	lsls	r5, r2, #16
    4268:	0c2d      	lsrs	r5, r5, #16
    426a:	002e      	movs	r6, r5
    426c:	b580      	push	{r7, lr}
    426e:	0407      	lsls	r7, r0, #16
    4270:	0c14      	lsrs	r4, r2, #16
    4272:	0c3f      	lsrs	r7, r7, #16
    4274:	4699      	mov	r9, r3
    4276:	0c03      	lsrs	r3, r0, #16
    4278:	437e      	muls	r6, r7
    427a:	435d      	muls	r5, r3
    427c:	4367      	muls	r7, r4
    427e:	4363      	muls	r3, r4
    4280:	197f      	adds	r7, r7, r5
    4282:	0c34      	lsrs	r4, r6, #16
    4284:	19e4      	adds	r4, r4, r7
    4286:	469c      	mov	ip, r3
    4288:	42a5      	cmp	r5, r4
    428a:	d903      	bls.n	4294 <__aeabi_lmul+0x34>
    428c:	2380      	movs	r3, #128	; 0x80
    428e:	025b      	lsls	r3, r3, #9
    4290:	4698      	mov	r8, r3
    4292:	44c4      	add	ip, r8
    4294:	464b      	mov	r3, r9
    4296:	4351      	muls	r1, r2
    4298:	4343      	muls	r3, r0
    429a:	0436      	lsls	r6, r6, #16
    429c:	0c36      	lsrs	r6, r6, #16
    429e:	0c25      	lsrs	r5, r4, #16
    42a0:	0424      	lsls	r4, r4, #16
    42a2:	4465      	add	r5, ip
    42a4:	19a4      	adds	r4, r4, r6
    42a6:	1859      	adds	r1, r3, r1
    42a8:	1949      	adds	r1, r1, r5
    42aa:	0020      	movs	r0, r4
    42ac:	bc0c      	pop	{r2, r3}
    42ae:	4690      	mov	r8, r2
    42b0:	4699      	mov	r9, r3
    42b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000042b4 <__aeabi_f2uiz>:
    42b4:	219e      	movs	r1, #158	; 0x9e
    42b6:	b510      	push	{r4, lr}
    42b8:	05c9      	lsls	r1, r1, #23
    42ba:	1c04      	adds	r4, r0, #0
    42bc:	f001 fd1a 	bl	5cf4 <__aeabi_fcmpge>
    42c0:	2800      	cmp	r0, #0
    42c2:	d103      	bne.n	42cc <__aeabi_f2uiz+0x18>
    42c4:	1c20      	adds	r0, r4, #0
    42c6:	f000 fda3 	bl	4e10 <__aeabi_f2iz>
    42ca:	bd10      	pop	{r4, pc}
    42cc:	219e      	movs	r1, #158	; 0x9e
    42ce:	1c20      	adds	r0, r4, #0
    42d0:	05c9      	lsls	r1, r1, #23
    42d2:	f000 fc01 	bl	4ad8 <__aeabi_fsub>
    42d6:	f000 fd9b 	bl	4e10 <__aeabi_f2iz>
    42da:	2380      	movs	r3, #128	; 0x80
    42dc:	061b      	lsls	r3, r3, #24
    42de:	469c      	mov	ip, r3
    42e0:	4460      	add	r0, ip
    42e2:	e7f2      	b.n	42ca <__aeabi_f2uiz+0x16>

000042e4 <__aeabi_fadd>:
    42e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e6:	46c6      	mov	lr, r8
    42e8:	024e      	lsls	r6, r1, #9
    42ea:	0247      	lsls	r7, r0, #9
    42ec:	0a76      	lsrs	r6, r6, #9
    42ee:	0a7b      	lsrs	r3, r7, #9
    42f0:	0044      	lsls	r4, r0, #1
    42f2:	0fc5      	lsrs	r5, r0, #31
    42f4:	00f7      	lsls	r7, r6, #3
    42f6:	0048      	lsls	r0, r1, #1
    42f8:	4698      	mov	r8, r3
    42fa:	b500      	push	{lr}
    42fc:	0e24      	lsrs	r4, r4, #24
    42fe:	002a      	movs	r2, r5
    4300:	00db      	lsls	r3, r3, #3
    4302:	0e00      	lsrs	r0, r0, #24
    4304:	0fc9      	lsrs	r1, r1, #31
    4306:	46bc      	mov	ip, r7
    4308:	428d      	cmp	r5, r1
    430a:	d067      	beq.n	43dc <__aeabi_fadd+0xf8>
    430c:	1a22      	subs	r2, r4, r0
    430e:	2a00      	cmp	r2, #0
    4310:	dc00      	bgt.n	4314 <__aeabi_fadd+0x30>
    4312:	e0a5      	b.n	4460 <__aeabi_fadd+0x17c>
    4314:	2800      	cmp	r0, #0
    4316:	d13a      	bne.n	438e <__aeabi_fadd+0xaa>
    4318:	2f00      	cmp	r7, #0
    431a:	d100      	bne.n	431e <__aeabi_fadd+0x3a>
    431c:	e093      	b.n	4446 <__aeabi_fadd+0x162>
    431e:	1e51      	subs	r1, r2, #1
    4320:	2900      	cmp	r1, #0
    4322:	d000      	beq.n	4326 <__aeabi_fadd+0x42>
    4324:	e0bc      	b.n	44a0 <__aeabi_fadd+0x1bc>
    4326:	2401      	movs	r4, #1
    4328:	1bdb      	subs	r3, r3, r7
    432a:	015a      	lsls	r2, r3, #5
    432c:	d546      	bpl.n	43bc <__aeabi_fadd+0xd8>
    432e:	019b      	lsls	r3, r3, #6
    4330:	099e      	lsrs	r6, r3, #6
    4332:	0030      	movs	r0, r6
    4334:	f001 fce8 	bl	5d08 <__clzsi2>
    4338:	3805      	subs	r0, #5
    433a:	4086      	lsls	r6, r0
    433c:	4284      	cmp	r4, r0
    433e:	dd00      	ble.n	4342 <__aeabi_fadd+0x5e>
    4340:	e09d      	b.n	447e <__aeabi_fadd+0x19a>
    4342:	1b04      	subs	r4, r0, r4
    4344:	0032      	movs	r2, r6
    4346:	2020      	movs	r0, #32
    4348:	3401      	adds	r4, #1
    434a:	40e2      	lsrs	r2, r4
    434c:	1b04      	subs	r4, r0, r4
    434e:	40a6      	lsls	r6, r4
    4350:	0033      	movs	r3, r6
    4352:	1e5e      	subs	r6, r3, #1
    4354:	41b3      	sbcs	r3, r6
    4356:	2400      	movs	r4, #0
    4358:	4313      	orrs	r3, r2
    435a:	075a      	lsls	r2, r3, #29
    435c:	d004      	beq.n	4368 <__aeabi_fadd+0x84>
    435e:	220f      	movs	r2, #15
    4360:	401a      	ands	r2, r3
    4362:	2a04      	cmp	r2, #4
    4364:	d000      	beq.n	4368 <__aeabi_fadd+0x84>
    4366:	3304      	adds	r3, #4
    4368:	015a      	lsls	r2, r3, #5
    436a:	d529      	bpl.n	43c0 <__aeabi_fadd+0xdc>
    436c:	3401      	adds	r4, #1
    436e:	2cff      	cmp	r4, #255	; 0xff
    4370:	d100      	bne.n	4374 <__aeabi_fadd+0x90>
    4372:	e081      	b.n	4478 <__aeabi_fadd+0x194>
    4374:	002a      	movs	r2, r5
    4376:	019b      	lsls	r3, r3, #6
    4378:	0a5b      	lsrs	r3, r3, #9
    437a:	b2e4      	uxtb	r4, r4
    437c:	025b      	lsls	r3, r3, #9
    437e:	05e4      	lsls	r4, r4, #23
    4380:	0a58      	lsrs	r0, r3, #9
    4382:	07d2      	lsls	r2, r2, #31
    4384:	4320      	orrs	r0, r4
    4386:	4310      	orrs	r0, r2
    4388:	bc04      	pop	{r2}
    438a:	4690      	mov	r8, r2
    438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    438e:	2cff      	cmp	r4, #255	; 0xff
    4390:	d0e3      	beq.n	435a <__aeabi_fadd+0x76>
    4392:	2180      	movs	r1, #128	; 0x80
    4394:	0038      	movs	r0, r7
    4396:	04c9      	lsls	r1, r1, #19
    4398:	4308      	orrs	r0, r1
    439a:	4684      	mov	ip, r0
    439c:	2a1b      	cmp	r2, #27
    439e:	dd00      	ble.n	43a2 <__aeabi_fadd+0xbe>
    43a0:	e082      	b.n	44a8 <__aeabi_fadd+0x1c4>
    43a2:	2020      	movs	r0, #32
    43a4:	4661      	mov	r1, ip
    43a6:	40d1      	lsrs	r1, r2
    43a8:	1a82      	subs	r2, r0, r2
    43aa:	4660      	mov	r0, ip
    43ac:	4090      	lsls	r0, r2
    43ae:	0002      	movs	r2, r0
    43b0:	1e50      	subs	r0, r2, #1
    43b2:	4182      	sbcs	r2, r0
    43b4:	430a      	orrs	r2, r1
    43b6:	1a9b      	subs	r3, r3, r2
    43b8:	015a      	lsls	r2, r3, #5
    43ba:	d4b8      	bmi.n	432e <__aeabi_fadd+0x4a>
    43bc:	075a      	lsls	r2, r3, #29
    43be:	d1ce      	bne.n	435e <__aeabi_fadd+0x7a>
    43c0:	08de      	lsrs	r6, r3, #3
    43c2:	002a      	movs	r2, r5
    43c4:	2cff      	cmp	r4, #255	; 0xff
    43c6:	d13a      	bne.n	443e <__aeabi_fadd+0x15a>
    43c8:	2e00      	cmp	r6, #0
    43ca:	d100      	bne.n	43ce <__aeabi_fadd+0xea>
    43cc:	e0ae      	b.n	452c <__aeabi_fadd+0x248>
    43ce:	2380      	movs	r3, #128	; 0x80
    43d0:	03db      	lsls	r3, r3, #15
    43d2:	4333      	orrs	r3, r6
    43d4:	025b      	lsls	r3, r3, #9
    43d6:	0a5b      	lsrs	r3, r3, #9
    43d8:	24ff      	movs	r4, #255	; 0xff
    43da:	e7cf      	b.n	437c <__aeabi_fadd+0x98>
    43dc:	1a21      	subs	r1, r4, r0
    43de:	2900      	cmp	r1, #0
    43e0:	dd52      	ble.n	4488 <__aeabi_fadd+0x1a4>
    43e2:	2800      	cmp	r0, #0
    43e4:	d031      	beq.n	444a <__aeabi_fadd+0x166>
    43e6:	2cff      	cmp	r4, #255	; 0xff
    43e8:	d0b7      	beq.n	435a <__aeabi_fadd+0x76>
    43ea:	2080      	movs	r0, #128	; 0x80
    43ec:	003e      	movs	r6, r7
    43ee:	04c0      	lsls	r0, r0, #19
    43f0:	4306      	orrs	r6, r0
    43f2:	46b4      	mov	ip, r6
    43f4:	291b      	cmp	r1, #27
    43f6:	dd00      	ble.n	43fa <__aeabi_fadd+0x116>
    43f8:	e0aa      	b.n	4550 <__aeabi_fadd+0x26c>
    43fa:	2620      	movs	r6, #32
    43fc:	4660      	mov	r0, ip
    43fe:	40c8      	lsrs	r0, r1
    4400:	1a71      	subs	r1, r6, r1
    4402:	4666      	mov	r6, ip
    4404:	408e      	lsls	r6, r1
    4406:	0031      	movs	r1, r6
    4408:	1e4e      	subs	r6, r1, #1
    440a:	41b1      	sbcs	r1, r6
    440c:	4301      	orrs	r1, r0
    440e:	185b      	adds	r3, r3, r1
    4410:	0159      	lsls	r1, r3, #5
    4412:	d5d3      	bpl.n	43bc <__aeabi_fadd+0xd8>
    4414:	3401      	adds	r4, #1
    4416:	2cff      	cmp	r4, #255	; 0xff
    4418:	d100      	bne.n	441c <__aeabi_fadd+0x138>
    441a:	e087      	b.n	452c <__aeabi_fadd+0x248>
    441c:	2201      	movs	r2, #1
    441e:	4978      	ldr	r1, [pc, #480]	; (4600 <__aeabi_fadd+0x31c>)
    4420:	401a      	ands	r2, r3
    4422:	085b      	lsrs	r3, r3, #1
    4424:	400b      	ands	r3, r1
    4426:	4313      	orrs	r3, r2
    4428:	e797      	b.n	435a <__aeabi_fadd+0x76>
    442a:	2c00      	cmp	r4, #0
    442c:	d000      	beq.n	4430 <__aeabi_fadd+0x14c>
    442e:	e0a7      	b.n	4580 <__aeabi_fadd+0x29c>
    4430:	2b00      	cmp	r3, #0
    4432:	d000      	beq.n	4436 <__aeabi_fadd+0x152>
    4434:	e0b6      	b.n	45a4 <__aeabi_fadd+0x2c0>
    4436:	1e3b      	subs	r3, r7, #0
    4438:	d162      	bne.n	4500 <__aeabi_fadd+0x21c>
    443a:	2600      	movs	r6, #0
    443c:	2200      	movs	r2, #0
    443e:	0273      	lsls	r3, r6, #9
    4440:	0a5b      	lsrs	r3, r3, #9
    4442:	b2e4      	uxtb	r4, r4
    4444:	e79a      	b.n	437c <__aeabi_fadd+0x98>
    4446:	0014      	movs	r4, r2
    4448:	e787      	b.n	435a <__aeabi_fadd+0x76>
    444a:	2f00      	cmp	r7, #0
    444c:	d04d      	beq.n	44ea <__aeabi_fadd+0x206>
    444e:	1e48      	subs	r0, r1, #1
    4450:	2800      	cmp	r0, #0
    4452:	d157      	bne.n	4504 <__aeabi_fadd+0x220>
    4454:	4463      	add	r3, ip
    4456:	2401      	movs	r4, #1
    4458:	015a      	lsls	r2, r3, #5
    445a:	d5af      	bpl.n	43bc <__aeabi_fadd+0xd8>
    445c:	2402      	movs	r4, #2
    445e:	e7dd      	b.n	441c <__aeabi_fadd+0x138>
    4460:	2a00      	cmp	r2, #0
    4462:	d124      	bne.n	44ae <__aeabi_fadd+0x1ca>
    4464:	1c62      	adds	r2, r4, #1
    4466:	b2d2      	uxtb	r2, r2
    4468:	2a01      	cmp	r2, #1
    446a:	ddde      	ble.n	442a <__aeabi_fadd+0x146>
    446c:	1bde      	subs	r6, r3, r7
    446e:	0172      	lsls	r2, r6, #5
    4470:	d535      	bpl.n	44de <__aeabi_fadd+0x1fa>
    4472:	1afe      	subs	r6, r7, r3
    4474:	000d      	movs	r5, r1
    4476:	e75c      	b.n	4332 <__aeabi_fadd+0x4e>
    4478:	002a      	movs	r2, r5
    447a:	2300      	movs	r3, #0
    447c:	e77e      	b.n	437c <__aeabi_fadd+0x98>
    447e:	0033      	movs	r3, r6
    4480:	4a60      	ldr	r2, [pc, #384]	; (4604 <__aeabi_fadd+0x320>)
    4482:	1a24      	subs	r4, r4, r0
    4484:	4013      	ands	r3, r2
    4486:	e768      	b.n	435a <__aeabi_fadd+0x76>
    4488:	2900      	cmp	r1, #0
    448a:	d163      	bne.n	4554 <__aeabi_fadd+0x270>
    448c:	1c61      	adds	r1, r4, #1
    448e:	b2c8      	uxtb	r0, r1
    4490:	2801      	cmp	r0, #1
    4492:	dd4e      	ble.n	4532 <__aeabi_fadd+0x24e>
    4494:	29ff      	cmp	r1, #255	; 0xff
    4496:	d049      	beq.n	452c <__aeabi_fadd+0x248>
    4498:	4463      	add	r3, ip
    449a:	085b      	lsrs	r3, r3, #1
    449c:	000c      	movs	r4, r1
    449e:	e75c      	b.n	435a <__aeabi_fadd+0x76>
    44a0:	2aff      	cmp	r2, #255	; 0xff
    44a2:	d041      	beq.n	4528 <__aeabi_fadd+0x244>
    44a4:	000a      	movs	r2, r1
    44a6:	e779      	b.n	439c <__aeabi_fadd+0xb8>
    44a8:	2201      	movs	r2, #1
    44aa:	1a9b      	subs	r3, r3, r2
    44ac:	e784      	b.n	43b8 <__aeabi_fadd+0xd4>
    44ae:	2c00      	cmp	r4, #0
    44b0:	d01d      	beq.n	44ee <__aeabi_fadd+0x20a>
    44b2:	28ff      	cmp	r0, #255	; 0xff
    44b4:	d022      	beq.n	44fc <__aeabi_fadd+0x218>
    44b6:	2480      	movs	r4, #128	; 0x80
    44b8:	04e4      	lsls	r4, r4, #19
    44ba:	4252      	negs	r2, r2
    44bc:	4323      	orrs	r3, r4
    44be:	2a1b      	cmp	r2, #27
    44c0:	dd00      	ble.n	44c4 <__aeabi_fadd+0x1e0>
    44c2:	e08a      	b.n	45da <__aeabi_fadd+0x2f6>
    44c4:	001c      	movs	r4, r3
    44c6:	2520      	movs	r5, #32
    44c8:	40d4      	lsrs	r4, r2
    44ca:	1aaa      	subs	r2, r5, r2
    44cc:	4093      	lsls	r3, r2
    44ce:	1e5a      	subs	r2, r3, #1
    44d0:	4193      	sbcs	r3, r2
    44d2:	4323      	orrs	r3, r4
    44d4:	4662      	mov	r2, ip
    44d6:	0004      	movs	r4, r0
    44d8:	1ad3      	subs	r3, r2, r3
    44da:	000d      	movs	r5, r1
    44dc:	e725      	b.n	432a <__aeabi_fadd+0x46>
    44de:	2e00      	cmp	r6, #0
    44e0:	d000      	beq.n	44e4 <__aeabi_fadd+0x200>
    44e2:	e726      	b.n	4332 <__aeabi_fadd+0x4e>
    44e4:	2200      	movs	r2, #0
    44e6:	2400      	movs	r4, #0
    44e8:	e7a9      	b.n	443e <__aeabi_fadd+0x15a>
    44ea:	000c      	movs	r4, r1
    44ec:	e735      	b.n	435a <__aeabi_fadd+0x76>
    44ee:	2b00      	cmp	r3, #0
    44f0:	d04d      	beq.n	458e <__aeabi_fadd+0x2aa>
    44f2:	43d2      	mvns	r2, r2
    44f4:	2a00      	cmp	r2, #0
    44f6:	d0ed      	beq.n	44d4 <__aeabi_fadd+0x1f0>
    44f8:	28ff      	cmp	r0, #255	; 0xff
    44fa:	d1e0      	bne.n	44be <__aeabi_fadd+0x1da>
    44fc:	4663      	mov	r3, ip
    44fe:	24ff      	movs	r4, #255	; 0xff
    4500:	000d      	movs	r5, r1
    4502:	e72a      	b.n	435a <__aeabi_fadd+0x76>
    4504:	29ff      	cmp	r1, #255	; 0xff
    4506:	d00f      	beq.n	4528 <__aeabi_fadd+0x244>
    4508:	0001      	movs	r1, r0
    450a:	e773      	b.n	43f4 <__aeabi_fadd+0x110>
    450c:	2b00      	cmp	r3, #0
    450e:	d061      	beq.n	45d4 <__aeabi_fadd+0x2f0>
    4510:	24ff      	movs	r4, #255	; 0xff
    4512:	2f00      	cmp	r7, #0
    4514:	d100      	bne.n	4518 <__aeabi_fadd+0x234>
    4516:	e720      	b.n	435a <__aeabi_fadd+0x76>
    4518:	2280      	movs	r2, #128	; 0x80
    451a:	4641      	mov	r1, r8
    451c:	03d2      	lsls	r2, r2, #15
    451e:	4211      	tst	r1, r2
    4520:	d002      	beq.n	4528 <__aeabi_fadd+0x244>
    4522:	4216      	tst	r6, r2
    4524:	d100      	bne.n	4528 <__aeabi_fadd+0x244>
    4526:	003b      	movs	r3, r7
    4528:	24ff      	movs	r4, #255	; 0xff
    452a:	e716      	b.n	435a <__aeabi_fadd+0x76>
    452c:	24ff      	movs	r4, #255	; 0xff
    452e:	2300      	movs	r3, #0
    4530:	e724      	b.n	437c <__aeabi_fadd+0x98>
    4532:	2c00      	cmp	r4, #0
    4534:	d1ea      	bne.n	450c <__aeabi_fadd+0x228>
    4536:	2b00      	cmp	r3, #0
    4538:	d058      	beq.n	45ec <__aeabi_fadd+0x308>
    453a:	2f00      	cmp	r7, #0
    453c:	d100      	bne.n	4540 <__aeabi_fadd+0x25c>
    453e:	e70c      	b.n	435a <__aeabi_fadd+0x76>
    4540:	4463      	add	r3, ip
    4542:	015a      	lsls	r2, r3, #5
    4544:	d400      	bmi.n	4548 <__aeabi_fadd+0x264>
    4546:	e739      	b.n	43bc <__aeabi_fadd+0xd8>
    4548:	4a2e      	ldr	r2, [pc, #184]	; (4604 <__aeabi_fadd+0x320>)
    454a:	000c      	movs	r4, r1
    454c:	4013      	ands	r3, r2
    454e:	e704      	b.n	435a <__aeabi_fadd+0x76>
    4550:	2101      	movs	r1, #1
    4552:	e75c      	b.n	440e <__aeabi_fadd+0x12a>
    4554:	2c00      	cmp	r4, #0
    4556:	d11e      	bne.n	4596 <__aeabi_fadd+0x2b2>
    4558:	2b00      	cmp	r3, #0
    455a:	d040      	beq.n	45de <__aeabi_fadd+0x2fa>
    455c:	43c9      	mvns	r1, r1
    455e:	2900      	cmp	r1, #0
    4560:	d00b      	beq.n	457a <__aeabi_fadd+0x296>
    4562:	28ff      	cmp	r0, #255	; 0xff
    4564:	d036      	beq.n	45d4 <__aeabi_fadd+0x2f0>
    4566:	291b      	cmp	r1, #27
    4568:	dc47      	bgt.n	45fa <__aeabi_fadd+0x316>
    456a:	001c      	movs	r4, r3
    456c:	2620      	movs	r6, #32
    456e:	40cc      	lsrs	r4, r1
    4570:	1a71      	subs	r1, r6, r1
    4572:	408b      	lsls	r3, r1
    4574:	1e59      	subs	r1, r3, #1
    4576:	418b      	sbcs	r3, r1
    4578:	4323      	orrs	r3, r4
    457a:	4463      	add	r3, ip
    457c:	0004      	movs	r4, r0
    457e:	e747      	b.n	4410 <__aeabi_fadd+0x12c>
    4580:	2b00      	cmp	r3, #0
    4582:	d118      	bne.n	45b6 <__aeabi_fadd+0x2d2>
    4584:	1e3b      	subs	r3, r7, #0
    4586:	d02d      	beq.n	45e4 <__aeabi_fadd+0x300>
    4588:	000d      	movs	r5, r1
    458a:	24ff      	movs	r4, #255	; 0xff
    458c:	e6e5      	b.n	435a <__aeabi_fadd+0x76>
    458e:	003b      	movs	r3, r7
    4590:	0004      	movs	r4, r0
    4592:	000d      	movs	r5, r1
    4594:	e6e1      	b.n	435a <__aeabi_fadd+0x76>
    4596:	28ff      	cmp	r0, #255	; 0xff
    4598:	d01c      	beq.n	45d4 <__aeabi_fadd+0x2f0>
    459a:	2480      	movs	r4, #128	; 0x80
    459c:	04e4      	lsls	r4, r4, #19
    459e:	4249      	negs	r1, r1
    45a0:	4323      	orrs	r3, r4
    45a2:	e7e0      	b.n	4566 <__aeabi_fadd+0x282>
    45a4:	2f00      	cmp	r7, #0
    45a6:	d100      	bne.n	45aa <__aeabi_fadd+0x2c6>
    45a8:	e6d7      	b.n	435a <__aeabi_fadd+0x76>
    45aa:	1bde      	subs	r6, r3, r7
    45ac:	0172      	lsls	r2, r6, #5
    45ae:	d51f      	bpl.n	45f0 <__aeabi_fadd+0x30c>
    45b0:	1afb      	subs	r3, r7, r3
    45b2:	000d      	movs	r5, r1
    45b4:	e6d1      	b.n	435a <__aeabi_fadd+0x76>
    45b6:	24ff      	movs	r4, #255	; 0xff
    45b8:	2f00      	cmp	r7, #0
    45ba:	d100      	bne.n	45be <__aeabi_fadd+0x2da>
    45bc:	e6cd      	b.n	435a <__aeabi_fadd+0x76>
    45be:	2280      	movs	r2, #128	; 0x80
    45c0:	4640      	mov	r0, r8
    45c2:	03d2      	lsls	r2, r2, #15
    45c4:	4210      	tst	r0, r2
    45c6:	d0af      	beq.n	4528 <__aeabi_fadd+0x244>
    45c8:	4216      	tst	r6, r2
    45ca:	d1ad      	bne.n	4528 <__aeabi_fadd+0x244>
    45cc:	003b      	movs	r3, r7
    45ce:	000d      	movs	r5, r1
    45d0:	24ff      	movs	r4, #255	; 0xff
    45d2:	e6c2      	b.n	435a <__aeabi_fadd+0x76>
    45d4:	4663      	mov	r3, ip
    45d6:	24ff      	movs	r4, #255	; 0xff
    45d8:	e6bf      	b.n	435a <__aeabi_fadd+0x76>
    45da:	2301      	movs	r3, #1
    45dc:	e77a      	b.n	44d4 <__aeabi_fadd+0x1f0>
    45de:	003b      	movs	r3, r7
    45e0:	0004      	movs	r4, r0
    45e2:	e6ba      	b.n	435a <__aeabi_fadd+0x76>
    45e4:	2680      	movs	r6, #128	; 0x80
    45e6:	2200      	movs	r2, #0
    45e8:	03f6      	lsls	r6, r6, #15
    45ea:	e6f0      	b.n	43ce <__aeabi_fadd+0xea>
    45ec:	003b      	movs	r3, r7
    45ee:	e6b4      	b.n	435a <__aeabi_fadd+0x76>
    45f0:	1e33      	subs	r3, r6, #0
    45f2:	d000      	beq.n	45f6 <__aeabi_fadd+0x312>
    45f4:	e6e2      	b.n	43bc <__aeabi_fadd+0xd8>
    45f6:	2200      	movs	r2, #0
    45f8:	e721      	b.n	443e <__aeabi_fadd+0x15a>
    45fa:	2301      	movs	r3, #1
    45fc:	e7bd      	b.n	457a <__aeabi_fadd+0x296>
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	7dffffff 	.word	0x7dffffff
    4604:	fbffffff 	.word	0xfbffffff

00004608 <__aeabi_fdiv>:
    4608:	b5f0      	push	{r4, r5, r6, r7, lr}
    460a:	4657      	mov	r7, sl
    460c:	464e      	mov	r6, r9
    460e:	46de      	mov	lr, fp
    4610:	4645      	mov	r5, r8
    4612:	b5e0      	push	{r5, r6, r7, lr}
    4614:	0244      	lsls	r4, r0, #9
    4616:	0043      	lsls	r3, r0, #1
    4618:	0fc6      	lsrs	r6, r0, #31
    461a:	b083      	sub	sp, #12
    461c:	1c0f      	adds	r7, r1, #0
    461e:	0a64      	lsrs	r4, r4, #9
    4620:	0e1b      	lsrs	r3, r3, #24
    4622:	46b2      	mov	sl, r6
    4624:	d053      	beq.n	46ce <__aeabi_fdiv+0xc6>
    4626:	2bff      	cmp	r3, #255	; 0xff
    4628:	d027      	beq.n	467a <__aeabi_fdiv+0x72>
    462a:	2280      	movs	r2, #128	; 0x80
    462c:	00e4      	lsls	r4, r4, #3
    462e:	04d2      	lsls	r2, r2, #19
    4630:	4314      	orrs	r4, r2
    4632:	227f      	movs	r2, #127	; 0x7f
    4634:	4252      	negs	r2, r2
    4636:	4690      	mov	r8, r2
    4638:	4498      	add	r8, r3
    463a:	2300      	movs	r3, #0
    463c:	4699      	mov	r9, r3
    463e:	469b      	mov	fp, r3
    4640:	027d      	lsls	r5, r7, #9
    4642:	0078      	lsls	r0, r7, #1
    4644:	0ffb      	lsrs	r3, r7, #31
    4646:	0a6d      	lsrs	r5, r5, #9
    4648:	0e00      	lsrs	r0, r0, #24
    464a:	9300      	str	r3, [sp, #0]
    464c:	d024      	beq.n	4698 <__aeabi_fdiv+0x90>
    464e:	28ff      	cmp	r0, #255	; 0xff
    4650:	d046      	beq.n	46e0 <__aeabi_fdiv+0xd8>
    4652:	2380      	movs	r3, #128	; 0x80
    4654:	2100      	movs	r1, #0
    4656:	00ed      	lsls	r5, r5, #3
    4658:	04db      	lsls	r3, r3, #19
    465a:	431d      	orrs	r5, r3
    465c:	387f      	subs	r0, #127	; 0x7f
    465e:	4647      	mov	r7, r8
    4660:	1a38      	subs	r0, r7, r0
    4662:	464f      	mov	r7, r9
    4664:	430f      	orrs	r7, r1
    4666:	00bf      	lsls	r7, r7, #2
    4668:	46b9      	mov	r9, r7
    466a:	0033      	movs	r3, r6
    466c:	9a00      	ldr	r2, [sp, #0]
    466e:	4f87      	ldr	r7, [pc, #540]	; (488c <__aeabi_fdiv+0x284>)
    4670:	4053      	eors	r3, r2
    4672:	464a      	mov	r2, r9
    4674:	58ba      	ldr	r2, [r7, r2]
    4676:	9301      	str	r3, [sp, #4]
    4678:	4697      	mov	pc, r2
    467a:	2c00      	cmp	r4, #0
    467c:	d14e      	bne.n	471c <__aeabi_fdiv+0x114>
    467e:	2308      	movs	r3, #8
    4680:	4699      	mov	r9, r3
    4682:	33f7      	adds	r3, #247	; 0xf7
    4684:	4698      	mov	r8, r3
    4686:	3bfd      	subs	r3, #253	; 0xfd
    4688:	469b      	mov	fp, r3
    468a:	027d      	lsls	r5, r7, #9
    468c:	0078      	lsls	r0, r7, #1
    468e:	0ffb      	lsrs	r3, r7, #31
    4690:	0a6d      	lsrs	r5, r5, #9
    4692:	0e00      	lsrs	r0, r0, #24
    4694:	9300      	str	r3, [sp, #0]
    4696:	d1da      	bne.n	464e <__aeabi_fdiv+0x46>
    4698:	2d00      	cmp	r5, #0
    469a:	d126      	bne.n	46ea <__aeabi_fdiv+0xe2>
    469c:	2000      	movs	r0, #0
    469e:	2101      	movs	r1, #1
    46a0:	0033      	movs	r3, r6
    46a2:	9a00      	ldr	r2, [sp, #0]
    46a4:	4f7a      	ldr	r7, [pc, #488]	; (4890 <__aeabi_fdiv+0x288>)
    46a6:	4053      	eors	r3, r2
    46a8:	4642      	mov	r2, r8
    46aa:	1a10      	subs	r0, r2, r0
    46ac:	464a      	mov	r2, r9
    46ae:	430a      	orrs	r2, r1
    46b0:	0092      	lsls	r2, r2, #2
    46b2:	58ba      	ldr	r2, [r7, r2]
    46b4:	001d      	movs	r5, r3
    46b6:	4697      	mov	pc, r2
    46b8:	9b00      	ldr	r3, [sp, #0]
    46ba:	002c      	movs	r4, r5
    46bc:	469a      	mov	sl, r3
    46be:	468b      	mov	fp, r1
    46c0:	465b      	mov	r3, fp
    46c2:	2b02      	cmp	r3, #2
    46c4:	d131      	bne.n	472a <__aeabi_fdiv+0x122>
    46c6:	4653      	mov	r3, sl
    46c8:	21ff      	movs	r1, #255	; 0xff
    46ca:	2400      	movs	r4, #0
    46cc:	e038      	b.n	4740 <__aeabi_fdiv+0x138>
    46ce:	2c00      	cmp	r4, #0
    46d0:	d117      	bne.n	4702 <__aeabi_fdiv+0xfa>
    46d2:	2304      	movs	r3, #4
    46d4:	4699      	mov	r9, r3
    46d6:	2300      	movs	r3, #0
    46d8:	4698      	mov	r8, r3
    46da:	3301      	adds	r3, #1
    46dc:	469b      	mov	fp, r3
    46de:	e7af      	b.n	4640 <__aeabi_fdiv+0x38>
    46e0:	20ff      	movs	r0, #255	; 0xff
    46e2:	2d00      	cmp	r5, #0
    46e4:	d10b      	bne.n	46fe <__aeabi_fdiv+0xf6>
    46e6:	2102      	movs	r1, #2
    46e8:	e7da      	b.n	46a0 <__aeabi_fdiv+0x98>
    46ea:	0028      	movs	r0, r5
    46ec:	f001 fb0c 	bl	5d08 <__clzsi2>
    46f0:	1f43      	subs	r3, r0, #5
    46f2:	409d      	lsls	r5, r3
    46f4:	2376      	movs	r3, #118	; 0x76
    46f6:	425b      	negs	r3, r3
    46f8:	1a18      	subs	r0, r3, r0
    46fa:	2100      	movs	r1, #0
    46fc:	e7af      	b.n	465e <__aeabi_fdiv+0x56>
    46fe:	2103      	movs	r1, #3
    4700:	e7ad      	b.n	465e <__aeabi_fdiv+0x56>
    4702:	0020      	movs	r0, r4
    4704:	f001 fb00 	bl	5d08 <__clzsi2>
    4708:	1f43      	subs	r3, r0, #5
    470a:	409c      	lsls	r4, r3
    470c:	2376      	movs	r3, #118	; 0x76
    470e:	425b      	negs	r3, r3
    4710:	1a1b      	subs	r3, r3, r0
    4712:	4698      	mov	r8, r3
    4714:	2300      	movs	r3, #0
    4716:	4699      	mov	r9, r3
    4718:	469b      	mov	fp, r3
    471a:	e791      	b.n	4640 <__aeabi_fdiv+0x38>
    471c:	230c      	movs	r3, #12
    471e:	4699      	mov	r9, r3
    4720:	33f3      	adds	r3, #243	; 0xf3
    4722:	4698      	mov	r8, r3
    4724:	3bfc      	subs	r3, #252	; 0xfc
    4726:	469b      	mov	fp, r3
    4728:	e78a      	b.n	4640 <__aeabi_fdiv+0x38>
    472a:	2b03      	cmp	r3, #3
    472c:	d100      	bne.n	4730 <__aeabi_fdiv+0x128>
    472e:	e0a5      	b.n	487c <__aeabi_fdiv+0x274>
    4730:	4655      	mov	r5, sl
    4732:	2b01      	cmp	r3, #1
    4734:	d000      	beq.n	4738 <__aeabi_fdiv+0x130>
    4736:	e081      	b.n	483c <__aeabi_fdiv+0x234>
    4738:	2301      	movs	r3, #1
    473a:	2100      	movs	r1, #0
    473c:	2400      	movs	r4, #0
    473e:	402b      	ands	r3, r5
    4740:	0264      	lsls	r4, r4, #9
    4742:	05c9      	lsls	r1, r1, #23
    4744:	0a60      	lsrs	r0, r4, #9
    4746:	07db      	lsls	r3, r3, #31
    4748:	4308      	orrs	r0, r1
    474a:	4318      	orrs	r0, r3
    474c:	b003      	add	sp, #12
    474e:	bc3c      	pop	{r2, r3, r4, r5}
    4750:	4690      	mov	r8, r2
    4752:	4699      	mov	r9, r3
    4754:	46a2      	mov	sl, r4
    4756:	46ab      	mov	fp, r5
    4758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    475a:	2480      	movs	r4, #128	; 0x80
    475c:	2300      	movs	r3, #0
    475e:	03e4      	lsls	r4, r4, #15
    4760:	21ff      	movs	r1, #255	; 0xff
    4762:	e7ed      	b.n	4740 <__aeabi_fdiv+0x138>
    4764:	21ff      	movs	r1, #255	; 0xff
    4766:	2400      	movs	r4, #0
    4768:	e7ea      	b.n	4740 <__aeabi_fdiv+0x138>
    476a:	2301      	movs	r3, #1
    476c:	1a59      	subs	r1, r3, r1
    476e:	291b      	cmp	r1, #27
    4770:	dd66      	ble.n	4840 <__aeabi_fdiv+0x238>
    4772:	9a01      	ldr	r2, [sp, #4]
    4774:	4013      	ands	r3, r2
    4776:	2100      	movs	r1, #0
    4778:	2400      	movs	r4, #0
    477a:	e7e1      	b.n	4740 <__aeabi_fdiv+0x138>
    477c:	2380      	movs	r3, #128	; 0x80
    477e:	03db      	lsls	r3, r3, #15
    4780:	421c      	tst	r4, r3
    4782:	d038      	beq.n	47f6 <__aeabi_fdiv+0x1ee>
    4784:	421d      	tst	r5, r3
    4786:	d051      	beq.n	482c <__aeabi_fdiv+0x224>
    4788:	431c      	orrs	r4, r3
    478a:	0264      	lsls	r4, r4, #9
    478c:	0a64      	lsrs	r4, r4, #9
    478e:	0033      	movs	r3, r6
    4790:	21ff      	movs	r1, #255	; 0xff
    4792:	e7d5      	b.n	4740 <__aeabi_fdiv+0x138>
    4794:	0163      	lsls	r3, r4, #5
    4796:	016c      	lsls	r4, r5, #5
    4798:	42a3      	cmp	r3, r4
    479a:	d23b      	bcs.n	4814 <__aeabi_fdiv+0x20c>
    479c:	261b      	movs	r6, #27
    479e:	2100      	movs	r1, #0
    47a0:	3801      	subs	r0, #1
    47a2:	2501      	movs	r5, #1
    47a4:	001f      	movs	r7, r3
    47a6:	0049      	lsls	r1, r1, #1
    47a8:	005b      	lsls	r3, r3, #1
    47aa:	2f00      	cmp	r7, #0
    47ac:	db01      	blt.n	47b2 <__aeabi_fdiv+0x1aa>
    47ae:	429c      	cmp	r4, r3
    47b0:	d801      	bhi.n	47b6 <__aeabi_fdiv+0x1ae>
    47b2:	1b1b      	subs	r3, r3, r4
    47b4:	4329      	orrs	r1, r5
    47b6:	3e01      	subs	r6, #1
    47b8:	2e00      	cmp	r6, #0
    47ba:	d1f3      	bne.n	47a4 <__aeabi_fdiv+0x19c>
    47bc:	001c      	movs	r4, r3
    47be:	1e63      	subs	r3, r4, #1
    47c0:	419c      	sbcs	r4, r3
    47c2:	430c      	orrs	r4, r1
    47c4:	0001      	movs	r1, r0
    47c6:	317f      	adds	r1, #127	; 0x7f
    47c8:	2900      	cmp	r1, #0
    47ca:	ddce      	ble.n	476a <__aeabi_fdiv+0x162>
    47cc:	0763      	lsls	r3, r4, #29
    47ce:	d004      	beq.n	47da <__aeabi_fdiv+0x1d2>
    47d0:	230f      	movs	r3, #15
    47d2:	4023      	ands	r3, r4
    47d4:	2b04      	cmp	r3, #4
    47d6:	d000      	beq.n	47da <__aeabi_fdiv+0x1d2>
    47d8:	3404      	adds	r4, #4
    47da:	0123      	lsls	r3, r4, #4
    47dc:	d503      	bpl.n	47e6 <__aeabi_fdiv+0x1de>
    47de:	0001      	movs	r1, r0
    47e0:	4b2c      	ldr	r3, [pc, #176]	; (4894 <__aeabi_fdiv+0x28c>)
    47e2:	3180      	adds	r1, #128	; 0x80
    47e4:	401c      	ands	r4, r3
    47e6:	29fe      	cmp	r1, #254	; 0xfe
    47e8:	dd0d      	ble.n	4806 <__aeabi_fdiv+0x1fe>
    47ea:	2301      	movs	r3, #1
    47ec:	9a01      	ldr	r2, [sp, #4]
    47ee:	21ff      	movs	r1, #255	; 0xff
    47f0:	4013      	ands	r3, r2
    47f2:	2400      	movs	r4, #0
    47f4:	e7a4      	b.n	4740 <__aeabi_fdiv+0x138>
    47f6:	2380      	movs	r3, #128	; 0x80
    47f8:	03db      	lsls	r3, r3, #15
    47fa:	431c      	orrs	r4, r3
    47fc:	0264      	lsls	r4, r4, #9
    47fe:	0a64      	lsrs	r4, r4, #9
    4800:	0033      	movs	r3, r6
    4802:	21ff      	movs	r1, #255	; 0xff
    4804:	e79c      	b.n	4740 <__aeabi_fdiv+0x138>
    4806:	2301      	movs	r3, #1
    4808:	9a01      	ldr	r2, [sp, #4]
    480a:	01a4      	lsls	r4, r4, #6
    480c:	0a64      	lsrs	r4, r4, #9
    480e:	b2c9      	uxtb	r1, r1
    4810:	4013      	ands	r3, r2
    4812:	e795      	b.n	4740 <__aeabi_fdiv+0x138>
    4814:	1b1b      	subs	r3, r3, r4
    4816:	261a      	movs	r6, #26
    4818:	2101      	movs	r1, #1
    481a:	e7c2      	b.n	47a2 <__aeabi_fdiv+0x19a>
    481c:	9b00      	ldr	r3, [sp, #0]
    481e:	468b      	mov	fp, r1
    4820:	469a      	mov	sl, r3
    4822:	2400      	movs	r4, #0
    4824:	e74c      	b.n	46c0 <__aeabi_fdiv+0xb8>
    4826:	0263      	lsls	r3, r4, #9
    4828:	d5e5      	bpl.n	47f6 <__aeabi_fdiv+0x1ee>
    482a:	2500      	movs	r5, #0
    482c:	2480      	movs	r4, #128	; 0x80
    482e:	03e4      	lsls	r4, r4, #15
    4830:	432c      	orrs	r4, r5
    4832:	0264      	lsls	r4, r4, #9
    4834:	0a64      	lsrs	r4, r4, #9
    4836:	9b00      	ldr	r3, [sp, #0]
    4838:	21ff      	movs	r1, #255	; 0xff
    483a:	e781      	b.n	4740 <__aeabi_fdiv+0x138>
    483c:	9501      	str	r5, [sp, #4]
    483e:	e7c1      	b.n	47c4 <__aeabi_fdiv+0x1bc>
    4840:	0023      	movs	r3, r4
    4842:	2020      	movs	r0, #32
    4844:	40cb      	lsrs	r3, r1
    4846:	1a41      	subs	r1, r0, r1
    4848:	408c      	lsls	r4, r1
    484a:	1e61      	subs	r1, r4, #1
    484c:	418c      	sbcs	r4, r1
    484e:	431c      	orrs	r4, r3
    4850:	0763      	lsls	r3, r4, #29
    4852:	d004      	beq.n	485e <__aeabi_fdiv+0x256>
    4854:	230f      	movs	r3, #15
    4856:	4023      	ands	r3, r4
    4858:	2b04      	cmp	r3, #4
    485a:	d000      	beq.n	485e <__aeabi_fdiv+0x256>
    485c:	3404      	adds	r4, #4
    485e:	0163      	lsls	r3, r4, #5
    4860:	d505      	bpl.n	486e <__aeabi_fdiv+0x266>
    4862:	2301      	movs	r3, #1
    4864:	9a01      	ldr	r2, [sp, #4]
    4866:	2101      	movs	r1, #1
    4868:	4013      	ands	r3, r2
    486a:	2400      	movs	r4, #0
    486c:	e768      	b.n	4740 <__aeabi_fdiv+0x138>
    486e:	2301      	movs	r3, #1
    4870:	9a01      	ldr	r2, [sp, #4]
    4872:	01a4      	lsls	r4, r4, #6
    4874:	0a64      	lsrs	r4, r4, #9
    4876:	4013      	ands	r3, r2
    4878:	2100      	movs	r1, #0
    487a:	e761      	b.n	4740 <__aeabi_fdiv+0x138>
    487c:	2380      	movs	r3, #128	; 0x80
    487e:	03db      	lsls	r3, r3, #15
    4880:	431c      	orrs	r4, r3
    4882:	0264      	lsls	r4, r4, #9
    4884:	0a64      	lsrs	r4, r4, #9
    4886:	4653      	mov	r3, sl
    4888:	21ff      	movs	r1, #255	; 0xff
    488a:	e759      	b.n	4740 <__aeabi_fdiv+0x138>
    488c:	000060d4 	.word	0x000060d4
    4890:	00006114 	.word	0x00006114
    4894:	f7ffffff 	.word	0xf7ffffff

00004898 <__aeabi_fmul>:
    4898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    489a:	4657      	mov	r7, sl
    489c:	464e      	mov	r6, r9
    489e:	4645      	mov	r5, r8
    48a0:	46de      	mov	lr, fp
    48a2:	b5e0      	push	{r5, r6, r7, lr}
    48a4:	0247      	lsls	r7, r0, #9
    48a6:	0046      	lsls	r6, r0, #1
    48a8:	4688      	mov	r8, r1
    48aa:	0a7f      	lsrs	r7, r7, #9
    48ac:	0e36      	lsrs	r6, r6, #24
    48ae:	0fc4      	lsrs	r4, r0, #31
    48b0:	2e00      	cmp	r6, #0
    48b2:	d047      	beq.n	4944 <__aeabi_fmul+0xac>
    48b4:	2eff      	cmp	r6, #255	; 0xff
    48b6:	d024      	beq.n	4902 <__aeabi_fmul+0x6a>
    48b8:	00fb      	lsls	r3, r7, #3
    48ba:	2780      	movs	r7, #128	; 0x80
    48bc:	04ff      	lsls	r7, r7, #19
    48be:	431f      	orrs	r7, r3
    48c0:	2300      	movs	r3, #0
    48c2:	4699      	mov	r9, r3
    48c4:	469a      	mov	sl, r3
    48c6:	3e7f      	subs	r6, #127	; 0x7f
    48c8:	4643      	mov	r3, r8
    48ca:	025d      	lsls	r5, r3, #9
    48cc:	0058      	lsls	r0, r3, #1
    48ce:	0fdb      	lsrs	r3, r3, #31
    48d0:	0a6d      	lsrs	r5, r5, #9
    48d2:	0e00      	lsrs	r0, r0, #24
    48d4:	4698      	mov	r8, r3
    48d6:	d043      	beq.n	4960 <__aeabi_fmul+0xc8>
    48d8:	28ff      	cmp	r0, #255	; 0xff
    48da:	d03b      	beq.n	4954 <__aeabi_fmul+0xbc>
    48dc:	00eb      	lsls	r3, r5, #3
    48de:	2580      	movs	r5, #128	; 0x80
    48e0:	2200      	movs	r2, #0
    48e2:	04ed      	lsls	r5, r5, #19
    48e4:	431d      	orrs	r5, r3
    48e6:	387f      	subs	r0, #127	; 0x7f
    48e8:	1836      	adds	r6, r6, r0
    48ea:	1c73      	adds	r3, r6, #1
    48ec:	4641      	mov	r1, r8
    48ee:	469b      	mov	fp, r3
    48f0:	464b      	mov	r3, r9
    48f2:	4061      	eors	r1, r4
    48f4:	4313      	orrs	r3, r2
    48f6:	2b0f      	cmp	r3, #15
    48f8:	d864      	bhi.n	49c4 <__aeabi_fmul+0x12c>
    48fa:	4875      	ldr	r0, [pc, #468]	; (4ad0 <__aeabi_fmul+0x238>)
    48fc:	009b      	lsls	r3, r3, #2
    48fe:	58c3      	ldr	r3, [r0, r3]
    4900:	469f      	mov	pc, r3
    4902:	2f00      	cmp	r7, #0
    4904:	d142      	bne.n	498c <__aeabi_fmul+0xf4>
    4906:	2308      	movs	r3, #8
    4908:	4699      	mov	r9, r3
    490a:	3b06      	subs	r3, #6
    490c:	26ff      	movs	r6, #255	; 0xff
    490e:	469a      	mov	sl, r3
    4910:	e7da      	b.n	48c8 <__aeabi_fmul+0x30>
    4912:	4641      	mov	r1, r8
    4914:	2a02      	cmp	r2, #2
    4916:	d028      	beq.n	496a <__aeabi_fmul+0xd2>
    4918:	2a03      	cmp	r2, #3
    491a:	d100      	bne.n	491e <__aeabi_fmul+0x86>
    491c:	e0ce      	b.n	4abc <__aeabi_fmul+0x224>
    491e:	2a01      	cmp	r2, #1
    4920:	d000      	beq.n	4924 <__aeabi_fmul+0x8c>
    4922:	e0ac      	b.n	4a7e <__aeabi_fmul+0x1e6>
    4924:	4011      	ands	r1, r2
    4926:	2000      	movs	r0, #0
    4928:	2200      	movs	r2, #0
    492a:	b2cc      	uxtb	r4, r1
    492c:	0240      	lsls	r0, r0, #9
    492e:	05d2      	lsls	r2, r2, #23
    4930:	0a40      	lsrs	r0, r0, #9
    4932:	07e4      	lsls	r4, r4, #31
    4934:	4310      	orrs	r0, r2
    4936:	4320      	orrs	r0, r4
    4938:	bc3c      	pop	{r2, r3, r4, r5}
    493a:	4690      	mov	r8, r2
    493c:	4699      	mov	r9, r3
    493e:	46a2      	mov	sl, r4
    4940:	46ab      	mov	fp, r5
    4942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4944:	2f00      	cmp	r7, #0
    4946:	d115      	bne.n	4974 <__aeabi_fmul+0xdc>
    4948:	2304      	movs	r3, #4
    494a:	4699      	mov	r9, r3
    494c:	3b03      	subs	r3, #3
    494e:	2600      	movs	r6, #0
    4950:	469a      	mov	sl, r3
    4952:	e7b9      	b.n	48c8 <__aeabi_fmul+0x30>
    4954:	20ff      	movs	r0, #255	; 0xff
    4956:	2202      	movs	r2, #2
    4958:	2d00      	cmp	r5, #0
    495a:	d0c5      	beq.n	48e8 <__aeabi_fmul+0x50>
    495c:	2203      	movs	r2, #3
    495e:	e7c3      	b.n	48e8 <__aeabi_fmul+0x50>
    4960:	2d00      	cmp	r5, #0
    4962:	d119      	bne.n	4998 <__aeabi_fmul+0x100>
    4964:	2000      	movs	r0, #0
    4966:	2201      	movs	r2, #1
    4968:	e7be      	b.n	48e8 <__aeabi_fmul+0x50>
    496a:	2401      	movs	r4, #1
    496c:	22ff      	movs	r2, #255	; 0xff
    496e:	400c      	ands	r4, r1
    4970:	2000      	movs	r0, #0
    4972:	e7db      	b.n	492c <__aeabi_fmul+0x94>
    4974:	0038      	movs	r0, r7
    4976:	f001 f9c7 	bl	5d08 <__clzsi2>
    497a:	2676      	movs	r6, #118	; 0x76
    497c:	1f43      	subs	r3, r0, #5
    497e:	409f      	lsls	r7, r3
    4980:	2300      	movs	r3, #0
    4982:	4276      	negs	r6, r6
    4984:	1a36      	subs	r6, r6, r0
    4986:	4699      	mov	r9, r3
    4988:	469a      	mov	sl, r3
    498a:	e79d      	b.n	48c8 <__aeabi_fmul+0x30>
    498c:	230c      	movs	r3, #12
    498e:	4699      	mov	r9, r3
    4990:	3b09      	subs	r3, #9
    4992:	26ff      	movs	r6, #255	; 0xff
    4994:	469a      	mov	sl, r3
    4996:	e797      	b.n	48c8 <__aeabi_fmul+0x30>
    4998:	0028      	movs	r0, r5
    499a:	f001 f9b5 	bl	5d08 <__clzsi2>
    499e:	1f43      	subs	r3, r0, #5
    49a0:	409d      	lsls	r5, r3
    49a2:	2376      	movs	r3, #118	; 0x76
    49a4:	425b      	negs	r3, r3
    49a6:	1a18      	subs	r0, r3, r0
    49a8:	2200      	movs	r2, #0
    49aa:	e79d      	b.n	48e8 <__aeabi_fmul+0x50>
    49ac:	2080      	movs	r0, #128	; 0x80
    49ae:	2400      	movs	r4, #0
    49b0:	03c0      	lsls	r0, r0, #15
    49b2:	22ff      	movs	r2, #255	; 0xff
    49b4:	e7ba      	b.n	492c <__aeabi_fmul+0x94>
    49b6:	003d      	movs	r5, r7
    49b8:	4652      	mov	r2, sl
    49ba:	e7ab      	b.n	4914 <__aeabi_fmul+0x7c>
    49bc:	003d      	movs	r5, r7
    49be:	0021      	movs	r1, r4
    49c0:	4652      	mov	r2, sl
    49c2:	e7a7      	b.n	4914 <__aeabi_fmul+0x7c>
    49c4:	0c3b      	lsrs	r3, r7, #16
    49c6:	469c      	mov	ip, r3
    49c8:	042a      	lsls	r2, r5, #16
    49ca:	0c12      	lsrs	r2, r2, #16
    49cc:	0c2b      	lsrs	r3, r5, #16
    49ce:	0014      	movs	r4, r2
    49d0:	4660      	mov	r0, ip
    49d2:	4665      	mov	r5, ip
    49d4:	043f      	lsls	r7, r7, #16
    49d6:	0c3f      	lsrs	r7, r7, #16
    49d8:	437c      	muls	r4, r7
    49da:	4342      	muls	r2, r0
    49dc:	435d      	muls	r5, r3
    49de:	437b      	muls	r3, r7
    49e0:	0c27      	lsrs	r7, r4, #16
    49e2:	189b      	adds	r3, r3, r2
    49e4:	18ff      	adds	r7, r7, r3
    49e6:	42ba      	cmp	r2, r7
    49e8:	d903      	bls.n	49f2 <__aeabi_fmul+0x15a>
    49ea:	2380      	movs	r3, #128	; 0x80
    49ec:	025b      	lsls	r3, r3, #9
    49ee:	469c      	mov	ip, r3
    49f0:	4465      	add	r5, ip
    49f2:	0424      	lsls	r4, r4, #16
    49f4:	043a      	lsls	r2, r7, #16
    49f6:	0c24      	lsrs	r4, r4, #16
    49f8:	1912      	adds	r2, r2, r4
    49fa:	0193      	lsls	r3, r2, #6
    49fc:	1e5c      	subs	r4, r3, #1
    49fe:	41a3      	sbcs	r3, r4
    4a00:	0c3f      	lsrs	r7, r7, #16
    4a02:	0e92      	lsrs	r2, r2, #26
    4a04:	197d      	adds	r5, r7, r5
    4a06:	431a      	orrs	r2, r3
    4a08:	01ad      	lsls	r5, r5, #6
    4a0a:	4315      	orrs	r5, r2
    4a0c:	012b      	lsls	r3, r5, #4
    4a0e:	d504      	bpl.n	4a1a <__aeabi_fmul+0x182>
    4a10:	2301      	movs	r3, #1
    4a12:	465e      	mov	r6, fp
    4a14:	086a      	lsrs	r2, r5, #1
    4a16:	401d      	ands	r5, r3
    4a18:	4315      	orrs	r5, r2
    4a1a:	0032      	movs	r2, r6
    4a1c:	327f      	adds	r2, #127	; 0x7f
    4a1e:	2a00      	cmp	r2, #0
    4a20:	dd25      	ble.n	4a6e <__aeabi_fmul+0x1d6>
    4a22:	076b      	lsls	r3, r5, #29
    4a24:	d004      	beq.n	4a30 <__aeabi_fmul+0x198>
    4a26:	230f      	movs	r3, #15
    4a28:	402b      	ands	r3, r5
    4a2a:	2b04      	cmp	r3, #4
    4a2c:	d000      	beq.n	4a30 <__aeabi_fmul+0x198>
    4a2e:	3504      	adds	r5, #4
    4a30:	012b      	lsls	r3, r5, #4
    4a32:	d503      	bpl.n	4a3c <__aeabi_fmul+0x1a4>
    4a34:	0032      	movs	r2, r6
    4a36:	4b27      	ldr	r3, [pc, #156]	; (4ad4 <__aeabi_fmul+0x23c>)
    4a38:	3280      	adds	r2, #128	; 0x80
    4a3a:	401d      	ands	r5, r3
    4a3c:	2afe      	cmp	r2, #254	; 0xfe
    4a3e:	dc94      	bgt.n	496a <__aeabi_fmul+0xd2>
    4a40:	2401      	movs	r4, #1
    4a42:	01a8      	lsls	r0, r5, #6
    4a44:	0a40      	lsrs	r0, r0, #9
    4a46:	b2d2      	uxtb	r2, r2
    4a48:	400c      	ands	r4, r1
    4a4a:	e76f      	b.n	492c <__aeabi_fmul+0x94>
    4a4c:	2080      	movs	r0, #128	; 0x80
    4a4e:	03c0      	lsls	r0, r0, #15
    4a50:	4207      	tst	r7, r0
    4a52:	d007      	beq.n	4a64 <__aeabi_fmul+0x1cc>
    4a54:	4205      	tst	r5, r0
    4a56:	d105      	bne.n	4a64 <__aeabi_fmul+0x1cc>
    4a58:	4328      	orrs	r0, r5
    4a5a:	0240      	lsls	r0, r0, #9
    4a5c:	0a40      	lsrs	r0, r0, #9
    4a5e:	4644      	mov	r4, r8
    4a60:	22ff      	movs	r2, #255	; 0xff
    4a62:	e763      	b.n	492c <__aeabi_fmul+0x94>
    4a64:	4338      	orrs	r0, r7
    4a66:	0240      	lsls	r0, r0, #9
    4a68:	0a40      	lsrs	r0, r0, #9
    4a6a:	22ff      	movs	r2, #255	; 0xff
    4a6c:	e75e      	b.n	492c <__aeabi_fmul+0x94>
    4a6e:	2401      	movs	r4, #1
    4a70:	1aa3      	subs	r3, r4, r2
    4a72:	2b1b      	cmp	r3, #27
    4a74:	dd05      	ble.n	4a82 <__aeabi_fmul+0x1ea>
    4a76:	400c      	ands	r4, r1
    4a78:	2200      	movs	r2, #0
    4a7a:	2000      	movs	r0, #0
    4a7c:	e756      	b.n	492c <__aeabi_fmul+0x94>
    4a7e:	465e      	mov	r6, fp
    4a80:	e7cb      	b.n	4a1a <__aeabi_fmul+0x182>
    4a82:	002a      	movs	r2, r5
    4a84:	2020      	movs	r0, #32
    4a86:	40da      	lsrs	r2, r3
    4a88:	1ac3      	subs	r3, r0, r3
    4a8a:	409d      	lsls	r5, r3
    4a8c:	002b      	movs	r3, r5
    4a8e:	1e5d      	subs	r5, r3, #1
    4a90:	41ab      	sbcs	r3, r5
    4a92:	4313      	orrs	r3, r2
    4a94:	075a      	lsls	r2, r3, #29
    4a96:	d004      	beq.n	4aa2 <__aeabi_fmul+0x20a>
    4a98:	220f      	movs	r2, #15
    4a9a:	401a      	ands	r2, r3
    4a9c:	2a04      	cmp	r2, #4
    4a9e:	d000      	beq.n	4aa2 <__aeabi_fmul+0x20a>
    4aa0:	3304      	adds	r3, #4
    4aa2:	015a      	lsls	r2, r3, #5
    4aa4:	d504      	bpl.n	4ab0 <__aeabi_fmul+0x218>
    4aa6:	2401      	movs	r4, #1
    4aa8:	2201      	movs	r2, #1
    4aaa:	400c      	ands	r4, r1
    4aac:	2000      	movs	r0, #0
    4aae:	e73d      	b.n	492c <__aeabi_fmul+0x94>
    4ab0:	2401      	movs	r4, #1
    4ab2:	019b      	lsls	r3, r3, #6
    4ab4:	0a58      	lsrs	r0, r3, #9
    4ab6:	400c      	ands	r4, r1
    4ab8:	2200      	movs	r2, #0
    4aba:	e737      	b.n	492c <__aeabi_fmul+0x94>
    4abc:	2080      	movs	r0, #128	; 0x80
    4abe:	2401      	movs	r4, #1
    4ac0:	03c0      	lsls	r0, r0, #15
    4ac2:	4328      	orrs	r0, r5
    4ac4:	0240      	lsls	r0, r0, #9
    4ac6:	0a40      	lsrs	r0, r0, #9
    4ac8:	400c      	ands	r4, r1
    4aca:	22ff      	movs	r2, #255	; 0xff
    4acc:	e72e      	b.n	492c <__aeabi_fmul+0x94>
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	00006154 	.word	0x00006154
    4ad4:	f7ffffff 	.word	0xf7ffffff

00004ad8 <__aeabi_fsub>:
    4ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ada:	464f      	mov	r7, r9
    4adc:	46d6      	mov	lr, sl
    4ade:	4646      	mov	r6, r8
    4ae0:	0044      	lsls	r4, r0, #1
    4ae2:	b5c0      	push	{r6, r7, lr}
    4ae4:	0fc2      	lsrs	r2, r0, #31
    4ae6:	0247      	lsls	r7, r0, #9
    4ae8:	0248      	lsls	r0, r1, #9
    4aea:	0a40      	lsrs	r0, r0, #9
    4aec:	4684      	mov	ip, r0
    4aee:	4666      	mov	r6, ip
    4af0:	0a7b      	lsrs	r3, r7, #9
    4af2:	0048      	lsls	r0, r1, #1
    4af4:	0fc9      	lsrs	r1, r1, #31
    4af6:	469a      	mov	sl, r3
    4af8:	0e24      	lsrs	r4, r4, #24
    4afa:	0015      	movs	r5, r2
    4afc:	00db      	lsls	r3, r3, #3
    4afe:	0e00      	lsrs	r0, r0, #24
    4b00:	4689      	mov	r9, r1
    4b02:	00f6      	lsls	r6, r6, #3
    4b04:	28ff      	cmp	r0, #255	; 0xff
    4b06:	d100      	bne.n	4b0a <__aeabi_fsub+0x32>
    4b08:	e08f      	b.n	4c2a <__aeabi_fsub+0x152>
    4b0a:	2101      	movs	r1, #1
    4b0c:	464f      	mov	r7, r9
    4b0e:	404f      	eors	r7, r1
    4b10:	0039      	movs	r1, r7
    4b12:	4291      	cmp	r1, r2
    4b14:	d066      	beq.n	4be4 <__aeabi_fsub+0x10c>
    4b16:	1a22      	subs	r2, r4, r0
    4b18:	2a00      	cmp	r2, #0
    4b1a:	dc00      	bgt.n	4b1e <__aeabi_fsub+0x46>
    4b1c:	e09d      	b.n	4c5a <__aeabi_fsub+0x182>
    4b1e:	2800      	cmp	r0, #0
    4b20:	d13d      	bne.n	4b9e <__aeabi_fsub+0xc6>
    4b22:	2e00      	cmp	r6, #0
    4b24:	d100      	bne.n	4b28 <__aeabi_fsub+0x50>
    4b26:	e08b      	b.n	4c40 <__aeabi_fsub+0x168>
    4b28:	1e51      	subs	r1, r2, #1
    4b2a:	2900      	cmp	r1, #0
    4b2c:	d000      	beq.n	4b30 <__aeabi_fsub+0x58>
    4b2e:	e0b5      	b.n	4c9c <__aeabi_fsub+0x1c4>
    4b30:	2401      	movs	r4, #1
    4b32:	1b9b      	subs	r3, r3, r6
    4b34:	015a      	lsls	r2, r3, #5
    4b36:	d544      	bpl.n	4bc2 <__aeabi_fsub+0xea>
    4b38:	019b      	lsls	r3, r3, #6
    4b3a:	099f      	lsrs	r7, r3, #6
    4b3c:	0038      	movs	r0, r7
    4b3e:	f001 f8e3 	bl	5d08 <__clzsi2>
    4b42:	3805      	subs	r0, #5
    4b44:	4087      	lsls	r7, r0
    4b46:	4284      	cmp	r4, r0
    4b48:	dd00      	ble.n	4b4c <__aeabi_fsub+0x74>
    4b4a:	e096      	b.n	4c7a <__aeabi_fsub+0x1a2>
    4b4c:	1b04      	subs	r4, r0, r4
    4b4e:	003a      	movs	r2, r7
    4b50:	2020      	movs	r0, #32
    4b52:	3401      	adds	r4, #1
    4b54:	40e2      	lsrs	r2, r4
    4b56:	1b04      	subs	r4, r0, r4
    4b58:	40a7      	lsls	r7, r4
    4b5a:	003b      	movs	r3, r7
    4b5c:	1e5f      	subs	r7, r3, #1
    4b5e:	41bb      	sbcs	r3, r7
    4b60:	2400      	movs	r4, #0
    4b62:	4313      	orrs	r3, r2
    4b64:	075a      	lsls	r2, r3, #29
    4b66:	d004      	beq.n	4b72 <__aeabi_fsub+0x9a>
    4b68:	220f      	movs	r2, #15
    4b6a:	401a      	ands	r2, r3
    4b6c:	2a04      	cmp	r2, #4
    4b6e:	d000      	beq.n	4b72 <__aeabi_fsub+0x9a>
    4b70:	3304      	adds	r3, #4
    4b72:	015a      	lsls	r2, r3, #5
    4b74:	d527      	bpl.n	4bc6 <__aeabi_fsub+0xee>
    4b76:	3401      	adds	r4, #1
    4b78:	2cff      	cmp	r4, #255	; 0xff
    4b7a:	d100      	bne.n	4b7e <__aeabi_fsub+0xa6>
    4b7c:	e079      	b.n	4c72 <__aeabi_fsub+0x19a>
    4b7e:	2201      	movs	r2, #1
    4b80:	019b      	lsls	r3, r3, #6
    4b82:	0a5b      	lsrs	r3, r3, #9
    4b84:	b2e4      	uxtb	r4, r4
    4b86:	402a      	ands	r2, r5
    4b88:	025b      	lsls	r3, r3, #9
    4b8a:	05e4      	lsls	r4, r4, #23
    4b8c:	0a58      	lsrs	r0, r3, #9
    4b8e:	07d2      	lsls	r2, r2, #31
    4b90:	4320      	orrs	r0, r4
    4b92:	4310      	orrs	r0, r2
    4b94:	bc1c      	pop	{r2, r3, r4}
    4b96:	4690      	mov	r8, r2
    4b98:	4699      	mov	r9, r3
    4b9a:	46a2      	mov	sl, r4
    4b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b9e:	2cff      	cmp	r4, #255	; 0xff
    4ba0:	d0e0      	beq.n	4b64 <__aeabi_fsub+0x8c>
    4ba2:	2180      	movs	r1, #128	; 0x80
    4ba4:	04c9      	lsls	r1, r1, #19
    4ba6:	430e      	orrs	r6, r1
    4ba8:	2a1b      	cmp	r2, #27
    4baa:	dc7b      	bgt.n	4ca4 <__aeabi_fsub+0x1cc>
    4bac:	0031      	movs	r1, r6
    4bae:	2020      	movs	r0, #32
    4bb0:	40d1      	lsrs	r1, r2
    4bb2:	1a82      	subs	r2, r0, r2
    4bb4:	4096      	lsls	r6, r2
    4bb6:	1e72      	subs	r2, r6, #1
    4bb8:	4196      	sbcs	r6, r2
    4bba:	430e      	orrs	r6, r1
    4bbc:	1b9b      	subs	r3, r3, r6
    4bbe:	015a      	lsls	r2, r3, #5
    4bc0:	d4ba      	bmi.n	4b38 <__aeabi_fsub+0x60>
    4bc2:	075a      	lsls	r2, r3, #29
    4bc4:	d1d0      	bne.n	4b68 <__aeabi_fsub+0x90>
    4bc6:	2201      	movs	r2, #1
    4bc8:	08df      	lsrs	r7, r3, #3
    4bca:	402a      	ands	r2, r5
    4bcc:	2cff      	cmp	r4, #255	; 0xff
    4bce:	d133      	bne.n	4c38 <__aeabi_fsub+0x160>
    4bd0:	2f00      	cmp	r7, #0
    4bd2:	d100      	bne.n	4bd6 <__aeabi_fsub+0xfe>
    4bd4:	e0a8      	b.n	4d28 <__aeabi_fsub+0x250>
    4bd6:	2380      	movs	r3, #128	; 0x80
    4bd8:	03db      	lsls	r3, r3, #15
    4bda:	433b      	orrs	r3, r7
    4bdc:	025b      	lsls	r3, r3, #9
    4bde:	0a5b      	lsrs	r3, r3, #9
    4be0:	24ff      	movs	r4, #255	; 0xff
    4be2:	e7d1      	b.n	4b88 <__aeabi_fsub+0xb0>
    4be4:	1a21      	subs	r1, r4, r0
    4be6:	2900      	cmp	r1, #0
    4be8:	dd4c      	ble.n	4c84 <__aeabi_fsub+0x1ac>
    4bea:	2800      	cmp	r0, #0
    4bec:	d02a      	beq.n	4c44 <__aeabi_fsub+0x16c>
    4bee:	2cff      	cmp	r4, #255	; 0xff
    4bf0:	d0b8      	beq.n	4b64 <__aeabi_fsub+0x8c>
    4bf2:	2080      	movs	r0, #128	; 0x80
    4bf4:	04c0      	lsls	r0, r0, #19
    4bf6:	4306      	orrs	r6, r0
    4bf8:	291b      	cmp	r1, #27
    4bfa:	dd00      	ble.n	4bfe <__aeabi_fsub+0x126>
    4bfc:	e0af      	b.n	4d5e <__aeabi_fsub+0x286>
    4bfe:	0030      	movs	r0, r6
    4c00:	2720      	movs	r7, #32
    4c02:	40c8      	lsrs	r0, r1
    4c04:	1a79      	subs	r1, r7, r1
    4c06:	408e      	lsls	r6, r1
    4c08:	1e71      	subs	r1, r6, #1
    4c0a:	418e      	sbcs	r6, r1
    4c0c:	4306      	orrs	r6, r0
    4c0e:	199b      	adds	r3, r3, r6
    4c10:	0159      	lsls	r1, r3, #5
    4c12:	d5d6      	bpl.n	4bc2 <__aeabi_fsub+0xea>
    4c14:	3401      	adds	r4, #1
    4c16:	2cff      	cmp	r4, #255	; 0xff
    4c18:	d100      	bne.n	4c1c <__aeabi_fsub+0x144>
    4c1a:	e085      	b.n	4d28 <__aeabi_fsub+0x250>
    4c1c:	2201      	movs	r2, #1
    4c1e:	497a      	ldr	r1, [pc, #488]	; (4e08 <__aeabi_fsub+0x330>)
    4c20:	401a      	ands	r2, r3
    4c22:	085b      	lsrs	r3, r3, #1
    4c24:	400b      	ands	r3, r1
    4c26:	4313      	orrs	r3, r2
    4c28:	e79c      	b.n	4b64 <__aeabi_fsub+0x8c>
    4c2a:	2e00      	cmp	r6, #0
    4c2c:	d000      	beq.n	4c30 <__aeabi_fsub+0x158>
    4c2e:	e770      	b.n	4b12 <__aeabi_fsub+0x3a>
    4c30:	e76b      	b.n	4b0a <__aeabi_fsub+0x32>
    4c32:	1e3b      	subs	r3, r7, #0
    4c34:	d1c5      	bne.n	4bc2 <__aeabi_fsub+0xea>
    4c36:	2200      	movs	r2, #0
    4c38:	027b      	lsls	r3, r7, #9
    4c3a:	0a5b      	lsrs	r3, r3, #9
    4c3c:	b2e4      	uxtb	r4, r4
    4c3e:	e7a3      	b.n	4b88 <__aeabi_fsub+0xb0>
    4c40:	0014      	movs	r4, r2
    4c42:	e78f      	b.n	4b64 <__aeabi_fsub+0x8c>
    4c44:	2e00      	cmp	r6, #0
    4c46:	d04d      	beq.n	4ce4 <__aeabi_fsub+0x20c>
    4c48:	1e48      	subs	r0, r1, #1
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d157      	bne.n	4cfe <__aeabi_fsub+0x226>
    4c4e:	199b      	adds	r3, r3, r6
    4c50:	2401      	movs	r4, #1
    4c52:	015a      	lsls	r2, r3, #5
    4c54:	d5b5      	bpl.n	4bc2 <__aeabi_fsub+0xea>
    4c56:	2402      	movs	r4, #2
    4c58:	e7e0      	b.n	4c1c <__aeabi_fsub+0x144>
    4c5a:	2a00      	cmp	r2, #0
    4c5c:	d125      	bne.n	4caa <__aeabi_fsub+0x1d2>
    4c5e:	1c62      	adds	r2, r4, #1
    4c60:	b2d2      	uxtb	r2, r2
    4c62:	2a01      	cmp	r2, #1
    4c64:	dd72      	ble.n	4d4c <__aeabi_fsub+0x274>
    4c66:	1b9f      	subs	r7, r3, r6
    4c68:	017a      	lsls	r2, r7, #5
    4c6a:	d535      	bpl.n	4cd8 <__aeabi_fsub+0x200>
    4c6c:	1af7      	subs	r7, r6, r3
    4c6e:	000d      	movs	r5, r1
    4c70:	e764      	b.n	4b3c <__aeabi_fsub+0x64>
    4c72:	2201      	movs	r2, #1
    4c74:	2300      	movs	r3, #0
    4c76:	402a      	ands	r2, r5
    4c78:	e786      	b.n	4b88 <__aeabi_fsub+0xb0>
    4c7a:	003b      	movs	r3, r7
    4c7c:	4a63      	ldr	r2, [pc, #396]	; (4e0c <__aeabi_fsub+0x334>)
    4c7e:	1a24      	subs	r4, r4, r0
    4c80:	4013      	ands	r3, r2
    4c82:	e76f      	b.n	4b64 <__aeabi_fsub+0x8c>
    4c84:	2900      	cmp	r1, #0
    4c86:	d16c      	bne.n	4d62 <__aeabi_fsub+0x28a>
    4c88:	1c61      	adds	r1, r4, #1
    4c8a:	b2c8      	uxtb	r0, r1
    4c8c:	2801      	cmp	r0, #1
    4c8e:	dd4e      	ble.n	4d2e <__aeabi_fsub+0x256>
    4c90:	29ff      	cmp	r1, #255	; 0xff
    4c92:	d049      	beq.n	4d28 <__aeabi_fsub+0x250>
    4c94:	199b      	adds	r3, r3, r6
    4c96:	085b      	lsrs	r3, r3, #1
    4c98:	000c      	movs	r4, r1
    4c9a:	e763      	b.n	4b64 <__aeabi_fsub+0x8c>
    4c9c:	2aff      	cmp	r2, #255	; 0xff
    4c9e:	d041      	beq.n	4d24 <__aeabi_fsub+0x24c>
    4ca0:	000a      	movs	r2, r1
    4ca2:	e781      	b.n	4ba8 <__aeabi_fsub+0xd0>
    4ca4:	2601      	movs	r6, #1
    4ca6:	1b9b      	subs	r3, r3, r6
    4ca8:	e789      	b.n	4bbe <__aeabi_fsub+0xe6>
    4caa:	2c00      	cmp	r4, #0
    4cac:	d01c      	beq.n	4ce8 <__aeabi_fsub+0x210>
    4cae:	28ff      	cmp	r0, #255	; 0xff
    4cb0:	d021      	beq.n	4cf6 <__aeabi_fsub+0x21e>
    4cb2:	2480      	movs	r4, #128	; 0x80
    4cb4:	04e4      	lsls	r4, r4, #19
    4cb6:	4252      	negs	r2, r2
    4cb8:	4323      	orrs	r3, r4
    4cba:	2a1b      	cmp	r2, #27
    4cbc:	dd00      	ble.n	4cc0 <__aeabi_fsub+0x1e8>
    4cbe:	e096      	b.n	4dee <__aeabi_fsub+0x316>
    4cc0:	001c      	movs	r4, r3
    4cc2:	2520      	movs	r5, #32
    4cc4:	40d4      	lsrs	r4, r2
    4cc6:	1aaa      	subs	r2, r5, r2
    4cc8:	4093      	lsls	r3, r2
    4cca:	1e5a      	subs	r2, r3, #1
    4ccc:	4193      	sbcs	r3, r2
    4cce:	4323      	orrs	r3, r4
    4cd0:	1af3      	subs	r3, r6, r3
    4cd2:	0004      	movs	r4, r0
    4cd4:	000d      	movs	r5, r1
    4cd6:	e72d      	b.n	4b34 <__aeabi_fsub+0x5c>
    4cd8:	2f00      	cmp	r7, #0
    4cda:	d000      	beq.n	4cde <__aeabi_fsub+0x206>
    4cdc:	e72e      	b.n	4b3c <__aeabi_fsub+0x64>
    4cde:	2200      	movs	r2, #0
    4ce0:	2400      	movs	r4, #0
    4ce2:	e7a9      	b.n	4c38 <__aeabi_fsub+0x160>
    4ce4:	000c      	movs	r4, r1
    4ce6:	e73d      	b.n	4b64 <__aeabi_fsub+0x8c>
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d058      	beq.n	4d9e <__aeabi_fsub+0x2c6>
    4cec:	43d2      	mvns	r2, r2
    4cee:	2a00      	cmp	r2, #0
    4cf0:	d0ee      	beq.n	4cd0 <__aeabi_fsub+0x1f8>
    4cf2:	28ff      	cmp	r0, #255	; 0xff
    4cf4:	d1e1      	bne.n	4cba <__aeabi_fsub+0x1e2>
    4cf6:	0033      	movs	r3, r6
    4cf8:	24ff      	movs	r4, #255	; 0xff
    4cfa:	000d      	movs	r5, r1
    4cfc:	e732      	b.n	4b64 <__aeabi_fsub+0x8c>
    4cfe:	29ff      	cmp	r1, #255	; 0xff
    4d00:	d010      	beq.n	4d24 <__aeabi_fsub+0x24c>
    4d02:	0001      	movs	r1, r0
    4d04:	e778      	b.n	4bf8 <__aeabi_fsub+0x120>
    4d06:	2b00      	cmp	r3, #0
    4d08:	d06e      	beq.n	4de8 <__aeabi_fsub+0x310>
    4d0a:	24ff      	movs	r4, #255	; 0xff
    4d0c:	2e00      	cmp	r6, #0
    4d0e:	d100      	bne.n	4d12 <__aeabi_fsub+0x23a>
    4d10:	e728      	b.n	4b64 <__aeabi_fsub+0x8c>
    4d12:	2280      	movs	r2, #128	; 0x80
    4d14:	4651      	mov	r1, sl
    4d16:	03d2      	lsls	r2, r2, #15
    4d18:	4211      	tst	r1, r2
    4d1a:	d003      	beq.n	4d24 <__aeabi_fsub+0x24c>
    4d1c:	4661      	mov	r1, ip
    4d1e:	4211      	tst	r1, r2
    4d20:	d100      	bne.n	4d24 <__aeabi_fsub+0x24c>
    4d22:	0033      	movs	r3, r6
    4d24:	24ff      	movs	r4, #255	; 0xff
    4d26:	e71d      	b.n	4b64 <__aeabi_fsub+0x8c>
    4d28:	24ff      	movs	r4, #255	; 0xff
    4d2a:	2300      	movs	r3, #0
    4d2c:	e72c      	b.n	4b88 <__aeabi_fsub+0xb0>
    4d2e:	2c00      	cmp	r4, #0
    4d30:	d1e9      	bne.n	4d06 <__aeabi_fsub+0x22e>
    4d32:	2b00      	cmp	r3, #0
    4d34:	d063      	beq.n	4dfe <__aeabi_fsub+0x326>
    4d36:	2e00      	cmp	r6, #0
    4d38:	d100      	bne.n	4d3c <__aeabi_fsub+0x264>
    4d3a:	e713      	b.n	4b64 <__aeabi_fsub+0x8c>
    4d3c:	199b      	adds	r3, r3, r6
    4d3e:	015a      	lsls	r2, r3, #5
    4d40:	d400      	bmi.n	4d44 <__aeabi_fsub+0x26c>
    4d42:	e73e      	b.n	4bc2 <__aeabi_fsub+0xea>
    4d44:	4a31      	ldr	r2, [pc, #196]	; (4e0c <__aeabi_fsub+0x334>)
    4d46:	000c      	movs	r4, r1
    4d48:	4013      	ands	r3, r2
    4d4a:	e70b      	b.n	4b64 <__aeabi_fsub+0x8c>
    4d4c:	2c00      	cmp	r4, #0
    4d4e:	d11e      	bne.n	4d8e <__aeabi_fsub+0x2b6>
    4d50:	2b00      	cmp	r3, #0
    4d52:	d12f      	bne.n	4db4 <__aeabi_fsub+0x2dc>
    4d54:	2e00      	cmp	r6, #0
    4d56:	d04f      	beq.n	4df8 <__aeabi_fsub+0x320>
    4d58:	0033      	movs	r3, r6
    4d5a:	000d      	movs	r5, r1
    4d5c:	e702      	b.n	4b64 <__aeabi_fsub+0x8c>
    4d5e:	2601      	movs	r6, #1
    4d60:	e755      	b.n	4c0e <__aeabi_fsub+0x136>
    4d62:	2c00      	cmp	r4, #0
    4d64:	d11f      	bne.n	4da6 <__aeabi_fsub+0x2ce>
    4d66:	2b00      	cmp	r3, #0
    4d68:	d043      	beq.n	4df2 <__aeabi_fsub+0x31a>
    4d6a:	43c9      	mvns	r1, r1
    4d6c:	2900      	cmp	r1, #0
    4d6e:	d00b      	beq.n	4d88 <__aeabi_fsub+0x2b0>
    4d70:	28ff      	cmp	r0, #255	; 0xff
    4d72:	d039      	beq.n	4de8 <__aeabi_fsub+0x310>
    4d74:	291b      	cmp	r1, #27
    4d76:	dc44      	bgt.n	4e02 <__aeabi_fsub+0x32a>
    4d78:	001c      	movs	r4, r3
    4d7a:	2720      	movs	r7, #32
    4d7c:	40cc      	lsrs	r4, r1
    4d7e:	1a79      	subs	r1, r7, r1
    4d80:	408b      	lsls	r3, r1
    4d82:	1e59      	subs	r1, r3, #1
    4d84:	418b      	sbcs	r3, r1
    4d86:	4323      	orrs	r3, r4
    4d88:	199b      	adds	r3, r3, r6
    4d8a:	0004      	movs	r4, r0
    4d8c:	e740      	b.n	4c10 <__aeabi_fsub+0x138>
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d11a      	bne.n	4dc8 <__aeabi_fsub+0x2f0>
    4d92:	2e00      	cmp	r6, #0
    4d94:	d124      	bne.n	4de0 <__aeabi_fsub+0x308>
    4d96:	2780      	movs	r7, #128	; 0x80
    4d98:	2200      	movs	r2, #0
    4d9a:	03ff      	lsls	r7, r7, #15
    4d9c:	e71b      	b.n	4bd6 <__aeabi_fsub+0xfe>
    4d9e:	0033      	movs	r3, r6
    4da0:	0004      	movs	r4, r0
    4da2:	000d      	movs	r5, r1
    4da4:	e6de      	b.n	4b64 <__aeabi_fsub+0x8c>
    4da6:	28ff      	cmp	r0, #255	; 0xff
    4da8:	d01e      	beq.n	4de8 <__aeabi_fsub+0x310>
    4daa:	2480      	movs	r4, #128	; 0x80
    4dac:	04e4      	lsls	r4, r4, #19
    4dae:	4249      	negs	r1, r1
    4db0:	4323      	orrs	r3, r4
    4db2:	e7df      	b.n	4d74 <__aeabi_fsub+0x29c>
    4db4:	2e00      	cmp	r6, #0
    4db6:	d100      	bne.n	4dba <__aeabi_fsub+0x2e2>
    4db8:	e6d4      	b.n	4b64 <__aeabi_fsub+0x8c>
    4dba:	1b9f      	subs	r7, r3, r6
    4dbc:	017a      	lsls	r2, r7, #5
    4dbe:	d400      	bmi.n	4dc2 <__aeabi_fsub+0x2ea>
    4dc0:	e737      	b.n	4c32 <__aeabi_fsub+0x15a>
    4dc2:	1af3      	subs	r3, r6, r3
    4dc4:	000d      	movs	r5, r1
    4dc6:	e6cd      	b.n	4b64 <__aeabi_fsub+0x8c>
    4dc8:	24ff      	movs	r4, #255	; 0xff
    4dca:	2e00      	cmp	r6, #0
    4dcc:	d100      	bne.n	4dd0 <__aeabi_fsub+0x2f8>
    4dce:	e6c9      	b.n	4b64 <__aeabi_fsub+0x8c>
    4dd0:	2280      	movs	r2, #128	; 0x80
    4dd2:	4650      	mov	r0, sl
    4dd4:	03d2      	lsls	r2, r2, #15
    4dd6:	4210      	tst	r0, r2
    4dd8:	d0a4      	beq.n	4d24 <__aeabi_fsub+0x24c>
    4dda:	4660      	mov	r0, ip
    4ddc:	4210      	tst	r0, r2
    4dde:	d1a1      	bne.n	4d24 <__aeabi_fsub+0x24c>
    4de0:	0033      	movs	r3, r6
    4de2:	000d      	movs	r5, r1
    4de4:	24ff      	movs	r4, #255	; 0xff
    4de6:	e6bd      	b.n	4b64 <__aeabi_fsub+0x8c>
    4de8:	0033      	movs	r3, r6
    4dea:	24ff      	movs	r4, #255	; 0xff
    4dec:	e6ba      	b.n	4b64 <__aeabi_fsub+0x8c>
    4dee:	2301      	movs	r3, #1
    4df0:	e76e      	b.n	4cd0 <__aeabi_fsub+0x1f8>
    4df2:	0033      	movs	r3, r6
    4df4:	0004      	movs	r4, r0
    4df6:	e6b5      	b.n	4b64 <__aeabi_fsub+0x8c>
    4df8:	2700      	movs	r7, #0
    4dfa:	2200      	movs	r2, #0
    4dfc:	e71c      	b.n	4c38 <__aeabi_fsub+0x160>
    4dfe:	0033      	movs	r3, r6
    4e00:	e6b0      	b.n	4b64 <__aeabi_fsub+0x8c>
    4e02:	2301      	movs	r3, #1
    4e04:	e7c0      	b.n	4d88 <__aeabi_fsub+0x2b0>
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	7dffffff 	.word	0x7dffffff
    4e0c:	fbffffff 	.word	0xfbffffff

00004e10 <__aeabi_f2iz>:
    4e10:	0241      	lsls	r1, r0, #9
    4e12:	0043      	lsls	r3, r0, #1
    4e14:	0fc2      	lsrs	r2, r0, #31
    4e16:	0a49      	lsrs	r1, r1, #9
    4e18:	0e1b      	lsrs	r3, r3, #24
    4e1a:	2000      	movs	r0, #0
    4e1c:	2b7e      	cmp	r3, #126	; 0x7e
    4e1e:	dd0d      	ble.n	4e3c <__aeabi_f2iz+0x2c>
    4e20:	2b9d      	cmp	r3, #157	; 0x9d
    4e22:	dc0c      	bgt.n	4e3e <__aeabi_f2iz+0x2e>
    4e24:	2080      	movs	r0, #128	; 0x80
    4e26:	0400      	lsls	r0, r0, #16
    4e28:	4301      	orrs	r1, r0
    4e2a:	2b95      	cmp	r3, #149	; 0x95
    4e2c:	dc0a      	bgt.n	4e44 <__aeabi_f2iz+0x34>
    4e2e:	2096      	movs	r0, #150	; 0x96
    4e30:	1ac3      	subs	r3, r0, r3
    4e32:	40d9      	lsrs	r1, r3
    4e34:	4248      	negs	r0, r1
    4e36:	2a00      	cmp	r2, #0
    4e38:	d100      	bne.n	4e3c <__aeabi_f2iz+0x2c>
    4e3a:	0008      	movs	r0, r1
    4e3c:	4770      	bx	lr
    4e3e:	4b03      	ldr	r3, [pc, #12]	; (4e4c <__aeabi_f2iz+0x3c>)
    4e40:	18d0      	adds	r0, r2, r3
    4e42:	e7fb      	b.n	4e3c <__aeabi_f2iz+0x2c>
    4e44:	3b96      	subs	r3, #150	; 0x96
    4e46:	4099      	lsls	r1, r3
    4e48:	e7f4      	b.n	4e34 <__aeabi_f2iz+0x24>
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	7fffffff 	.word	0x7fffffff

00004e50 <__aeabi_i2f>:
    4e50:	b570      	push	{r4, r5, r6, lr}
    4e52:	2800      	cmp	r0, #0
    4e54:	d030      	beq.n	4eb8 <__aeabi_i2f+0x68>
    4e56:	17c3      	asrs	r3, r0, #31
    4e58:	18c4      	adds	r4, r0, r3
    4e5a:	405c      	eors	r4, r3
    4e5c:	0fc5      	lsrs	r5, r0, #31
    4e5e:	0020      	movs	r0, r4
    4e60:	f000 ff52 	bl	5d08 <__clzsi2>
    4e64:	239e      	movs	r3, #158	; 0x9e
    4e66:	1a1b      	subs	r3, r3, r0
    4e68:	2b96      	cmp	r3, #150	; 0x96
    4e6a:	dc0d      	bgt.n	4e88 <__aeabi_i2f+0x38>
    4e6c:	2296      	movs	r2, #150	; 0x96
    4e6e:	1ad2      	subs	r2, r2, r3
    4e70:	4094      	lsls	r4, r2
    4e72:	002a      	movs	r2, r5
    4e74:	0264      	lsls	r4, r4, #9
    4e76:	0a64      	lsrs	r4, r4, #9
    4e78:	b2db      	uxtb	r3, r3
    4e7a:	0264      	lsls	r4, r4, #9
    4e7c:	05db      	lsls	r3, r3, #23
    4e7e:	0a60      	lsrs	r0, r4, #9
    4e80:	07d2      	lsls	r2, r2, #31
    4e82:	4318      	orrs	r0, r3
    4e84:	4310      	orrs	r0, r2
    4e86:	bd70      	pop	{r4, r5, r6, pc}
    4e88:	2b99      	cmp	r3, #153	; 0x99
    4e8a:	dc19      	bgt.n	4ec0 <__aeabi_i2f+0x70>
    4e8c:	2299      	movs	r2, #153	; 0x99
    4e8e:	1ad2      	subs	r2, r2, r3
    4e90:	2a00      	cmp	r2, #0
    4e92:	dd29      	ble.n	4ee8 <__aeabi_i2f+0x98>
    4e94:	4094      	lsls	r4, r2
    4e96:	0022      	movs	r2, r4
    4e98:	4c14      	ldr	r4, [pc, #80]	; (4eec <__aeabi_i2f+0x9c>)
    4e9a:	4014      	ands	r4, r2
    4e9c:	0751      	lsls	r1, r2, #29
    4e9e:	d004      	beq.n	4eaa <__aeabi_i2f+0x5a>
    4ea0:	210f      	movs	r1, #15
    4ea2:	400a      	ands	r2, r1
    4ea4:	2a04      	cmp	r2, #4
    4ea6:	d000      	beq.n	4eaa <__aeabi_i2f+0x5a>
    4ea8:	3404      	adds	r4, #4
    4eaa:	0162      	lsls	r2, r4, #5
    4eac:	d413      	bmi.n	4ed6 <__aeabi_i2f+0x86>
    4eae:	01a4      	lsls	r4, r4, #6
    4eb0:	0a64      	lsrs	r4, r4, #9
    4eb2:	b2db      	uxtb	r3, r3
    4eb4:	002a      	movs	r2, r5
    4eb6:	e7e0      	b.n	4e7a <__aeabi_i2f+0x2a>
    4eb8:	2200      	movs	r2, #0
    4eba:	2300      	movs	r3, #0
    4ebc:	2400      	movs	r4, #0
    4ebe:	e7dc      	b.n	4e7a <__aeabi_i2f+0x2a>
    4ec0:	2205      	movs	r2, #5
    4ec2:	0021      	movs	r1, r4
    4ec4:	1a12      	subs	r2, r2, r0
    4ec6:	40d1      	lsrs	r1, r2
    4ec8:	22b9      	movs	r2, #185	; 0xb9
    4eca:	1ad2      	subs	r2, r2, r3
    4ecc:	4094      	lsls	r4, r2
    4ece:	1e62      	subs	r2, r4, #1
    4ed0:	4194      	sbcs	r4, r2
    4ed2:	430c      	orrs	r4, r1
    4ed4:	e7da      	b.n	4e8c <__aeabi_i2f+0x3c>
    4ed6:	4b05      	ldr	r3, [pc, #20]	; (4eec <__aeabi_i2f+0x9c>)
    4ed8:	002a      	movs	r2, r5
    4eda:	401c      	ands	r4, r3
    4edc:	239f      	movs	r3, #159	; 0x9f
    4ede:	01a4      	lsls	r4, r4, #6
    4ee0:	1a1b      	subs	r3, r3, r0
    4ee2:	0a64      	lsrs	r4, r4, #9
    4ee4:	b2db      	uxtb	r3, r3
    4ee6:	e7c8      	b.n	4e7a <__aeabi_i2f+0x2a>
    4ee8:	0022      	movs	r2, r4
    4eea:	e7d5      	b.n	4e98 <__aeabi_i2f+0x48>
    4eec:	fbffffff 	.word	0xfbffffff

00004ef0 <__aeabi_ddiv>:
    4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ef2:	4657      	mov	r7, sl
    4ef4:	4645      	mov	r5, r8
    4ef6:	46de      	mov	lr, fp
    4ef8:	464e      	mov	r6, r9
    4efa:	b5e0      	push	{r5, r6, r7, lr}
    4efc:	004c      	lsls	r4, r1, #1
    4efe:	030e      	lsls	r6, r1, #12
    4f00:	b087      	sub	sp, #28
    4f02:	4683      	mov	fp, r0
    4f04:	4692      	mov	sl, r2
    4f06:	001d      	movs	r5, r3
    4f08:	4680      	mov	r8, r0
    4f0a:	0b36      	lsrs	r6, r6, #12
    4f0c:	0d64      	lsrs	r4, r4, #21
    4f0e:	0fcf      	lsrs	r7, r1, #31
    4f10:	2c00      	cmp	r4, #0
    4f12:	d04f      	beq.n	4fb4 <__aeabi_ddiv+0xc4>
    4f14:	4b6f      	ldr	r3, [pc, #444]	; (50d4 <__aeabi_ddiv+0x1e4>)
    4f16:	429c      	cmp	r4, r3
    4f18:	d035      	beq.n	4f86 <__aeabi_ddiv+0x96>
    4f1a:	2380      	movs	r3, #128	; 0x80
    4f1c:	0f42      	lsrs	r2, r0, #29
    4f1e:	041b      	lsls	r3, r3, #16
    4f20:	00f6      	lsls	r6, r6, #3
    4f22:	4313      	orrs	r3, r2
    4f24:	4333      	orrs	r3, r6
    4f26:	4699      	mov	r9, r3
    4f28:	00c3      	lsls	r3, r0, #3
    4f2a:	4698      	mov	r8, r3
    4f2c:	4b6a      	ldr	r3, [pc, #424]	; (50d8 <__aeabi_ddiv+0x1e8>)
    4f2e:	2600      	movs	r6, #0
    4f30:	469c      	mov	ip, r3
    4f32:	2300      	movs	r3, #0
    4f34:	4464      	add	r4, ip
    4f36:	9303      	str	r3, [sp, #12]
    4f38:	032b      	lsls	r3, r5, #12
    4f3a:	0b1b      	lsrs	r3, r3, #12
    4f3c:	469b      	mov	fp, r3
    4f3e:	006b      	lsls	r3, r5, #1
    4f40:	0fed      	lsrs	r5, r5, #31
    4f42:	4650      	mov	r0, sl
    4f44:	0d5b      	lsrs	r3, r3, #21
    4f46:	9501      	str	r5, [sp, #4]
    4f48:	d05e      	beq.n	5008 <__aeabi_ddiv+0x118>
    4f4a:	4a62      	ldr	r2, [pc, #392]	; (50d4 <__aeabi_ddiv+0x1e4>)
    4f4c:	4293      	cmp	r3, r2
    4f4e:	d053      	beq.n	4ff8 <__aeabi_ddiv+0x108>
    4f50:	465a      	mov	r2, fp
    4f52:	00d1      	lsls	r1, r2, #3
    4f54:	2280      	movs	r2, #128	; 0x80
    4f56:	0f40      	lsrs	r0, r0, #29
    4f58:	0412      	lsls	r2, r2, #16
    4f5a:	4302      	orrs	r2, r0
    4f5c:	430a      	orrs	r2, r1
    4f5e:	4693      	mov	fp, r2
    4f60:	4652      	mov	r2, sl
    4f62:	00d1      	lsls	r1, r2, #3
    4f64:	4a5c      	ldr	r2, [pc, #368]	; (50d8 <__aeabi_ddiv+0x1e8>)
    4f66:	4694      	mov	ip, r2
    4f68:	2200      	movs	r2, #0
    4f6a:	4463      	add	r3, ip
    4f6c:	0038      	movs	r0, r7
    4f6e:	4068      	eors	r0, r5
    4f70:	4684      	mov	ip, r0
    4f72:	9002      	str	r0, [sp, #8]
    4f74:	1ae4      	subs	r4, r4, r3
    4f76:	4316      	orrs	r6, r2
    4f78:	2e0f      	cmp	r6, #15
    4f7a:	d900      	bls.n	4f7e <__aeabi_ddiv+0x8e>
    4f7c:	e0b4      	b.n	50e8 <__aeabi_ddiv+0x1f8>
    4f7e:	4b57      	ldr	r3, [pc, #348]	; (50dc <__aeabi_ddiv+0x1ec>)
    4f80:	00b6      	lsls	r6, r6, #2
    4f82:	599b      	ldr	r3, [r3, r6]
    4f84:	469f      	mov	pc, r3
    4f86:	0003      	movs	r3, r0
    4f88:	4333      	orrs	r3, r6
    4f8a:	4699      	mov	r9, r3
    4f8c:	d16c      	bne.n	5068 <__aeabi_ddiv+0x178>
    4f8e:	2300      	movs	r3, #0
    4f90:	4698      	mov	r8, r3
    4f92:	3302      	adds	r3, #2
    4f94:	2608      	movs	r6, #8
    4f96:	9303      	str	r3, [sp, #12]
    4f98:	e7ce      	b.n	4f38 <__aeabi_ddiv+0x48>
    4f9a:	46cb      	mov	fp, r9
    4f9c:	4641      	mov	r1, r8
    4f9e:	9a03      	ldr	r2, [sp, #12]
    4fa0:	9701      	str	r7, [sp, #4]
    4fa2:	2a02      	cmp	r2, #2
    4fa4:	d165      	bne.n	5072 <__aeabi_ddiv+0x182>
    4fa6:	9b01      	ldr	r3, [sp, #4]
    4fa8:	4c4a      	ldr	r4, [pc, #296]	; (50d4 <__aeabi_ddiv+0x1e4>)
    4faa:	469c      	mov	ip, r3
    4fac:	2300      	movs	r3, #0
    4fae:	2200      	movs	r2, #0
    4fb0:	4698      	mov	r8, r3
    4fb2:	e06b      	b.n	508c <__aeabi_ddiv+0x19c>
    4fb4:	0003      	movs	r3, r0
    4fb6:	4333      	orrs	r3, r6
    4fb8:	4699      	mov	r9, r3
    4fba:	d04e      	beq.n	505a <__aeabi_ddiv+0x16a>
    4fbc:	2e00      	cmp	r6, #0
    4fbe:	d100      	bne.n	4fc2 <__aeabi_ddiv+0xd2>
    4fc0:	e1bc      	b.n	533c <__aeabi_ddiv+0x44c>
    4fc2:	0030      	movs	r0, r6
    4fc4:	f000 fea0 	bl	5d08 <__clzsi2>
    4fc8:	0003      	movs	r3, r0
    4fca:	3b0b      	subs	r3, #11
    4fcc:	2b1c      	cmp	r3, #28
    4fce:	dd00      	ble.n	4fd2 <__aeabi_ddiv+0xe2>
    4fd0:	e1ac      	b.n	532c <__aeabi_ddiv+0x43c>
    4fd2:	221d      	movs	r2, #29
    4fd4:	1ad3      	subs	r3, r2, r3
    4fd6:	465a      	mov	r2, fp
    4fd8:	0001      	movs	r1, r0
    4fda:	40da      	lsrs	r2, r3
    4fdc:	3908      	subs	r1, #8
    4fde:	408e      	lsls	r6, r1
    4fe0:	0013      	movs	r3, r2
    4fe2:	4333      	orrs	r3, r6
    4fe4:	4699      	mov	r9, r3
    4fe6:	465b      	mov	r3, fp
    4fe8:	408b      	lsls	r3, r1
    4fea:	4698      	mov	r8, r3
    4fec:	2300      	movs	r3, #0
    4fee:	4c3c      	ldr	r4, [pc, #240]	; (50e0 <__aeabi_ddiv+0x1f0>)
    4ff0:	2600      	movs	r6, #0
    4ff2:	1a24      	subs	r4, r4, r0
    4ff4:	9303      	str	r3, [sp, #12]
    4ff6:	e79f      	b.n	4f38 <__aeabi_ddiv+0x48>
    4ff8:	4651      	mov	r1, sl
    4ffa:	465a      	mov	r2, fp
    4ffc:	4311      	orrs	r1, r2
    4ffe:	d129      	bne.n	5054 <__aeabi_ddiv+0x164>
    5000:	2200      	movs	r2, #0
    5002:	4693      	mov	fp, r2
    5004:	3202      	adds	r2, #2
    5006:	e7b1      	b.n	4f6c <__aeabi_ddiv+0x7c>
    5008:	4659      	mov	r1, fp
    500a:	4301      	orrs	r1, r0
    500c:	d01e      	beq.n	504c <__aeabi_ddiv+0x15c>
    500e:	465b      	mov	r3, fp
    5010:	2b00      	cmp	r3, #0
    5012:	d100      	bne.n	5016 <__aeabi_ddiv+0x126>
    5014:	e19e      	b.n	5354 <__aeabi_ddiv+0x464>
    5016:	4658      	mov	r0, fp
    5018:	f000 fe76 	bl	5d08 <__clzsi2>
    501c:	0003      	movs	r3, r0
    501e:	3b0b      	subs	r3, #11
    5020:	2b1c      	cmp	r3, #28
    5022:	dd00      	ble.n	5026 <__aeabi_ddiv+0x136>
    5024:	e18f      	b.n	5346 <__aeabi_ddiv+0x456>
    5026:	0002      	movs	r2, r0
    5028:	4659      	mov	r1, fp
    502a:	3a08      	subs	r2, #8
    502c:	4091      	lsls	r1, r2
    502e:	468b      	mov	fp, r1
    5030:	211d      	movs	r1, #29
    5032:	1acb      	subs	r3, r1, r3
    5034:	4651      	mov	r1, sl
    5036:	40d9      	lsrs	r1, r3
    5038:	000b      	movs	r3, r1
    503a:	4659      	mov	r1, fp
    503c:	430b      	orrs	r3, r1
    503e:	4651      	mov	r1, sl
    5040:	469b      	mov	fp, r3
    5042:	4091      	lsls	r1, r2
    5044:	4b26      	ldr	r3, [pc, #152]	; (50e0 <__aeabi_ddiv+0x1f0>)
    5046:	2200      	movs	r2, #0
    5048:	1a1b      	subs	r3, r3, r0
    504a:	e78f      	b.n	4f6c <__aeabi_ddiv+0x7c>
    504c:	2300      	movs	r3, #0
    504e:	2201      	movs	r2, #1
    5050:	469b      	mov	fp, r3
    5052:	e78b      	b.n	4f6c <__aeabi_ddiv+0x7c>
    5054:	4651      	mov	r1, sl
    5056:	2203      	movs	r2, #3
    5058:	e788      	b.n	4f6c <__aeabi_ddiv+0x7c>
    505a:	2300      	movs	r3, #0
    505c:	4698      	mov	r8, r3
    505e:	3301      	adds	r3, #1
    5060:	2604      	movs	r6, #4
    5062:	2400      	movs	r4, #0
    5064:	9303      	str	r3, [sp, #12]
    5066:	e767      	b.n	4f38 <__aeabi_ddiv+0x48>
    5068:	2303      	movs	r3, #3
    506a:	46b1      	mov	r9, r6
    506c:	9303      	str	r3, [sp, #12]
    506e:	260c      	movs	r6, #12
    5070:	e762      	b.n	4f38 <__aeabi_ddiv+0x48>
    5072:	2a03      	cmp	r2, #3
    5074:	d100      	bne.n	5078 <__aeabi_ddiv+0x188>
    5076:	e25c      	b.n	5532 <__aeabi_ddiv+0x642>
    5078:	9b01      	ldr	r3, [sp, #4]
    507a:	2a01      	cmp	r2, #1
    507c:	d000      	beq.n	5080 <__aeabi_ddiv+0x190>
    507e:	e1e4      	b.n	544a <__aeabi_ddiv+0x55a>
    5080:	4013      	ands	r3, r2
    5082:	469c      	mov	ip, r3
    5084:	2300      	movs	r3, #0
    5086:	2400      	movs	r4, #0
    5088:	2200      	movs	r2, #0
    508a:	4698      	mov	r8, r3
    508c:	2100      	movs	r1, #0
    508e:	0312      	lsls	r2, r2, #12
    5090:	0b13      	lsrs	r3, r2, #12
    5092:	0d0a      	lsrs	r2, r1, #20
    5094:	0512      	lsls	r2, r2, #20
    5096:	431a      	orrs	r2, r3
    5098:	0523      	lsls	r3, r4, #20
    509a:	4c12      	ldr	r4, [pc, #72]	; (50e4 <__aeabi_ddiv+0x1f4>)
    509c:	4640      	mov	r0, r8
    509e:	4022      	ands	r2, r4
    50a0:	4313      	orrs	r3, r2
    50a2:	4662      	mov	r2, ip
    50a4:	005b      	lsls	r3, r3, #1
    50a6:	07d2      	lsls	r2, r2, #31
    50a8:	085b      	lsrs	r3, r3, #1
    50aa:	4313      	orrs	r3, r2
    50ac:	0019      	movs	r1, r3
    50ae:	b007      	add	sp, #28
    50b0:	bc3c      	pop	{r2, r3, r4, r5}
    50b2:	4690      	mov	r8, r2
    50b4:	4699      	mov	r9, r3
    50b6:	46a2      	mov	sl, r4
    50b8:	46ab      	mov	fp, r5
    50ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50bc:	2300      	movs	r3, #0
    50be:	2280      	movs	r2, #128	; 0x80
    50c0:	469c      	mov	ip, r3
    50c2:	0312      	lsls	r2, r2, #12
    50c4:	4698      	mov	r8, r3
    50c6:	4c03      	ldr	r4, [pc, #12]	; (50d4 <__aeabi_ddiv+0x1e4>)
    50c8:	e7e0      	b.n	508c <__aeabi_ddiv+0x19c>
    50ca:	2300      	movs	r3, #0
    50cc:	4c01      	ldr	r4, [pc, #4]	; (50d4 <__aeabi_ddiv+0x1e4>)
    50ce:	2200      	movs	r2, #0
    50d0:	4698      	mov	r8, r3
    50d2:	e7db      	b.n	508c <__aeabi_ddiv+0x19c>
    50d4:	000007ff 	.word	0x000007ff
    50d8:	fffffc01 	.word	0xfffffc01
    50dc:	00006194 	.word	0x00006194
    50e0:	fffffc0d 	.word	0xfffffc0d
    50e4:	800fffff 	.word	0x800fffff
    50e8:	45d9      	cmp	r9, fp
    50ea:	d900      	bls.n	50ee <__aeabi_ddiv+0x1fe>
    50ec:	e139      	b.n	5362 <__aeabi_ddiv+0x472>
    50ee:	d100      	bne.n	50f2 <__aeabi_ddiv+0x202>
    50f0:	e134      	b.n	535c <__aeabi_ddiv+0x46c>
    50f2:	2300      	movs	r3, #0
    50f4:	4646      	mov	r6, r8
    50f6:	464d      	mov	r5, r9
    50f8:	469a      	mov	sl, r3
    50fa:	3c01      	subs	r4, #1
    50fc:	465b      	mov	r3, fp
    50fe:	0e0a      	lsrs	r2, r1, #24
    5100:	021b      	lsls	r3, r3, #8
    5102:	431a      	orrs	r2, r3
    5104:	020b      	lsls	r3, r1, #8
    5106:	0c17      	lsrs	r7, r2, #16
    5108:	9303      	str	r3, [sp, #12]
    510a:	0413      	lsls	r3, r2, #16
    510c:	0c1b      	lsrs	r3, r3, #16
    510e:	0039      	movs	r1, r7
    5110:	0028      	movs	r0, r5
    5112:	4690      	mov	r8, r2
    5114:	9301      	str	r3, [sp, #4]
    5116:	f7ff f817 	bl	4148 <__udivsi3>
    511a:	0002      	movs	r2, r0
    511c:	9b01      	ldr	r3, [sp, #4]
    511e:	4683      	mov	fp, r0
    5120:	435a      	muls	r2, r3
    5122:	0028      	movs	r0, r5
    5124:	0039      	movs	r1, r7
    5126:	4691      	mov	r9, r2
    5128:	f7ff f894 	bl	4254 <__aeabi_uidivmod>
    512c:	0c35      	lsrs	r5, r6, #16
    512e:	0409      	lsls	r1, r1, #16
    5130:	430d      	orrs	r5, r1
    5132:	45a9      	cmp	r9, r5
    5134:	d90d      	bls.n	5152 <__aeabi_ddiv+0x262>
    5136:	465b      	mov	r3, fp
    5138:	4445      	add	r5, r8
    513a:	3b01      	subs	r3, #1
    513c:	45a8      	cmp	r8, r5
    513e:	d900      	bls.n	5142 <__aeabi_ddiv+0x252>
    5140:	e13a      	b.n	53b8 <__aeabi_ddiv+0x4c8>
    5142:	45a9      	cmp	r9, r5
    5144:	d800      	bhi.n	5148 <__aeabi_ddiv+0x258>
    5146:	e137      	b.n	53b8 <__aeabi_ddiv+0x4c8>
    5148:	2302      	movs	r3, #2
    514a:	425b      	negs	r3, r3
    514c:	469c      	mov	ip, r3
    514e:	4445      	add	r5, r8
    5150:	44e3      	add	fp, ip
    5152:	464b      	mov	r3, r9
    5154:	1aeb      	subs	r3, r5, r3
    5156:	0039      	movs	r1, r7
    5158:	0018      	movs	r0, r3
    515a:	9304      	str	r3, [sp, #16]
    515c:	f7fe fff4 	bl	4148 <__udivsi3>
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	0005      	movs	r5, r0
    5164:	4343      	muls	r3, r0
    5166:	0039      	movs	r1, r7
    5168:	9804      	ldr	r0, [sp, #16]
    516a:	4699      	mov	r9, r3
    516c:	f7ff f872 	bl	4254 <__aeabi_uidivmod>
    5170:	0433      	lsls	r3, r6, #16
    5172:	0409      	lsls	r1, r1, #16
    5174:	0c1b      	lsrs	r3, r3, #16
    5176:	430b      	orrs	r3, r1
    5178:	4599      	cmp	r9, r3
    517a:	d909      	bls.n	5190 <__aeabi_ddiv+0x2a0>
    517c:	4443      	add	r3, r8
    517e:	1e6a      	subs	r2, r5, #1
    5180:	4598      	cmp	r8, r3
    5182:	d900      	bls.n	5186 <__aeabi_ddiv+0x296>
    5184:	e11a      	b.n	53bc <__aeabi_ddiv+0x4cc>
    5186:	4599      	cmp	r9, r3
    5188:	d800      	bhi.n	518c <__aeabi_ddiv+0x29c>
    518a:	e117      	b.n	53bc <__aeabi_ddiv+0x4cc>
    518c:	3d02      	subs	r5, #2
    518e:	4443      	add	r3, r8
    5190:	464a      	mov	r2, r9
    5192:	1a9b      	subs	r3, r3, r2
    5194:	465a      	mov	r2, fp
    5196:	0412      	lsls	r2, r2, #16
    5198:	432a      	orrs	r2, r5
    519a:	9903      	ldr	r1, [sp, #12]
    519c:	4693      	mov	fp, r2
    519e:	0c10      	lsrs	r0, r2, #16
    51a0:	0c0a      	lsrs	r2, r1, #16
    51a2:	4691      	mov	r9, r2
    51a4:	0409      	lsls	r1, r1, #16
    51a6:	465a      	mov	r2, fp
    51a8:	0c09      	lsrs	r1, r1, #16
    51aa:	464e      	mov	r6, r9
    51ac:	000d      	movs	r5, r1
    51ae:	0412      	lsls	r2, r2, #16
    51b0:	0c12      	lsrs	r2, r2, #16
    51b2:	4345      	muls	r5, r0
    51b4:	9105      	str	r1, [sp, #20]
    51b6:	4351      	muls	r1, r2
    51b8:	4372      	muls	r2, r6
    51ba:	4370      	muls	r0, r6
    51bc:	1952      	adds	r2, r2, r5
    51be:	0c0e      	lsrs	r6, r1, #16
    51c0:	18b2      	adds	r2, r6, r2
    51c2:	4295      	cmp	r5, r2
    51c4:	d903      	bls.n	51ce <__aeabi_ddiv+0x2de>
    51c6:	2580      	movs	r5, #128	; 0x80
    51c8:	026d      	lsls	r5, r5, #9
    51ca:	46ac      	mov	ip, r5
    51cc:	4460      	add	r0, ip
    51ce:	0c15      	lsrs	r5, r2, #16
    51d0:	0409      	lsls	r1, r1, #16
    51d2:	0412      	lsls	r2, r2, #16
    51d4:	0c09      	lsrs	r1, r1, #16
    51d6:	1828      	adds	r0, r5, r0
    51d8:	1852      	adds	r2, r2, r1
    51da:	4283      	cmp	r3, r0
    51dc:	d200      	bcs.n	51e0 <__aeabi_ddiv+0x2f0>
    51de:	e0ce      	b.n	537e <__aeabi_ddiv+0x48e>
    51e0:	d100      	bne.n	51e4 <__aeabi_ddiv+0x2f4>
    51e2:	e0c8      	b.n	5376 <__aeabi_ddiv+0x486>
    51e4:	1a1d      	subs	r5, r3, r0
    51e6:	4653      	mov	r3, sl
    51e8:	1a9e      	subs	r6, r3, r2
    51ea:	45b2      	cmp	sl, r6
    51ec:	4192      	sbcs	r2, r2
    51ee:	4252      	negs	r2, r2
    51f0:	1aab      	subs	r3, r5, r2
    51f2:	469a      	mov	sl, r3
    51f4:	4598      	cmp	r8, r3
    51f6:	d100      	bne.n	51fa <__aeabi_ddiv+0x30a>
    51f8:	e117      	b.n	542a <__aeabi_ddiv+0x53a>
    51fa:	0039      	movs	r1, r7
    51fc:	0018      	movs	r0, r3
    51fe:	f7fe ffa3 	bl	4148 <__udivsi3>
    5202:	9b01      	ldr	r3, [sp, #4]
    5204:	0005      	movs	r5, r0
    5206:	4343      	muls	r3, r0
    5208:	0039      	movs	r1, r7
    520a:	4650      	mov	r0, sl
    520c:	9304      	str	r3, [sp, #16]
    520e:	f7ff f821 	bl	4254 <__aeabi_uidivmod>
    5212:	9804      	ldr	r0, [sp, #16]
    5214:	040b      	lsls	r3, r1, #16
    5216:	0c31      	lsrs	r1, r6, #16
    5218:	4319      	orrs	r1, r3
    521a:	4288      	cmp	r0, r1
    521c:	d909      	bls.n	5232 <__aeabi_ddiv+0x342>
    521e:	4441      	add	r1, r8
    5220:	1e6b      	subs	r3, r5, #1
    5222:	4588      	cmp	r8, r1
    5224:	d900      	bls.n	5228 <__aeabi_ddiv+0x338>
    5226:	e107      	b.n	5438 <__aeabi_ddiv+0x548>
    5228:	4288      	cmp	r0, r1
    522a:	d800      	bhi.n	522e <__aeabi_ddiv+0x33e>
    522c:	e104      	b.n	5438 <__aeabi_ddiv+0x548>
    522e:	3d02      	subs	r5, #2
    5230:	4441      	add	r1, r8
    5232:	9b04      	ldr	r3, [sp, #16]
    5234:	1acb      	subs	r3, r1, r3
    5236:	0018      	movs	r0, r3
    5238:	0039      	movs	r1, r7
    523a:	9304      	str	r3, [sp, #16]
    523c:	f7fe ff84 	bl	4148 <__udivsi3>
    5240:	9b01      	ldr	r3, [sp, #4]
    5242:	4682      	mov	sl, r0
    5244:	4343      	muls	r3, r0
    5246:	0039      	movs	r1, r7
    5248:	9804      	ldr	r0, [sp, #16]
    524a:	9301      	str	r3, [sp, #4]
    524c:	f7ff f802 	bl	4254 <__aeabi_uidivmod>
    5250:	9801      	ldr	r0, [sp, #4]
    5252:	040b      	lsls	r3, r1, #16
    5254:	0431      	lsls	r1, r6, #16
    5256:	0c09      	lsrs	r1, r1, #16
    5258:	4319      	orrs	r1, r3
    525a:	4288      	cmp	r0, r1
    525c:	d90d      	bls.n	527a <__aeabi_ddiv+0x38a>
    525e:	4653      	mov	r3, sl
    5260:	4441      	add	r1, r8
    5262:	3b01      	subs	r3, #1
    5264:	4588      	cmp	r8, r1
    5266:	d900      	bls.n	526a <__aeabi_ddiv+0x37a>
    5268:	e0e8      	b.n	543c <__aeabi_ddiv+0x54c>
    526a:	4288      	cmp	r0, r1
    526c:	d800      	bhi.n	5270 <__aeabi_ddiv+0x380>
    526e:	e0e5      	b.n	543c <__aeabi_ddiv+0x54c>
    5270:	2302      	movs	r3, #2
    5272:	425b      	negs	r3, r3
    5274:	469c      	mov	ip, r3
    5276:	4441      	add	r1, r8
    5278:	44e2      	add	sl, ip
    527a:	9b01      	ldr	r3, [sp, #4]
    527c:	042d      	lsls	r5, r5, #16
    527e:	1ace      	subs	r6, r1, r3
    5280:	4651      	mov	r1, sl
    5282:	4329      	orrs	r1, r5
    5284:	9d05      	ldr	r5, [sp, #20]
    5286:	464f      	mov	r7, r9
    5288:	002a      	movs	r2, r5
    528a:	040b      	lsls	r3, r1, #16
    528c:	0c08      	lsrs	r0, r1, #16
    528e:	0c1b      	lsrs	r3, r3, #16
    5290:	435a      	muls	r2, r3
    5292:	4345      	muls	r5, r0
    5294:	437b      	muls	r3, r7
    5296:	4378      	muls	r0, r7
    5298:	195b      	adds	r3, r3, r5
    529a:	0c17      	lsrs	r7, r2, #16
    529c:	18fb      	adds	r3, r7, r3
    529e:	429d      	cmp	r5, r3
    52a0:	d903      	bls.n	52aa <__aeabi_ddiv+0x3ba>
    52a2:	2580      	movs	r5, #128	; 0x80
    52a4:	026d      	lsls	r5, r5, #9
    52a6:	46ac      	mov	ip, r5
    52a8:	4460      	add	r0, ip
    52aa:	0c1d      	lsrs	r5, r3, #16
    52ac:	0412      	lsls	r2, r2, #16
    52ae:	041b      	lsls	r3, r3, #16
    52b0:	0c12      	lsrs	r2, r2, #16
    52b2:	1828      	adds	r0, r5, r0
    52b4:	189b      	adds	r3, r3, r2
    52b6:	4286      	cmp	r6, r0
    52b8:	d200      	bcs.n	52bc <__aeabi_ddiv+0x3cc>
    52ba:	e093      	b.n	53e4 <__aeabi_ddiv+0x4f4>
    52bc:	d100      	bne.n	52c0 <__aeabi_ddiv+0x3d0>
    52be:	e08e      	b.n	53de <__aeabi_ddiv+0x4ee>
    52c0:	2301      	movs	r3, #1
    52c2:	4319      	orrs	r1, r3
    52c4:	4ba0      	ldr	r3, [pc, #640]	; (5548 <__aeabi_ddiv+0x658>)
    52c6:	18e3      	adds	r3, r4, r3
    52c8:	2b00      	cmp	r3, #0
    52ca:	dc00      	bgt.n	52ce <__aeabi_ddiv+0x3de>
    52cc:	e099      	b.n	5402 <__aeabi_ddiv+0x512>
    52ce:	074a      	lsls	r2, r1, #29
    52d0:	d000      	beq.n	52d4 <__aeabi_ddiv+0x3e4>
    52d2:	e09e      	b.n	5412 <__aeabi_ddiv+0x522>
    52d4:	465a      	mov	r2, fp
    52d6:	01d2      	lsls	r2, r2, #7
    52d8:	d506      	bpl.n	52e8 <__aeabi_ddiv+0x3f8>
    52da:	465a      	mov	r2, fp
    52dc:	4b9b      	ldr	r3, [pc, #620]	; (554c <__aeabi_ddiv+0x65c>)
    52de:	401a      	ands	r2, r3
    52e0:	2380      	movs	r3, #128	; 0x80
    52e2:	4693      	mov	fp, r2
    52e4:	00db      	lsls	r3, r3, #3
    52e6:	18e3      	adds	r3, r4, r3
    52e8:	4a99      	ldr	r2, [pc, #612]	; (5550 <__aeabi_ddiv+0x660>)
    52ea:	4293      	cmp	r3, r2
    52ec:	dd68      	ble.n	53c0 <__aeabi_ddiv+0x4d0>
    52ee:	2301      	movs	r3, #1
    52f0:	9a02      	ldr	r2, [sp, #8]
    52f2:	4c98      	ldr	r4, [pc, #608]	; (5554 <__aeabi_ddiv+0x664>)
    52f4:	401a      	ands	r2, r3
    52f6:	2300      	movs	r3, #0
    52f8:	4694      	mov	ip, r2
    52fa:	4698      	mov	r8, r3
    52fc:	2200      	movs	r2, #0
    52fe:	e6c5      	b.n	508c <__aeabi_ddiv+0x19c>
    5300:	2280      	movs	r2, #128	; 0x80
    5302:	464b      	mov	r3, r9
    5304:	0312      	lsls	r2, r2, #12
    5306:	4213      	tst	r3, r2
    5308:	d00a      	beq.n	5320 <__aeabi_ddiv+0x430>
    530a:	465b      	mov	r3, fp
    530c:	4213      	tst	r3, r2
    530e:	d106      	bne.n	531e <__aeabi_ddiv+0x42e>
    5310:	431a      	orrs	r2, r3
    5312:	0312      	lsls	r2, r2, #12
    5314:	0b12      	lsrs	r2, r2, #12
    5316:	46ac      	mov	ip, r5
    5318:	4688      	mov	r8, r1
    531a:	4c8e      	ldr	r4, [pc, #568]	; (5554 <__aeabi_ddiv+0x664>)
    531c:	e6b6      	b.n	508c <__aeabi_ddiv+0x19c>
    531e:	464b      	mov	r3, r9
    5320:	431a      	orrs	r2, r3
    5322:	0312      	lsls	r2, r2, #12
    5324:	0b12      	lsrs	r2, r2, #12
    5326:	46bc      	mov	ip, r7
    5328:	4c8a      	ldr	r4, [pc, #552]	; (5554 <__aeabi_ddiv+0x664>)
    532a:	e6af      	b.n	508c <__aeabi_ddiv+0x19c>
    532c:	0003      	movs	r3, r0
    532e:	465a      	mov	r2, fp
    5330:	3b28      	subs	r3, #40	; 0x28
    5332:	409a      	lsls	r2, r3
    5334:	2300      	movs	r3, #0
    5336:	4691      	mov	r9, r2
    5338:	4698      	mov	r8, r3
    533a:	e657      	b.n	4fec <__aeabi_ddiv+0xfc>
    533c:	4658      	mov	r0, fp
    533e:	f000 fce3 	bl	5d08 <__clzsi2>
    5342:	3020      	adds	r0, #32
    5344:	e640      	b.n	4fc8 <__aeabi_ddiv+0xd8>
    5346:	0003      	movs	r3, r0
    5348:	4652      	mov	r2, sl
    534a:	3b28      	subs	r3, #40	; 0x28
    534c:	409a      	lsls	r2, r3
    534e:	2100      	movs	r1, #0
    5350:	4693      	mov	fp, r2
    5352:	e677      	b.n	5044 <__aeabi_ddiv+0x154>
    5354:	f000 fcd8 	bl	5d08 <__clzsi2>
    5358:	3020      	adds	r0, #32
    535a:	e65f      	b.n	501c <__aeabi_ddiv+0x12c>
    535c:	4588      	cmp	r8, r1
    535e:	d200      	bcs.n	5362 <__aeabi_ddiv+0x472>
    5360:	e6c7      	b.n	50f2 <__aeabi_ddiv+0x202>
    5362:	464b      	mov	r3, r9
    5364:	07de      	lsls	r6, r3, #31
    5366:	085d      	lsrs	r5, r3, #1
    5368:	4643      	mov	r3, r8
    536a:	085b      	lsrs	r3, r3, #1
    536c:	431e      	orrs	r6, r3
    536e:	4643      	mov	r3, r8
    5370:	07db      	lsls	r3, r3, #31
    5372:	469a      	mov	sl, r3
    5374:	e6c2      	b.n	50fc <__aeabi_ddiv+0x20c>
    5376:	2500      	movs	r5, #0
    5378:	4592      	cmp	sl, r2
    537a:	d300      	bcc.n	537e <__aeabi_ddiv+0x48e>
    537c:	e733      	b.n	51e6 <__aeabi_ddiv+0x2f6>
    537e:	9e03      	ldr	r6, [sp, #12]
    5380:	4659      	mov	r1, fp
    5382:	46b4      	mov	ip, r6
    5384:	44e2      	add	sl, ip
    5386:	45b2      	cmp	sl, r6
    5388:	41ad      	sbcs	r5, r5
    538a:	426d      	negs	r5, r5
    538c:	4445      	add	r5, r8
    538e:	18eb      	adds	r3, r5, r3
    5390:	3901      	subs	r1, #1
    5392:	4598      	cmp	r8, r3
    5394:	d207      	bcs.n	53a6 <__aeabi_ddiv+0x4b6>
    5396:	4298      	cmp	r0, r3
    5398:	d900      	bls.n	539c <__aeabi_ddiv+0x4ac>
    539a:	e07f      	b.n	549c <__aeabi_ddiv+0x5ac>
    539c:	d100      	bne.n	53a0 <__aeabi_ddiv+0x4b0>
    539e:	e0bc      	b.n	551a <__aeabi_ddiv+0x62a>
    53a0:	1a1d      	subs	r5, r3, r0
    53a2:	468b      	mov	fp, r1
    53a4:	e71f      	b.n	51e6 <__aeabi_ddiv+0x2f6>
    53a6:	4598      	cmp	r8, r3
    53a8:	d1fa      	bne.n	53a0 <__aeabi_ddiv+0x4b0>
    53aa:	9d03      	ldr	r5, [sp, #12]
    53ac:	4555      	cmp	r5, sl
    53ae:	d9f2      	bls.n	5396 <__aeabi_ddiv+0x4a6>
    53b0:	4643      	mov	r3, r8
    53b2:	468b      	mov	fp, r1
    53b4:	1a1d      	subs	r5, r3, r0
    53b6:	e716      	b.n	51e6 <__aeabi_ddiv+0x2f6>
    53b8:	469b      	mov	fp, r3
    53ba:	e6ca      	b.n	5152 <__aeabi_ddiv+0x262>
    53bc:	0015      	movs	r5, r2
    53be:	e6e7      	b.n	5190 <__aeabi_ddiv+0x2a0>
    53c0:	465a      	mov	r2, fp
    53c2:	08c9      	lsrs	r1, r1, #3
    53c4:	0752      	lsls	r2, r2, #29
    53c6:	430a      	orrs	r2, r1
    53c8:	055b      	lsls	r3, r3, #21
    53ca:	4690      	mov	r8, r2
    53cc:	0d5c      	lsrs	r4, r3, #21
    53ce:	465a      	mov	r2, fp
    53d0:	2301      	movs	r3, #1
    53d2:	9902      	ldr	r1, [sp, #8]
    53d4:	0252      	lsls	r2, r2, #9
    53d6:	4019      	ands	r1, r3
    53d8:	0b12      	lsrs	r2, r2, #12
    53da:	468c      	mov	ip, r1
    53dc:	e656      	b.n	508c <__aeabi_ddiv+0x19c>
    53de:	2b00      	cmp	r3, #0
    53e0:	d100      	bne.n	53e4 <__aeabi_ddiv+0x4f4>
    53e2:	e76f      	b.n	52c4 <__aeabi_ddiv+0x3d4>
    53e4:	4446      	add	r6, r8
    53e6:	1e4a      	subs	r2, r1, #1
    53e8:	45b0      	cmp	r8, r6
    53ea:	d929      	bls.n	5440 <__aeabi_ddiv+0x550>
    53ec:	0011      	movs	r1, r2
    53ee:	4286      	cmp	r6, r0
    53f0:	d000      	beq.n	53f4 <__aeabi_ddiv+0x504>
    53f2:	e765      	b.n	52c0 <__aeabi_ddiv+0x3d0>
    53f4:	9a03      	ldr	r2, [sp, #12]
    53f6:	4293      	cmp	r3, r2
    53f8:	d000      	beq.n	53fc <__aeabi_ddiv+0x50c>
    53fa:	e761      	b.n	52c0 <__aeabi_ddiv+0x3d0>
    53fc:	e762      	b.n	52c4 <__aeabi_ddiv+0x3d4>
    53fe:	2101      	movs	r1, #1
    5400:	4249      	negs	r1, r1
    5402:	2001      	movs	r0, #1
    5404:	1ac2      	subs	r2, r0, r3
    5406:	2a38      	cmp	r2, #56	; 0x38
    5408:	dd21      	ble.n	544e <__aeabi_ddiv+0x55e>
    540a:	9b02      	ldr	r3, [sp, #8]
    540c:	4003      	ands	r3, r0
    540e:	469c      	mov	ip, r3
    5410:	e638      	b.n	5084 <__aeabi_ddiv+0x194>
    5412:	220f      	movs	r2, #15
    5414:	400a      	ands	r2, r1
    5416:	2a04      	cmp	r2, #4
    5418:	d100      	bne.n	541c <__aeabi_ddiv+0x52c>
    541a:	e75b      	b.n	52d4 <__aeabi_ddiv+0x3e4>
    541c:	000a      	movs	r2, r1
    541e:	1d11      	adds	r1, r2, #4
    5420:	4291      	cmp	r1, r2
    5422:	4192      	sbcs	r2, r2
    5424:	4252      	negs	r2, r2
    5426:	4493      	add	fp, r2
    5428:	e754      	b.n	52d4 <__aeabi_ddiv+0x3e4>
    542a:	4b47      	ldr	r3, [pc, #284]	; (5548 <__aeabi_ddiv+0x658>)
    542c:	18e3      	adds	r3, r4, r3
    542e:	2b00      	cmp	r3, #0
    5430:	dde5      	ble.n	53fe <__aeabi_ddiv+0x50e>
    5432:	2201      	movs	r2, #1
    5434:	4252      	negs	r2, r2
    5436:	e7f2      	b.n	541e <__aeabi_ddiv+0x52e>
    5438:	001d      	movs	r5, r3
    543a:	e6fa      	b.n	5232 <__aeabi_ddiv+0x342>
    543c:	469a      	mov	sl, r3
    543e:	e71c      	b.n	527a <__aeabi_ddiv+0x38a>
    5440:	42b0      	cmp	r0, r6
    5442:	d839      	bhi.n	54b8 <__aeabi_ddiv+0x5c8>
    5444:	d06e      	beq.n	5524 <__aeabi_ddiv+0x634>
    5446:	0011      	movs	r1, r2
    5448:	e73a      	b.n	52c0 <__aeabi_ddiv+0x3d0>
    544a:	9302      	str	r3, [sp, #8]
    544c:	e73a      	b.n	52c4 <__aeabi_ddiv+0x3d4>
    544e:	2a1f      	cmp	r2, #31
    5450:	dc3c      	bgt.n	54cc <__aeabi_ddiv+0x5dc>
    5452:	2320      	movs	r3, #32
    5454:	1a9b      	subs	r3, r3, r2
    5456:	000c      	movs	r4, r1
    5458:	4658      	mov	r0, fp
    545a:	4099      	lsls	r1, r3
    545c:	4098      	lsls	r0, r3
    545e:	1e4b      	subs	r3, r1, #1
    5460:	4199      	sbcs	r1, r3
    5462:	465b      	mov	r3, fp
    5464:	40d4      	lsrs	r4, r2
    5466:	40d3      	lsrs	r3, r2
    5468:	4320      	orrs	r0, r4
    546a:	4308      	orrs	r0, r1
    546c:	001a      	movs	r2, r3
    546e:	0743      	lsls	r3, r0, #29
    5470:	d009      	beq.n	5486 <__aeabi_ddiv+0x596>
    5472:	230f      	movs	r3, #15
    5474:	4003      	ands	r3, r0
    5476:	2b04      	cmp	r3, #4
    5478:	d005      	beq.n	5486 <__aeabi_ddiv+0x596>
    547a:	0001      	movs	r1, r0
    547c:	1d08      	adds	r0, r1, #4
    547e:	4288      	cmp	r0, r1
    5480:	419b      	sbcs	r3, r3
    5482:	425b      	negs	r3, r3
    5484:	18d2      	adds	r2, r2, r3
    5486:	0213      	lsls	r3, r2, #8
    5488:	d53a      	bpl.n	5500 <__aeabi_ddiv+0x610>
    548a:	2301      	movs	r3, #1
    548c:	9a02      	ldr	r2, [sp, #8]
    548e:	2401      	movs	r4, #1
    5490:	401a      	ands	r2, r3
    5492:	2300      	movs	r3, #0
    5494:	4694      	mov	ip, r2
    5496:	4698      	mov	r8, r3
    5498:	2200      	movs	r2, #0
    549a:	e5f7      	b.n	508c <__aeabi_ddiv+0x19c>
    549c:	2102      	movs	r1, #2
    549e:	4249      	negs	r1, r1
    54a0:	468c      	mov	ip, r1
    54a2:	9d03      	ldr	r5, [sp, #12]
    54a4:	44e3      	add	fp, ip
    54a6:	46ac      	mov	ip, r5
    54a8:	44e2      	add	sl, ip
    54aa:	45aa      	cmp	sl, r5
    54ac:	41ad      	sbcs	r5, r5
    54ae:	426d      	negs	r5, r5
    54b0:	4445      	add	r5, r8
    54b2:	18ed      	adds	r5, r5, r3
    54b4:	1a2d      	subs	r5, r5, r0
    54b6:	e696      	b.n	51e6 <__aeabi_ddiv+0x2f6>
    54b8:	1e8a      	subs	r2, r1, #2
    54ba:	9903      	ldr	r1, [sp, #12]
    54bc:	004d      	lsls	r5, r1, #1
    54be:	428d      	cmp	r5, r1
    54c0:	4189      	sbcs	r1, r1
    54c2:	4249      	negs	r1, r1
    54c4:	4441      	add	r1, r8
    54c6:	1876      	adds	r6, r6, r1
    54c8:	9503      	str	r5, [sp, #12]
    54ca:	e78f      	b.n	53ec <__aeabi_ddiv+0x4fc>
    54cc:	201f      	movs	r0, #31
    54ce:	4240      	negs	r0, r0
    54d0:	1ac3      	subs	r3, r0, r3
    54d2:	4658      	mov	r0, fp
    54d4:	40d8      	lsrs	r0, r3
    54d6:	0003      	movs	r3, r0
    54d8:	2a20      	cmp	r2, #32
    54da:	d028      	beq.n	552e <__aeabi_ddiv+0x63e>
    54dc:	2040      	movs	r0, #64	; 0x40
    54de:	465d      	mov	r5, fp
    54e0:	1a82      	subs	r2, r0, r2
    54e2:	4095      	lsls	r5, r2
    54e4:	4329      	orrs	r1, r5
    54e6:	1e4a      	subs	r2, r1, #1
    54e8:	4191      	sbcs	r1, r2
    54ea:	4319      	orrs	r1, r3
    54ec:	2307      	movs	r3, #7
    54ee:	2200      	movs	r2, #0
    54f0:	400b      	ands	r3, r1
    54f2:	d009      	beq.n	5508 <__aeabi_ddiv+0x618>
    54f4:	230f      	movs	r3, #15
    54f6:	2200      	movs	r2, #0
    54f8:	400b      	ands	r3, r1
    54fa:	0008      	movs	r0, r1
    54fc:	2b04      	cmp	r3, #4
    54fe:	d1bd      	bne.n	547c <__aeabi_ddiv+0x58c>
    5500:	0001      	movs	r1, r0
    5502:	0753      	lsls	r3, r2, #29
    5504:	0252      	lsls	r2, r2, #9
    5506:	0b12      	lsrs	r2, r2, #12
    5508:	08c9      	lsrs	r1, r1, #3
    550a:	4319      	orrs	r1, r3
    550c:	2301      	movs	r3, #1
    550e:	4688      	mov	r8, r1
    5510:	9902      	ldr	r1, [sp, #8]
    5512:	2400      	movs	r4, #0
    5514:	4019      	ands	r1, r3
    5516:	468c      	mov	ip, r1
    5518:	e5b8      	b.n	508c <__aeabi_ddiv+0x19c>
    551a:	4552      	cmp	r2, sl
    551c:	d8be      	bhi.n	549c <__aeabi_ddiv+0x5ac>
    551e:	468b      	mov	fp, r1
    5520:	2500      	movs	r5, #0
    5522:	e660      	b.n	51e6 <__aeabi_ddiv+0x2f6>
    5524:	9d03      	ldr	r5, [sp, #12]
    5526:	429d      	cmp	r5, r3
    5528:	d3c6      	bcc.n	54b8 <__aeabi_ddiv+0x5c8>
    552a:	0011      	movs	r1, r2
    552c:	e762      	b.n	53f4 <__aeabi_ddiv+0x504>
    552e:	2500      	movs	r5, #0
    5530:	e7d8      	b.n	54e4 <__aeabi_ddiv+0x5f4>
    5532:	2280      	movs	r2, #128	; 0x80
    5534:	465b      	mov	r3, fp
    5536:	0312      	lsls	r2, r2, #12
    5538:	431a      	orrs	r2, r3
    553a:	9b01      	ldr	r3, [sp, #4]
    553c:	0312      	lsls	r2, r2, #12
    553e:	0b12      	lsrs	r2, r2, #12
    5540:	469c      	mov	ip, r3
    5542:	4688      	mov	r8, r1
    5544:	4c03      	ldr	r4, [pc, #12]	; (5554 <__aeabi_ddiv+0x664>)
    5546:	e5a1      	b.n	508c <__aeabi_ddiv+0x19c>
    5548:	000003ff 	.word	0x000003ff
    554c:	feffffff 	.word	0xfeffffff
    5550:	000007fe 	.word	0x000007fe
    5554:	000007ff 	.word	0x000007ff

00005558 <__aeabi_dmul>:
    5558:	b5f0      	push	{r4, r5, r6, r7, lr}
    555a:	4657      	mov	r7, sl
    555c:	4645      	mov	r5, r8
    555e:	46de      	mov	lr, fp
    5560:	464e      	mov	r6, r9
    5562:	b5e0      	push	{r5, r6, r7, lr}
    5564:	030c      	lsls	r4, r1, #12
    5566:	4698      	mov	r8, r3
    5568:	004e      	lsls	r6, r1, #1
    556a:	0b23      	lsrs	r3, r4, #12
    556c:	b087      	sub	sp, #28
    556e:	0007      	movs	r7, r0
    5570:	4692      	mov	sl, r2
    5572:	469b      	mov	fp, r3
    5574:	0d76      	lsrs	r6, r6, #21
    5576:	0fcd      	lsrs	r5, r1, #31
    5578:	2e00      	cmp	r6, #0
    557a:	d06b      	beq.n	5654 <__aeabi_dmul+0xfc>
    557c:	4b6d      	ldr	r3, [pc, #436]	; (5734 <__aeabi_dmul+0x1dc>)
    557e:	429e      	cmp	r6, r3
    5580:	d035      	beq.n	55ee <__aeabi_dmul+0x96>
    5582:	2480      	movs	r4, #128	; 0x80
    5584:	465b      	mov	r3, fp
    5586:	0f42      	lsrs	r2, r0, #29
    5588:	0424      	lsls	r4, r4, #16
    558a:	00db      	lsls	r3, r3, #3
    558c:	4314      	orrs	r4, r2
    558e:	431c      	orrs	r4, r3
    5590:	00c3      	lsls	r3, r0, #3
    5592:	4699      	mov	r9, r3
    5594:	4b68      	ldr	r3, [pc, #416]	; (5738 <__aeabi_dmul+0x1e0>)
    5596:	46a3      	mov	fp, r4
    5598:	469c      	mov	ip, r3
    559a:	2300      	movs	r3, #0
    559c:	2700      	movs	r7, #0
    559e:	4466      	add	r6, ip
    55a0:	9302      	str	r3, [sp, #8]
    55a2:	4643      	mov	r3, r8
    55a4:	031c      	lsls	r4, r3, #12
    55a6:	005a      	lsls	r2, r3, #1
    55a8:	0fdb      	lsrs	r3, r3, #31
    55aa:	4650      	mov	r0, sl
    55ac:	0b24      	lsrs	r4, r4, #12
    55ae:	0d52      	lsrs	r2, r2, #21
    55b0:	4698      	mov	r8, r3
    55b2:	d100      	bne.n	55b6 <__aeabi_dmul+0x5e>
    55b4:	e076      	b.n	56a4 <__aeabi_dmul+0x14c>
    55b6:	4b5f      	ldr	r3, [pc, #380]	; (5734 <__aeabi_dmul+0x1dc>)
    55b8:	429a      	cmp	r2, r3
    55ba:	d06d      	beq.n	5698 <__aeabi_dmul+0x140>
    55bc:	2380      	movs	r3, #128	; 0x80
    55be:	0f41      	lsrs	r1, r0, #29
    55c0:	041b      	lsls	r3, r3, #16
    55c2:	430b      	orrs	r3, r1
    55c4:	495c      	ldr	r1, [pc, #368]	; (5738 <__aeabi_dmul+0x1e0>)
    55c6:	00e4      	lsls	r4, r4, #3
    55c8:	468c      	mov	ip, r1
    55ca:	431c      	orrs	r4, r3
    55cc:	00c3      	lsls	r3, r0, #3
    55ce:	2000      	movs	r0, #0
    55d0:	4462      	add	r2, ip
    55d2:	4641      	mov	r1, r8
    55d4:	18b6      	adds	r6, r6, r2
    55d6:	4069      	eors	r1, r5
    55d8:	1c72      	adds	r2, r6, #1
    55da:	9101      	str	r1, [sp, #4]
    55dc:	4694      	mov	ip, r2
    55de:	4307      	orrs	r7, r0
    55e0:	2f0f      	cmp	r7, #15
    55e2:	d900      	bls.n	55e6 <__aeabi_dmul+0x8e>
    55e4:	e0b0      	b.n	5748 <__aeabi_dmul+0x1f0>
    55e6:	4a55      	ldr	r2, [pc, #340]	; (573c <__aeabi_dmul+0x1e4>)
    55e8:	00bf      	lsls	r7, r7, #2
    55ea:	59d2      	ldr	r2, [r2, r7]
    55ec:	4697      	mov	pc, r2
    55ee:	465b      	mov	r3, fp
    55f0:	4303      	orrs	r3, r0
    55f2:	4699      	mov	r9, r3
    55f4:	d000      	beq.n	55f8 <__aeabi_dmul+0xa0>
    55f6:	e087      	b.n	5708 <__aeabi_dmul+0x1b0>
    55f8:	2300      	movs	r3, #0
    55fa:	469b      	mov	fp, r3
    55fc:	3302      	adds	r3, #2
    55fe:	2708      	movs	r7, #8
    5600:	9302      	str	r3, [sp, #8]
    5602:	e7ce      	b.n	55a2 <__aeabi_dmul+0x4a>
    5604:	4642      	mov	r2, r8
    5606:	9201      	str	r2, [sp, #4]
    5608:	2802      	cmp	r0, #2
    560a:	d067      	beq.n	56dc <__aeabi_dmul+0x184>
    560c:	2803      	cmp	r0, #3
    560e:	d100      	bne.n	5612 <__aeabi_dmul+0xba>
    5610:	e20e      	b.n	5a30 <__aeabi_dmul+0x4d8>
    5612:	2801      	cmp	r0, #1
    5614:	d000      	beq.n	5618 <__aeabi_dmul+0xc0>
    5616:	e162      	b.n	58de <__aeabi_dmul+0x386>
    5618:	2300      	movs	r3, #0
    561a:	2400      	movs	r4, #0
    561c:	2200      	movs	r2, #0
    561e:	4699      	mov	r9, r3
    5620:	9901      	ldr	r1, [sp, #4]
    5622:	4001      	ands	r1, r0
    5624:	b2cd      	uxtb	r5, r1
    5626:	2100      	movs	r1, #0
    5628:	0312      	lsls	r2, r2, #12
    562a:	0d0b      	lsrs	r3, r1, #20
    562c:	0b12      	lsrs	r2, r2, #12
    562e:	051b      	lsls	r3, r3, #20
    5630:	4313      	orrs	r3, r2
    5632:	4a43      	ldr	r2, [pc, #268]	; (5740 <__aeabi_dmul+0x1e8>)
    5634:	0524      	lsls	r4, r4, #20
    5636:	4013      	ands	r3, r2
    5638:	431c      	orrs	r4, r3
    563a:	0064      	lsls	r4, r4, #1
    563c:	07ed      	lsls	r5, r5, #31
    563e:	0864      	lsrs	r4, r4, #1
    5640:	432c      	orrs	r4, r5
    5642:	4648      	mov	r0, r9
    5644:	0021      	movs	r1, r4
    5646:	b007      	add	sp, #28
    5648:	bc3c      	pop	{r2, r3, r4, r5}
    564a:	4690      	mov	r8, r2
    564c:	4699      	mov	r9, r3
    564e:	46a2      	mov	sl, r4
    5650:	46ab      	mov	fp, r5
    5652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5654:	4303      	orrs	r3, r0
    5656:	4699      	mov	r9, r3
    5658:	d04f      	beq.n	56fa <__aeabi_dmul+0x1a2>
    565a:	465b      	mov	r3, fp
    565c:	2b00      	cmp	r3, #0
    565e:	d100      	bne.n	5662 <__aeabi_dmul+0x10a>
    5660:	e189      	b.n	5976 <__aeabi_dmul+0x41e>
    5662:	4658      	mov	r0, fp
    5664:	f000 fb50 	bl	5d08 <__clzsi2>
    5668:	0003      	movs	r3, r0
    566a:	3b0b      	subs	r3, #11
    566c:	2b1c      	cmp	r3, #28
    566e:	dd00      	ble.n	5672 <__aeabi_dmul+0x11a>
    5670:	e17a      	b.n	5968 <__aeabi_dmul+0x410>
    5672:	221d      	movs	r2, #29
    5674:	1ad3      	subs	r3, r2, r3
    5676:	003a      	movs	r2, r7
    5678:	0001      	movs	r1, r0
    567a:	465c      	mov	r4, fp
    567c:	40da      	lsrs	r2, r3
    567e:	3908      	subs	r1, #8
    5680:	408c      	lsls	r4, r1
    5682:	0013      	movs	r3, r2
    5684:	408f      	lsls	r7, r1
    5686:	4323      	orrs	r3, r4
    5688:	469b      	mov	fp, r3
    568a:	46b9      	mov	r9, r7
    568c:	2300      	movs	r3, #0
    568e:	4e2d      	ldr	r6, [pc, #180]	; (5744 <__aeabi_dmul+0x1ec>)
    5690:	2700      	movs	r7, #0
    5692:	1a36      	subs	r6, r6, r0
    5694:	9302      	str	r3, [sp, #8]
    5696:	e784      	b.n	55a2 <__aeabi_dmul+0x4a>
    5698:	4653      	mov	r3, sl
    569a:	4323      	orrs	r3, r4
    569c:	d12a      	bne.n	56f4 <__aeabi_dmul+0x19c>
    569e:	2400      	movs	r4, #0
    56a0:	2002      	movs	r0, #2
    56a2:	e796      	b.n	55d2 <__aeabi_dmul+0x7a>
    56a4:	4653      	mov	r3, sl
    56a6:	4323      	orrs	r3, r4
    56a8:	d020      	beq.n	56ec <__aeabi_dmul+0x194>
    56aa:	2c00      	cmp	r4, #0
    56ac:	d100      	bne.n	56b0 <__aeabi_dmul+0x158>
    56ae:	e157      	b.n	5960 <__aeabi_dmul+0x408>
    56b0:	0020      	movs	r0, r4
    56b2:	f000 fb29 	bl	5d08 <__clzsi2>
    56b6:	0003      	movs	r3, r0
    56b8:	3b0b      	subs	r3, #11
    56ba:	2b1c      	cmp	r3, #28
    56bc:	dd00      	ble.n	56c0 <__aeabi_dmul+0x168>
    56be:	e149      	b.n	5954 <__aeabi_dmul+0x3fc>
    56c0:	211d      	movs	r1, #29
    56c2:	1acb      	subs	r3, r1, r3
    56c4:	4651      	mov	r1, sl
    56c6:	0002      	movs	r2, r0
    56c8:	40d9      	lsrs	r1, r3
    56ca:	4653      	mov	r3, sl
    56cc:	3a08      	subs	r2, #8
    56ce:	4094      	lsls	r4, r2
    56d0:	4093      	lsls	r3, r2
    56d2:	430c      	orrs	r4, r1
    56d4:	4a1b      	ldr	r2, [pc, #108]	; (5744 <__aeabi_dmul+0x1ec>)
    56d6:	1a12      	subs	r2, r2, r0
    56d8:	2000      	movs	r0, #0
    56da:	e77a      	b.n	55d2 <__aeabi_dmul+0x7a>
    56dc:	2501      	movs	r5, #1
    56de:	9b01      	ldr	r3, [sp, #4]
    56e0:	4c14      	ldr	r4, [pc, #80]	; (5734 <__aeabi_dmul+0x1dc>)
    56e2:	401d      	ands	r5, r3
    56e4:	2300      	movs	r3, #0
    56e6:	2200      	movs	r2, #0
    56e8:	4699      	mov	r9, r3
    56ea:	e79c      	b.n	5626 <__aeabi_dmul+0xce>
    56ec:	2400      	movs	r4, #0
    56ee:	2200      	movs	r2, #0
    56f0:	2001      	movs	r0, #1
    56f2:	e76e      	b.n	55d2 <__aeabi_dmul+0x7a>
    56f4:	4653      	mov	r3, sl
    56f6:	2003      	movs	r0, #3
    56f8:	e76b      	b.n	55d2 <__aeabi_dmul+0x7a>
    56fa:	2300      	movs	r3, #0
    56fc:	469b      	mov	fp, r3
    56fe:	3301      	adds	r3, #1
    5700:	2704      	movs	r7, #4
    5702:	2600      	movs	r6, #0
    5704:	9302      	str	r3, [sp, #8]
    5706:	e74c      	b.n	55a2 <__aeabi_dmul+0x4a>
    5708:	2303      	movs	r3, #3
    570a:	4681      	mov	r9, r0
    570c:	270c      	movs	r7, #12
    570e:	9302      	str	r3, [sp, #8]
    5710:	e747      	b.n	55a2 <__aeabi_dmul+0x4a>
    5712:	2280      	movs	r2, #128	; 0x80
    5714:	2300      	movs	r3, #0
    5716:	2500      	movs	r5, #0
    5718:	0312      	lsls	r2, r2, #12
    571a:	4699      	mov	r9, r3
    571c:	4c05      	ldr	r4, [pc, #20]	; (5734 <__aeabi_dmul+0x1dc>)
    571e:	e782      	b.n	5626 <__aeabi_dmul+0xce>
    5720:	465c      	mov	r4, fp
    5722:	464b      	mov	r3, r9
    5724:	9802      	ldr	r0, [sp, #8]
    5726:	e76f      	b.n	5608 <__aeabi_dmul+0xb0>
    5728:	465c      	mov	r4, fp
    572a:	464b      	mov	r3, r9
    572c:	9501      	str	r5, [sp, #4]
    572e:	9802      	ldr	r0, [sp, #8]
    5730:	e76a      	b.n	5608 <__aeabi_dmul+0xb0>
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	000007ff 	.word	0x000007ff
    5738:	fffffc01 	.word	0xfffffc01
    573c:	000061d4 	.word	0x000061d4
    5740:	800fffff 	.word	0x800fffff
    5744:	fffffc0d 	.word	0xfffffc0d
    5748:	464a      	mov	r2, r9
    574a:	4649      	mov	r1, r9
    574c:	0c17      	lsrs	r7, r2, #16
    574e:	0c1a      	lsrs	r2, r3, #16
    5750:	041b      	lsls	r3, r3, #16
    5752:	0c1b      	lsrs	r3, r3, #16
    5754:	0408      	lsls	r0, r1, #16
    5756:	0019      	movs	r1, r3
    5758:	0c00      	lsrs	r0, r0, #16
    575a:	4341      	muls	r1, r0
    575c:	0015      	movs	r5, r2
    575e:	4688      	mov	r8, r1
    5760:	0019      	movs	r1, r3
    5762:	437d      	muls	r5, r7
    5764:	4379      	muls	r1, r7
    5766:	9503      	str	r5, [sp, #12]
    5768:	4689      	mov	r9, r1
    576a:	0029      	movs	r1, r5
    576c:	0015      	movs	r5, r2
    576e:	4345      	muls	r5, r0
    5770:	444d      	add	r5, r9
    5772:	9502      	str	r5, [sp, #8]
    5774:	4645      	mov	r5, r8
    5776:	0c2d      	lsrs	r5, r5, #16
    5778:	46aa      	mov	sl, r5
    577a:	9d02      	ldr	r5, [sp, #8]
    577c:	4455      	add	r5, sl
    577e:	45a9      	cmp	r9, r5
    5780:	d906      	bls.n	5790 <__aeabi_dmul+0x238>
    5782:	468a      	mov	sl, r1
    5784:	2180      	movs	r1, #128	; 0x80
    5786:	0249      	lsls	r1, r1, #9
    5788:	4689      	mov	r9, r1
    578a:	44ca      	add	sl, r9
    578c:	4651      	mov	r1, sl
    578e:	9103      	str	r1, [sp, #12]
    5790:	0c29      	lsrs	r1, r5, #16
    5792:	9104      	str	r1, [sp, #16]
    5794:	4641      	mov	r1, r8
    5796:	0409      	lsls	r1, r1, #16
    5798:	042d      	lsls	r5, r5, #16
    579a:	0c09      	lsrs	r1, r1, #16
    579c:	4688      	mov	r8, r1
    579e:	0029      	movs	r1, r5
    57a0:	0c25      	lsrs	r5, r4, #16
    57a2:	0424      	lsls	r4, r4, #16
    57a4:	4441      	add	r1, r8
    57a6:	0c24      	lsrs	r4, r4, #16
    57a8:	9105      	str	r1, [sp, #20]
    57aa:	0021      	movs	r1, r4
    57ac:	4341      	muls	r1, r0
    57ae:	4688      	mov	r8, r1
    57b0:	0021      	movs	r1, r4
    57b2:	4379      	muls	r1, r7
    57b4:	468a      	mov	sl, r1
    57b6:	4368      	muls	r0, r5
    57b8:	4641      	mov	r1, r8
    57ba:	4450      	add	r0, sl
    57bc:	4681      	mov	r9, r0
    57be:	0c08      	lsrs	r0, r1, #16
    57c0:	4448      	add	r0, r9
    57c2:	436f      	muls	r7, r5
    57c4:	4582      	cmp	sl, r0
    57c6:	d903      	bls.n	57d0 <__aeabi_dmul+0x278>
    57c8:	2180      	movs	r1, #128	; 0x80
    57ca:	0249      	lsls	r1, r1, #9
    57cc:	4689      	mov	r9, r1
    57ce:	444f      	add	r7, r9
    57d0:	0c01      	lsrs	r1, r0, #16
    57d2:	4689      	mov	r9, r1
    57d4:	0039      	movs	r1, r7
    57d6:	4449      	add	r1, r9
    57d8:	9102      	str	r1, [sp, #8]
    57da:	4641      	mov	r1, r8
    57dc:	040f      	lsls	r7, r1, #16
    57de:	9904      	ldr	r1, [sp, #16]
    57e0:	0c3f      	lsrs	r7, r7, #16
    57e2:	4688      	mov	r8, r1
    57e4:	0400      	lsls	r0, r0, #16
    57e6:	19c0      	adds	r0, r0, r7
    57e8:	4480      	add	r8, r0
    57ea:	4641      	mov	r1, r8
    57ec:	9104      	str	r1, [sp, #16]
    57ee:	4659      	mov	r1, fp
    57f0:	0c0f      	lsrs	r7, r1, #16
    57f2:	0409      	lsls	r1, r1, #16
    57f4:	0c09      	lsrs	r1, r1, #16
    57f6:	4688      	mov	r8, r1
    57f8:	4359      	muls	r1, r3
    57fa:	468a      	mov	sl, r1
    57fc:	0039      	movs	r1, r7
    57fe:	4351      	muls	r1, r2
    5800:	4689      	mov	r9, r1
    5802:	4641      	mov	r1, r8
    5804:	434a      	muls	r2, r1
    5806:	4651      	mov	r1, sl
    5808:	0c09      	lsrs	r1, r1, #16
    580a:	468b      	mov	fp, r1
    580c:	437b      	muls	r3, r7
    580e:	18d2      	adds	r2, r2, r3
    5810:	445a      	add	r2, fp
    5812:	4293      	cmp	r3, r2
    5814:	d903      	bls.n	581e <__aeabi_dmul+0x2c6>
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	025b      	lsls	r3, r3, #9
    581a:	469b      	mov	fp, r3
    581c:	44d9      	add	r9, fp
    581e:	4651      	mov	r1, sl
    5820:	0409      	lsls	r1, r1, #16
    5822:	0c09      	lsrs	r1, r1, #16
    5824:	468a      	mov	sl, r1
    5826:	4641      	mov	r1, r8
    5828:	4361      	muls	r1, r4
    582a:	437c      	muls	r4, r7
    582c:	0c13      	lsrs	r3, r2, #16
    582e:	0412      	lsls	r2, r2, #16
    5830:	444b      	add	r3, r9
    5832:	4452      	add	r2, sl
    5834:	46a1      	mov	r9, r4
    5836:	468a      	mov	sl, r1
    5838:	003c      	movs	r4, r7
    583a:	4641      	mov	r1, r8
    583c:	436c      	muls	r4, r5
    583e:	434d      	muls	r5, r1
    5840:	4651      	mov	r1, sl
    5842:	444d      	add	r5, r9
    5844:	0c0f      	lsrs	r7, r1, #16
    5846:	197d      	adds	r5, r7, r5
    5848:	45a9      	cmp	r9, r5
    584a:	d903      	bls.n	5854 <__aeabi_dmul+0x2fc>
    584c:	2180      	movs	r1, #128	; 0x80
    584e:	0249      	lsls	r1, r1, #9
    5850:	4688      	mov	r8, r1
    5852:	4444      	add	r4, r8
    5854:	9f04      	ldr	r7, [sp, #16]
    5856:	9903      	ldr	r1, [sp, #12]
    5858:	46b8      	mov	r8, r7
    585a:	4441      	add	r1, r8
    585c:	468b      	mov	fp, r1
    585e:	4583      	cmp	fp, r0
    5860:	4180      	sbcs	r0, r0
    5862:	4241      	negs	r1, r0
    5864:	4688      	mov	r8, r1
    5866:	4651      	mov	r1, sl
    5868:	0408      	lsls	r0, r1, #16
    586a:	042f      	lsls	r7, r5, #16
    586c:	0c00      	lsrs	r0, r0, #16
    586e:	183f      	adds	r7, r7, r0
    5870:	4658      	mov	r0, fp
    5872:	9902      	ldr	r1, [sp, #8]
    5874:	1810      	adds	r0, r2, r0
    5876:	4689      	mov	r9, r1
    5878:	4290      	cmp	r0, r2
    587a:	4192      	sbcs	r2, r2
    587c:	444f      	add	r7, r9
    587e:	46ba      	mov	sl, r7
    5880:	4252      	negs	r2, r2
    5882:	4699      	mov	r9, r3
    5884:	4693      	mov	fp, r2
    5886:	44c2      	add	sl, r8
    5888:	44d1      	add	r9, sl
    588a:	44cb      	add	fp, r9
    588c:	428f      	cmp	r7, r1
    588e:	41bf      	sbcs	r7, r7
    5890:	45c2      	cmp	sl, r8
    5892:	4189      	sbcs	r1, r1
    5894:	4599      	cmp	r9, r3
    5896:	419b      	sbcs	r3, r3
    5898:	4593      	cmp	fp, r2
    589a:	4192      	sbcs	r2, r2
    589c:	427f      	negs	r7, r7
    589e:	4249      	negs	r1, r1
    58a0:	0c2d      	lsrs	r5, r5, #16
    58a2:	4252      	negs	r2, r2
    58a4:	430f      	orrs	r7, r1
    58a6:	425b      	negs	r3, r3
    58a8:	4313      	orrs	r3, r2
    58aa:	197f      	adds	r7, r7, r5
    58ac:	18ff      	adds	r7, r7, r3
    58ae:	465b      	mov	r3, fp
    58b0:	193c      	adds	r4, r7, r4
    58b2:	0ddb      	lsrs	r3, r3, #23
    58b4:	9a05      	ldr	r2, [sp, #20]
    58b6:	0264      	lsls	r4, r4, #9
    58b8:	431c      	orrs	r4, r3
    58ba:	0243      	lsls	r3, r0, #9
    58bc:	4313      	orrs	r3, r2
    58be:	1e5d      	subs	r5, r3, #1
    58c0:	41ab      	sbcs	r3, r5
    58c2:	465a      	mov	r2, fp
    58c4:	0dc0      	lsrs	r0, r0, #23
    58c6:	4303      	orrs	r3, r0
    58c8:	0252      	lsls	r2, r2, #9
    58ca:	4313      	orrs	r3, r2
    58cc:	01e2      	lsls	r2, r4, #7
    58ce:	d556      	bpl.n	597e <__aeabi_dmul+0x426>
    58d0:	2001      	movs	r0, #1
    58d2:	085a      	lsrs	r2, r3, #1
    58d4:	4003      	ands	r3, r0
    58d6:	4313      	orrs	r3, r2
    58d8:	07e2      	lsls	r2, r4, #31
    58da:	4313      	orrs	r3, r2
    58dc:	0864      	lsrs	r4, r4, #1
    58de:	485a      	ldr	r0, [pc, #360]	; (5a48 <__aeabi_dmul+0x4f0>)
    58e0:	4460      	add	r0, ip
    58e2:	2800      	cmp	r0, #0
    58e4:	dd4d      	ble.n	5982 <__aeabi_dmul+0x42a>
    58e6:	075a      	lsls	r2, r3, #29
    58e8:	d009      	beq.n	58fe <__aeabi_dmul+0x3a6>
    58ea:	220f      	movs	r2, #15
    58ec:	401a      	ands	r2, r3
    58ee:	2a04      	cmp	r2, #4
    58f0:	d005      	beq.n	58fe <__aeabi_dmul+0x3a6>
    58f2:	1d1a      	adds	r2, r3, #4
    58f4:	429a      	cmp	r2, r3
    58f6:	419b      	sbcs	r3, r3
    58f8:	425b      	negs	r3, r3
    58fa:	18e4      	adds	r4, r4, r3
    58fc:	0013      	movs	r3, r2
    58fe:	01e2      	lsls	r2, r4, #7
    5900:	d504      	bpl.n	590c <__aeabi_dmul+0x3b4>
    5902:	2080      	movs	r0, #128	; 0x80
    5904:	4a51      	ldr	r2, [pc, #324]	; (5a4c <__aeabi_dmul+0x4f4>)
    5906:	00c0      	lsls	r0, r0, #3
    5908:	4014      	ands	r4, r2
    590a:	4460      	add	r0, ip
    590c:	4a50      	ldr	r2, [pc, #320]	; (5a50 <__aeabi_dmul+0x4f8>)
    590e:	4290      	cmp	r0, r2
    5910:	dd00      	ble.n	5914 <__aeabi_dmul+0x3bc>
    5912:	e6e3      	b.n	56dc <__aeabi_dmul+0x184>
    5914:	2501      	movs	r5, #1
    5916:	08db      	lsrs	r3, r3, #3
    5918:	0762      	lsls	r2, r4, #29
    591a:	431a      	orrs	r2, r3
    591c:	0264      	lsls	r4, r4, #9
    591e:	9b01      	ldr	r3, [sp, #4]
    5920:	4691      	mov	r9, r2
    5922:	0b22      	lsrs	r2, r4, #12
    5924:	0544      	lsls	r4, r0, #21
    5926:	0d64      	lsrs	r4, r4, #21
    5928:	401d      	ands	r5, r3
    592a:	e67c      	b.n	5626 <__aeabi_dmul+0xce>
    592c:	2280      	movs	r2, #128	; 0x80
    592e:	4659      	mov	r1, fp
    5930:	0312      	lsls	r2, r2, #12
    5932:	4211      	tst	r1, r2
    5934:	d008      	beq.n	5948 <__aeabi_dmul+0x3f0>
    5936:	4214      	tst	r4, r2
    5938:	d106      	bne.n	5948 <__aeabi_dmul+0x3f0>
    593a:	4322      	orrs	r2, r4
    593c:	0312      	lsls	r2, r2, #12
    593e:	0b12      	lsrs	r2, r2, #12
    5940:	4645      	mov	r5, r8
    5942:	4699      	mov	r9, r3
    5944:	4c43      	ldr	r4, [pc, #268]	; (5a54 <__aeabi_dmul+0x4fc>)
    5946:	e66e      	b.n	5626 <__aeabi_dmul+0xce>
    5948:	465b      	mov	r3, fp
    594a:	431a      	orrs	r2, r3
    594c:	0312      	lsls	r2, r2, #12
    594e:	0b12      	lsrs	r2, r2, #12
    5950:	4c40      	ldr	r4, [pc, #256]	; (5a54 <__aeabi_dmul+0x4fc>)
    5952:	e668      	b.n	5626 <__aeabi_dmul+0xce>
    5954:	0003      	movs	r3, r0
    5956:	4654      	mov	r4, sl
    5958:	3b28      	subs	r3, #40	; 0x28
    595a:	409c      	lsls	r4, r3
    595c:	2300      	movs	r3, #0
    595e:	e6b9      	b.n	56d4 <__aeabi_dmul+0x17c>
    5960:	f000 f9d2 	bl	5d08 <__clzsi2>
    5964:	3020      	adds	r0, #32
    5966:	e6a6      	b.n	56b6 <__aeabi_dmul+0x15e>
    5968:	0003      	movs	r3, r0
    596a:	3b28      	subs	r3, #40	; 0x28
    596c:	409f      	lsls	r7, r3
    596e:	2300      	movs	r3, #0
    5970:	46bb      	mov	fp, r7
    5972:	4699      	mov	r9, r3
    5974:	e68a      	b.n	568c <__aeabi_dmul+0x134>
    5976:	f000 f9c7 	bl	5d08 <__clzsi2>
    597a:	3020      	adds	r0, #32
    597c:	e674      	b.n	5668 <__aeabi_dmul+0x110>
    597e:	46b4      	mov	ip, r6
    5980:	e7ad      	b.n	58de <__aeabi_dmul+0x386>
    5982:	2501      	movs	r5, #1
    5984:	1a2a      	subs	r2, r5, r0
    5986:	2a38      	cmp	r2, #56	; 0x38
    5988:	dd06      	ble.n	5998 <__aeabi_dmul+0x440>
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	2400      	movs	r4, #0
    598e:	401d      	ands	r5, r3
    5990:	2300      	movs	r3, #0
    5992:	2200      	movs	r2, #0
    5994:	4699      	mov	r9, r3
    5996:	e646      	b.n	5626 <__aeabi_dmul+0xce>
    5998:	2a1f      	cmp	r2, #31
    599a:	dc21      	bgt.n	59e0 <__aeabi_dmul+0x488>
    599c:	2520      	movs	r5, #32
    599e:	0020      	movs	r0, r4
    59a0:	1aad      	subs	r5, r5, r2
    59a2:	001e      	movs	r6, r3
    59a4:	40ab      	lsls	r3, r5
    59a6:	40a8      	lsls	r0, r5
    59a8:	40d6      	lsrs	r6, r2
    59aa:	1e5d      	subs	r5, r3, #1
    59ac:	41ab      	sbcs	r3, r5
    59ae:	4330      	orrs	r0, r6
    59b0:	4318      	orrs	r0, r3
    59b2:	40d4      	lsrs	r4, r2
    59b4:	0743      	lsls	r3, r0, #29
    59b6:	d009      	beq.n	59cc <__aeabi_dmul+0x474>
    59b8:	230f      	movs	r3, #15
    59ba:	4003      	ands	r3, r0
    59bc:	2b04      	cmp	r3, #4
    59be:	d005      	beq.n	59cc <__aeabi_dmul+0x474>
    59c0:	0003      	movs	r3, r0
    59c2:	1d18      	adds	r0, r3, #4
    59c4:	4298      	cmp	r0, r3
    59c6:	419b      	sbcs	r3, r3
    59c8:	425b      	negs	r3, r3
    59ca:	18e4      	adds	r4, r4, r3
    59cc:	0223      	lsls	r3, r4, #8
    59ce:	d521      	bpl.n	5a14 <__aeabi_dmul+0x4bc>
    59d0:	2501      	movs	r5, #1
    59d2:	9b01      	ldr	r3, [sp, #4]
    59d4:	2401      	movs	r4, #1
    59d6:	401d      	ands	r5, r3
    59d8:	2300      	movs	r3, #0
    59da:	2200      	movs	r2, #0
    59dc:	4699      	mov	r9, r3
    59de:	e622      	b.n	5626 <__aeabi_dmul+0xce>
    59e0:	251f      	movs	r5, #31
    59e2:	0021      	movs	r1, r4
    59e4:	426d      	negs	r5, r5
    59e6:	1a28      	subs	r0, r5, r0
    59e8:	40c1      	lsrs	r1, r0
    59ea:	0008      	movs	r0, r1
    59ec:	2a20      	cmp	r2, #32
    59ee:	d01d      	beq.n	5a2c <__aeabi_dmul+0x4d4>
    59f0:	355f      	adds	r5, #95	; 0x5f
    59f2:	1aaa      	subs	r2, r5, r2
    59f4:	4094      	lsls	r4, r2
    59f6:	4323      	orrs	r3, r4
    59f8:	1e5c      	subs	r4, r3, #1
    59fa:	41a3      	sbcs	r3, r4
    59fc:	2507      	movs	r5, #7
    59fe:	4303      	orrs	r3, r0
    5a00:	401d      	ands	r5, r3
    5a02:	2200      	movs	r2, #0
    5a04:	2d00      	cmp	r5, #0
    5a06:	d009      	beq.n	5a1c <__aeabi_dmul+0x4c4>
    5a08:	220f      	movs	r2, #15
    5a0a:	2400      	movs	r4, #0
    5a0c:	401a      	ands	r2, r3
    5a0e:	0018      	movs	r0, r3
    5a10:	2a04      	cmp	r2, #4
    5a12:	d1d6      	bne.n	59c2 <__aeabi_dmul+0x46a>
    5a14:	0003      	movs	r3, r0
    5a16:	0765      	lsls	r5, r4, #29
    5a18:	0264      	lsls	r4, r4, #9
    5a1a:	0b22      	lsrs	r2, r4, #12
    5a1c:	08db      	lsrs	r3, r3, #3
    5a1e:	432b      	orrs	r3, r5
    5a20:	2501      	movs	r5, #1
    5a22:	4699      	mov	r9, r3
    5a24:	9b01      	ldr	r3, [sp, #4]
    5a26:	2400      	movs	r4, #0
    5a28:	401d      	ands	r5, r3
    5a2a:	e5fc      	b.n	5626 <__aeabi_dmul+0xce>
    5a2c:	2400      	movs	r4, #0
    5a2e:	e7e2      	b.n	59f6 <__aeabi_dmul+0x49e>
    5a30:	2280      	movs	r2, #128	; 0x80
    5a32:	2501      	movs	r5, #1
    5a34:	0312      	lsls	r2, r2, #12
    5a36:	4322      	orrs	r2, r4
    5a38:	9901      	ldr	r1, [sp, #4]
    5a3a:	0312      	lsls	r2, r2, #12
    5a3c:	0b12      	lsrs	r2, r2, #12
    5a3e:	400d      	ands	r5, r1
    5a40:	4699      	mov	r9, r3
    5a42:	4c04      	ldr	r4, [pc, #16]	; (5a54 <__aeabi_dmul+0x4fc>)
    5a44:	e5ef      	b.n	5626 <__aeabi_dmul+0xce>
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	000003ff 	.word	0x000003ff
    5a4c:	feffffff 	.word	0xfeffffff
    5a50:	000007fe 	.word	0x000007fe
    5a54:	000007ff 	.word	0x000007ff

00005a58 <__aeabi_i2d>:
    5a58:	b570      	push	{r4, r5, r6, lr}
    5a5a:	2800      	cmp	r0, #0
    5a5c:	d030      	beq.n	5ac0 <__aeabi_i2d+0x68>
    5a5e:	17c3      	asrs	r3, r0, #31
    5a60:	18c4      	adds	r4, r0, r3
    5a62:	405c      	eors	r4, r3
    5a64:	0fc5      	lsrs	r5, r0, #31
    5a66:	0020      	movs	r0, r4
    5a68:	f000 f94e 	bl	5d08 <__clzsi2>
    5a6c:	4b17      	ldr	r3, [pc, #92]	; (5acc <__aeabi_i2d+0x74>)
    5a6e:	4a18      	ldr	r2, [pc, #96]	; (5ad0 <__aeabi_i2d+0x78>)
    5a70:	1a1b      	subs	r3, r3, r0
    5a72:	1ad2      	subs	r2, r2, r3
    5a74:	2a1f      	cmp	r2, #31
    5a76:	dd18      	ble.n	5aaa <__aeabi_i2d+0x52>
    5a78:	4a16      	ldr	r2, [pc, #88]	; (5ad4 <__aeabi_i2d+0x7c>)
    5a7a:	1ad2      	subs	r2, r2, r3
    5a7c:	4094      	lsls	r4, r2
    5a7e:	2200      	movs	r2, #0
    5a80:	0324      	lsls	r4, r4, #12
    5a82:	055b      	lsls	r3, r3, #21
    5a84:	0b24      	lsrs	r4, r4, #12
    5a86:	0d5b      	lsrs	r3, r3, #21
    5a88:	2100      	movs	r1, #0
    5a8a:	0010      	movs	r0, r2
    5a8c:	0324      	lsls	r4, r4, #12
    5a8e:	0d0a      	lsrs	r2, r1, #20
    5a90:	0b24      	lsrs	r4, r4, #12
    5a92:	0512      	lsls	r2, r2, #20
    5a94:	4322      	orrs	r2, r4
    5a96:	4c10      	ldr	r4, [pc, #64]	; (5ad8 <__aeabi_i2d+0x80>)
    5a98:	051b      	lsls	r3, r3, #20
    5a9a:	4022      	ands	r2, r4
    5a9c:	4313      	orrs	r3, r2
    5a9e:	005b      	lsls	r3, r3, #1
    5aa0:	07ed      	lsls	r5, r5, #31
    5aa2:	085b      	lsrs	r3, r3, #1
    5aa4:	432b      	orrs	r3, r5
    5aa6:	0019      	movs	r1, r3
    5aa8:	bd70      	pop	{r4, r5, r6, pc}
    5aaa:	0021      	movs	r1, r4
    5aac:	4091      	lsls	r1, r2
    5aae:	000a      	movs	r2, r1
    5ab0:	210b      	movs	r1, #11
    5ab2:	1a08      	subs	r0, r1, r0
    5ab4:	40c4      	lsrs	r4, r0
    5ab6:	055b      	lsls	r3, r3, #21
    5ab8:	0324      	lsls	r4, r4, #12
    5aba:	0b24      	lsrs	r4, r4, #12
    5abc:	0d5b      	lsrs	r3, r3, #21
    5abe:	e7e3      	b.n	5a88 <__aeabi_i2d+0x30>
    5ac0:	2500      	movs	r5, #0
    5ac2:	2300      	movs	r3, #0
    5ac4:	2400      	movs	r4, #0
    5ac6:	2200      	movs	r2, #0
    5ac8:	e7de      	b.n	5a88 <__aeabi_i2d+0x30>
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	0000041e 	.word	0x0000041e
    5ad0:	00000433 	.word	0x00000433
    5ad4:	00000413 	.word	0x00000413
    5ad8:	800fffff 	.word	0x800fffff

00005adc <__aeabi_f2d>:
    5adc:	0041      	lsls	r1, r0, #1
    5ade:	0e09      	lsrs	r1, r1, #24
    5ae0:	1c4b      	adds	r3, r1, #1
    5ae2:	b570      	push	{r4, r5, r6, lr}
    5ae4:	b2db      	uxtb	r3, r3
    5ae6:	0246      	lsls	r6, r0, #9
    5ae8:	0a75      	lsrs	r5, r6, #9
    5aea:	0fc4      	lsrs	r4, r0, #31
    5aec:	2b01      	cmp	r3, #1
    5aee:	dd14      	ble.n	5b1a <__aeabi_f2d+0x3e>
    5af0:	23e0      	movs	r3, #224	; 0xe0
    5af2:	009b      	lsls	r3, r3, #2
    5af4:	076d      	lsls	r5, r5, #29
    5af6:	0b36      	lsrs	r6, r6, #12
    5af8:	18cb      	adds	r3, r1, r3
    5afa:	2100      	movs	r1, #0
    5afc:	0d0a      	lsrs	r2, r1, #20
    5afe:	0028      	movs	r0, r5
    5b00:	0512      	lsls	r2, r2, #20
    5b02:	4d1c      	ldr	r5, [pc, #112]	; (5b74 <__aeabi_f2d+0x98>)
    5b04:	4332      	orrs	r2, r6
    5b06:	055b      	lsls	r3, r3, #21
    5b08:	402a      	ands	r2, r5
    5b0a:	085b      	lsrs	r3, r3, #1
    5b0c:	4313      	orrs	r3, r2
    5b0e:	005b      	lsls	r3, r3, #1
    5b10:	07e4      	lsls	r4, r4, #31
    5b12:	085b      	lsrs	r3, r3, #1
    5b14:	4323      	orrs	r3, r4
    5b16:	0019      	movs	r1, r3
    5b18:	bd70      	pop	{r4, r5, r6, pc}
    5b1a:	2900      	cmp	r1, #0
    5b1c:	d114      	bne.n	5b48 <__aeabi_f2d+0x6c>
    5b1e:	2d00      	cmp	r5, #0
    5b20:	d01e      	beq.n	5b60 <__aeabi_f2d+0x84>
    5b22:	0028      	movs	r0, r5
    5b24:	f000 f8f0 	bl	5d08 <__clzsi2>
    5b28:	280a      	cmp	r0, #10
    5b2a:	dc1c      	bgt.n	5b66 <__aeabi_f2d+0x8a>
    5b2c:	230b      	movs	r3, #11
    5b2e:	002a      	movs	r2, r5
    5b30:	1a1b      	subs	r3, r3, r0
    5b32:	40da      	lsrs	r2, r3
    5b34:	0003      	movs	r3, r0
    5b36:	3315      	adds	r3, #21
    5b38:	409d      	lsls	r5, r3
    5b3a:	4b0f      	ldr	r3, [pc, #60]	; (5b78 <__aeabi_f2d+0x9c>)
    5b3c:	0312      	lsls	r2, r2, #12
    5b3e:	1a1b      	subs	r3, r3, r0
    5b40:	055b      	lsls	r3, r3, #21
    5b42:	0b16      	lsrs	r6, r2, #12
    5b44:	0d5b      	lsrs	r3, r3, #21
    5b46:	e7d8      	b.n	5afa <__aeabi_f2d+0x1e>
    5b48:	2d00      	cmp	r5, #0
    5b4a:	d006      	beq.n	5b5a <__aeabi_f2d+0x7e>
    5b4c:	0b32      	lsrs	r2, r6, #12
    5b4e:	2680      	movs	r6, #128	; 0x80
    5b50:	0336      	lsls	r6, r6, #12
    5b52:	076d      	lsls	r5, r5, #29
    5b54:	4316      	orrs	r6, r2
    5b56:	4b09      	ldr	r3, [pc, #36]	; (5b7c <__aeabi_f2d+0xa0>)
    5b58:	e7cf      	b.n	5afa <__aeabi_f2d+0x1e>
    5b5a:	4b08      	ldr	r3, [pc, #32]	; (5b7c <__aeabi_f2d+0xa0>)
    5b5c:	2600      	movs	r6, #0
    5b5e:	e7cc      	b.n	5afa <__aeabi_f2d+0x1e>
    5b60:	2300      	movs	r3, #0
    5b62:	2600      	movs	r6, #0
    5b64:	e7c9      	b.n	5afa <__aeabi_f2d+0x1e>
    5b66:	0003      	movs	r3, r0
    5b68:	002a      	movs	r2, r5
    5b6a:	3b0b      	subs	r3, #11
    5b6c:	409a      	lsls	r2, r3
    5b6e:	2500      	movs	r5, #0
    5b70:	e7e3      	b.n	5b3a <__aeabi_f2d+0x5e>
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	800fffff 	.word	0x800fffff
    5b78:	00000389 	.word	0x00000389
    5b7c:	000007ff 	.word	0x000007ff

00005b80 <__aeabi_d2f>:
    5b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b82:	004c      	lsls	r4, r1, #1
    5b84:	0d64      	lsrs	r4, r4, #21
    5b86:	030b      	lsls	r3, r1, #12
    5b88:	1c62      	adds	r2, r4, #1
    5b8a:	0f45      	lsrs	r5, r0, #29
    5b8c:	0a5b      	lsrs	r3, r3, #9
    5b8e:	0552      	lsls	r2, r2, #21
    5b90:	432b      	orrs	r3, r5
    5b92:	0fc9      	lsrs	r1, r1, #31
    5b94:	00c5      	lsls	r5, r0, #3
    5b96:	0d52      	lsrs	r2, r2, #21
    5b98:	2a01      	cmp	r2, #1
    5b9a:	dd28      	ble.n	5bee <__aeabi_d2f+0x6e>
    5b9c:	4a3a      	ldr	r2, [pc, #232]	; (5c88 <__aeabi_d2f+0x108>)
    5b9e:	18a6      	adds	r6, r4, r2
    5ba0:	2efe      	cmp	r6, #254	; 0xfe
    5ba2:	dc1b      	bgt.n	5bdc <__aeabi_d2f+0x5c>
    5ba4:	2e00      	cmp	r6, #0
    5ba6:	dd3e      	ble.n	5c26 <__aeabi_d2f+0xa6>
    5ba8:	0180      	lsls	r0, r0, #6
    5baa:	0002      	movs	r2, r0
    5bac:	1e50      	subs	r0, r2, #1
    5bae:	4182      	sbcs	r2, r0
    5bb0:	0f6d      	lsrs	r5, r5, #29
    5bb2:	432a      	orrs	r2, r5
    5bb4:	00db      	lsls	r3, r3, #3
    5bb6:	4313      	orrs	r3, r2
    5bb8:	075a      	lsls	r2, r3, #29
    5bba:	d004      	beq.n	5bc6 <__aeabi_d2f+0x46>
    5bbc:	220f      	movs	r2, #15
    5bbe:	401a      	ands	r2, r3
    5bc0:	2a04      	cmp	r2, #4
    5bc2:	d000      	beq.n	5bc6 <__aeabi_d2f+0x46>
    5bc4:	3304      	adds	r3, #4
    5bc6:	2280      	movs	r2, #128	; 0x80
    5bc8:	04d2      	lsls	r2, r2, #19
    5bca:	401a      	ands	r2, r3
    5bcc:	d05a      	beq.n	5c84 <__aeabi_d2f+0x104>
    5bce:	3601      	adds	r6, #1
    5bd0:	2eff      	cmp	r6, #255	; 0xff
    5bd2:	d003      	beq.n	5bdc <__aeabi_d2f+0x5c>
    5bd4:	019b      	lsls	r3, r3, #6
    5bd6:	0a5b      	lsrs	r3, r3, #9
    5bd8:	b2f4      	uxtb	r4, r6
    5bda:	e001      	b.n	5be0 <__aeabi_d2f+0x60>
    5bdc:	24ff      	movs	r4, #255	; 0xff
    5bde:	2300      	movs	r3, #0
    5be0:	0258      	lsls	r0, r3, #9
    5be2:	05e4      	lsls	r4, r4, #23
    5be4:	0a40      	lsrs	r0, r0, #9
    5be6:	07c9      	lsls	r1, r1, #31
    5be8:	4320      	orrs	r0, r4
    5bea:	4308      	orrs	r0, r1
    5bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bee:	2c00      	cmp	r4, #0
    5bf0:	d007      	beq.n	5c02 <__aeabi_d2f+0x82>
    5bf2:	431d      	orrs	r5, r3
    5bf4:	d0f2      	beq.n	5bdc <__aeabi_d2f+0x5c>
    5bf6:	2080      	movs	r0, #128	; 0x80
    5bf8:	00db      	lsls	r3, r3, #3
    5bfa:	0480      	lsls	r0, r0, #18
    5bfc:	4303      	orrs	r3, r0
    5bfe:	26ff      	movs	r6, #255	; 0xff
    5c00:	e7da      	b.n	5bb8 <__aeabi_d2f+0x38>
    5c02:	432b      	orrs	r3, r5
    5c04:	d003      	beq.n	5c0e <__aeabi_d2f+0x8e>
    5c06:	2305      	movs	r3, #5
    5c08:	08db      	lsrs	r3, r3, #3
    5c0a:	2cff      	cmp	r4, #255	; 0xff
    5c0c:	d003      	beq.n	5c16 <__aeabi_d2f+0x96>
    5c0e:	025b      	lsls	r3, r3, #9
    5c10:	0a5b      	lsrs	r3, r3, #9
    5c12:	b2e4      	uxtb	r4, r4
    5c14:	e7e4      	b.n	5be0 <__aeabi_d2f+0x60>
    5c16:	2b00      	cmp	r3, #0
    5c18:	d032      	beq.n	5c80 <__aeabi_d2f+0x100>
    5c1a:	2080      	movs	r0, #128	; 0x80
    5c1c:	03c0      	lsls	r0, r0, #15
    5c1e:	4303      	orrs	r3, r0
    5c20:	025b      	lsls	r3, r3, #9
    5c22:	0a5b      	lsrs	r3, r3, #9
    5c24:	e7dc      	b.n	5be0 <__aeabi_d2f+0x60>
    5c26:	0032      	movs	r2, r6
    5c28:	3217      	adds	r2, #23
    5c2a:	db14      	blt.n	5c56 <__aeabi_d2f+0xd6>
    5c2c:	2280      	movs	r2, #128	; 0x80
    5c2e:	271e      	movs	r7, #30
    5c30:	0412      	lsls	r2, r2, #16
    5c32:	4313      	orrs	r3, r2
    5c34:	1bbf      	subs	r7, r7, r6
    5c36:	2f1f      	cmp	r7, #31
    5c38:	dc0f      	bgt.n	5c5a <__aeabi_d2f+0xda>
    5c3a:	4a14      	ldr	r2, [pc, #80]	; (5c8c <__aeabi_d2f+0x10c>)
    5c3c:	4694      	mov	ip, r2
    5c3e:	4464      	add	r4, ip
    5c40:	002a      	movs	r2, r5
    5c42:	40a5      	lsls	r5, r4
    5c44:	002e      	movs	r6, r5
    5c46:	40a3      	lsls	r3, r4
    5c48:	1e75      	subs	r5, r6, #1
    5c4a:	41ae      	sbcs	r6, r5
    5c4c:	40fa      	lsrs	r2, r7
    5c4e:	4333      	orrs	r3, r6
    5c50:	4313      	orrs	r3, r2
    5c52:	2600      	movs	r6, #0
    5c54:	e7b0      	b.n	5bb8 <__aeabi_d2f+0x38>
    5c56:	2400      	movs	r4, #0
    5c58:	e7d5      	b.n	5c06 <__aeabi_d2f+0x86>
    5c5a:	2202      	movs	r2, #2
    5c5c:	4252      	negs	r2, r2
    5c5e:	1b96      	subs	r6, r2, r6
    5c60:	001a      	movs	r2, r3
    5c62:	40f2      	lsrs	r2, r6
    5c64:	2f20      	cmp	r7, #32
    5c66:	d009      	beq.n	5c7c <__aeabi_d2f+0xfc>
    5c68:	4809      	ldr	r0, [pc, #36]	; (5c90 <__aeabi_d2f+0x110>)
    5c6a:	4684      	mov	ip, r0
    5c6c:	4464      	add	r4, ip
    5c6e:	40a3      	lsls	r3, r4
    5c70:	432b      	orrs	r3, r5
    5c72:	1e5d      	subs	r5, r3, #1
    5c74:	41ab      	sbcs	r3, r5
    5c76:	2600      	movs	r6, #0
    5c78:	4313      	orrs	r3, r2
    5c7a:	e79d      	b.n	5bb8 <__aeabi_d2f+0x38>
    5c7c:	2300      	movs	r3, #0
    5c7e:	e7f7      	b.n	5c70 <__aeabi_d2f+0xf0>
    5c80:	2300      	movs	r3, #0
    5c82:	e7ad      	b.n	5be0 <__aeabi_d2f+0x60>
    5c84:	0034      	movs	r4, r6
    5c86:	e7bf      	b.n	5c08 <__aeabi_d2f+0x88>
    5c88:	fffffc80 	.word	0xfffffc80
    5c8c:	fffffc82 	.word	0xfffffc82
    5c90:	fffffca2 	.word	0xfffffca2

00005c94 <__aeabi_cfrcmple>:
    5c94:	4684      	mov	ip, r0
    5c96:	1c08      	adds	r0, r1, #0
    5c98:	4661      	mov	r1, ip
    5c9a:	e7ff      	b.n	5c9c <__aeabi_cfcmpeq>

00005c9c <__aeabi_cfcmpeq>:
    5c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5c9e:	f000 f8b7 	bl	5e10 <__lesf2>
    5ca2:	2800      	cmp	r0, #0
    5ca4:	d401      	bmi.n	5caa <__aeabi_cfcmpeq+0xe>
    5ca6:	2100      	movs	r1, #0
    5ca8:	42c8      	cmn	r0, r1
    5caa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005cac <__aeabi_fcmpeq>:
    5cac:	b510      	push	{r4, lr}
    5cae:	f000 f849 	bl	5d44 <__eqsf2>
    5cb2:	4240      	negs	r0, r0
    5cb4:	3001      	adds	r0, #1
    5cb6:	bd10      	pop	{r4, pc}

00005cb8 <__aeabi_fcmplt>:
    5cb8:	b510      	push	{r4, lr}
    5cba:	f000 f8a9 	bl	5e10 <__lesf2>
    5cbe:	2800      	cmp	r0, #0
    5cc0:	db01      	blt.n	5cc6 <__aeabi_fcmplt+0xe>
    5cc2:	2000      	movs	r0, #0
    5cc4:	bd10      	pop	{r4, pc}
    5cc6:	2001      	movs	r0, #1
    5cc8:	bd10      	pop	{r4, pc}
    5cca:	46c0      	nop			; (mov r8, r8)

00005ccc <__aeabi_fcmple>:
    5ccc:	b510      	push	{r4, lr}
    5cce:	f000 f89f 	bl	5e10 <__lesf2>
    5cd2:	2800      	cmp	r0, #0
    5cd4:	dd01      	ble.n	5cda <__aeabi_fcmple+0xe>
    5cd6:	2000      	movs	r0, #0
    5cd8:	bd10      	pop	{r4, pc}
    5cda:	2001      	movs	r0, #1
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	46c0      	nop			; (mov r8, r8)

00005ce0 <__aeabi_fcmpgt>:
    5ce0:	b510      	push	{r4, lr}
    5ce2:	f000 f855 	bl	5d90 <__gesf2>
    5ce6:	2800      	cmp	r0, #0
    5ce8:	dc01      	bgt.n	5cee <__aeabi_fcmpgt+0xe>
    5cea:	2000      	movs	r0, #0
    5cec:	bd10      	pop	{r4, pc}
    5cee:	2001      	movs	r0, #1
    5cf0:	bd10      	pop	{r4, pc}
    5cf2:	46c0      	nop			; (mov r8, r8)

00005cf4 <__aeabi_fcmpge>:
    5cf4:	b510      	push	{r4, lr}
    5cf6:	f000 f84b 	bl	5d90 <__gesf2>
    5cfa:	2800      	cmp	r0, #0
    5cfc:	da01      	bge.n	5d02 <__aeabi_fcmpge+0xe>
    5cfe:	2000      	movs	r0, #0
    5d00:	bd10      	pop	{r4, pc}
    5d02:	2001      	movs	r0, #1
    5d04:	bd10      	pop	{r4, pc}
    5d06:	46c0      	nop			; (mov r8, r8)

00005d08 <__clzsi2>:
    5d08:	211c      	movs	r1, #28
    5d0a:	2301      	movs	r3, #1
    5d0c:	041b      	lsls	r3, r3, #16
    5d0e:	4298      	cmp	r0, r3
    5d10:	d301      	bcc.n	5d16 <__clzsi2+0xe>
    5d12:	0c00      	lsrs	r0, r0, #16
    5d14:	3910      	subs	r1, #16
    5d16:	0a1b      	lsrs	r3, r3, #8
    5d18:	4298      	cmp	r0, r3
    5d1a:	d301      	bcc.n	5d20 <__clzsi2+0x18>
    5d1c:	0a00      	lsrs	r0, r0, #8
    5d1e:	3908      	subs	r1, #8
    5d20:	091b      	lsrs	r3, r3, #4
    5d22:	4298      	cmp	r0, r3
    5d24:	d301      	bcc.n	5d2a <__clzsi2+0x22>
    5d26:	0900      	lsrs	r0, r0, #4
    5d28:	3904      	subs	r1, #4
    5d2a:	a202      	add	r2, pc, #8	; (adr r2, 5d34 <__clzsi2+0x2c>)
    5d2c:	5c10      	ldrb	r0, [r2, r0]
    5d2e:	1840      	adds	r0, r0, r1
    5d30:	4770      	bx	lr
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	02020304 	.word	0x02020304
    5d38:	01010101 	.word	0x01010101
	...

00005d44 <__eqsf2>:
    5d44:	b570      	push	{r4, r5, r6, lr}
    5d46:	0042      	lsls	r2, r0, #1
    5d48:	0245      	lsls	r5, r0, #9
    5d4a:	024e      	lsls	r6, r1, #9
    5d4c:	004c      	lsls	r4, r1, #1
    5d4e:	0fc3      	lsrs	r3, r0, #31
    5d50:	0a6d      	lsrs	r5, r5, #9
    5d52:	0e12      	lsrs	r2, r2, #24
    5d54:	0a76      	lsrs	r6, r6, #9
    5d56:	0e24      	lsrs	r4, r4, #24
    5d58:	0fc9      	lsrs	r1, r1, #31
    5d5a:	2001      	movs	r0, #1
    5d5c:	2aff      	cmp	r2, #255	; 0xff
    5d5e:	d006      	beq.n	5d6e <__eqsf2+0x2a>
    5d60:	2cff      	cmp	r4, #255	; 0xff
    5d62:	d003      	beq.n	5d6c <__eqsf2+0x28>
    5d64:	42a2      	cmp	r2, r4
    5d66:	d101      	bne.n	5d6c <__eqsf2+0x28>
    5d68:	42b5      	cmp	r5, r6
    5d6a:	d006      	beq.n	5d7a <__eqsf2+0x36>
    5d6c:	bd70      	pop	{r4, r5, r6, pc}
    5d6e:	2d00      	cmp	r5, #0
    5d70:	d1fc      	bne.n	5d6c <__eqsf2+0x28>
    5d72:	2cff      	cmp	r4, #255	; 0xff
    5d74:	d1fa      	bne.n	5d6c <__eqsf2+0x28>
    5d76:	2e00      	cmp	r6, #0
    5d78:	d1f8      	bne.n	5d6c <__eqsf2+0x28>
    5d7a:	428b      	cmp	r3, r1
    5d7c:	d006      	beq.n	5d8c <__eqsf2+0x48>
    5d7e:	2001      	movs	r0, #1
    5d80:	2a00      	cmp	r2, #0
    5d82:	d1f3      	bne.n	5d6c <__eqsf2+0x28>
    5d84:	0028      	movs	r0, r5
    5d86:	1e45      	subs	r5, r0, #1
    5d88:	41a8      	sbcs	r0, r5
    5d8a:	e7ef      	b.n	5d6c <__eqsf2+0x28>
    5d8c:	2000      	movs	r0, #0
    5d8e:	e7ed      	b.n	5d6c <__eqsf2+0x28>

00005d90 <__gesf2>:
    5d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d92:	0042      	lsls	r2, r0, #1
    5d94:	0245      	lsls	r5, r0, #9
    5d96:	024c      	lsls	r4, r1, #9
    5d98:	0fc3      	lsrs	r3, r0, #31
    5d9a:	0048      	lsls	r0, r1, #1
    5d9c:	0a6d      	lsrs	r5, r5, #9
    5d9e:	0e12      	lsrs	r2, r2, #24
    5da0:	0a64      	lsrs	r4, r4, #9
    5da2:	0e00      	lsrs	r0, r0, #24
    5da4:	0fc9      	lsrs	r1, r1, #31
    5da6:	2aff      	cmp	r2, #255	; 0xff
    5da8:	d01e      	beq.n	5de8 <__gesf2+0x58>
    5daa:	28ff      	cmp	r0, #255	; 0xff
    5dac:	d021      	beq.n	5df2 <__gesf2+0x62>
    5dae:	2a00      	cmp	r2, #0
    5db0:	d10a      	bne.n	5dc8 <__gesf2+0x38>
    5db2:	426e      	negs	r6, r5
    5db4:	416e      	adcs	r6, r5
    5db6:	b2f6      	uxtb	r6, r6
    5db8:	2800      	cmp	r0, #0
    5dba:	d10f      	bne.n	5ddc <__gesf2+0x4c>
    5dbc:	2c00      	cmp	r4, #0
    5dbe:	d10d      	bne.n	5ddc <__gesf2+0x4c>
    5dc0:	2000      	movs	r0, #0
    5dc2:	2d00      	cmp	r5, #0
    5dc4:	d009      	beq.n	5dda <__gesf2+0x4a>
    5dc6:	e005      	b.n	5dd4 <__gesf2+0x44>
    5dc8:	2800      	cmp	r0, #0
    5dca:	d101      	bne.n	5dd0 <__gesf2+0x40>
    5dcc:	2c00      	cmp	r4, #0
    5dce:	d001      	beq.n	5dd4 <__gesf2+0x44>
    5dd0:	428b      	cmp	r3, r1
    5dd2:	d011      	beq.n	5df8 <__gesf2+0x68>
    5dd4:	2101      	movs	r1, #1
    5dd6:	4258      	negs	r0, r3
    5dd8:	4308      	orrs	r0, r1
    5dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ddc:	2e00      	cmp	r6, #0
    5dde:	d0f7      	beq.n	5dd0 <__gesf2+0x40>
    5de0:	2001      	movs	r0, #1
    5de2:	3901      	subs	r1, #1
    5de4:	4308      	orrs	r0, r1
    5de6:	e7f8      	b.n	5dda <__gesf2+0x4a>
    5de8:	2d00      	cmp	r5, #0
    5dea:	d0de      	beq.n	5daa <__gesf2+0x1a>
    5dec:	2002      	movs	r0, #2
    5dee:	4240      	negs	r0, r0
    5df0:	e7f3      	b.n	5dda <__gesf2+0x4a>
    5df2:	2c00      	cmp	r4, #0
    5df4:	d0db      	beq.n	5dae <__gesf2+0x1e>
    5df6:	e7f9      	b.n	5dec <__gesf2+0x5c>
    5df8:	4282      	cmp	r2, r0
    5dfa:	dceb      	bgt.n	5dd4 <__gesf2+0x44>
    5dfc:	db04      	blt.n	5e08 <__gesf2+0x78>
    5dfe:	42a5      	cmp	r5, r4
    5e00:	d8e8      	bhi.n	5dd4 <__gesf2+0x44>
    5e02:	2000      	movs	r0, #0
    5e04:	42a5      	cmp	r5, r4
    5e06:	d2e8      	bcs.n	5dda <__gesf2+0x4a>
    5e08:	2101      	movs	r1, #1
    5e0a:	1e58      	subs	r0, r3, #1
    5e0c:	4308      	orrs	r0, r1
    5e0e:	e7e4      	b.n	5dda <__gesf2+0x4a>

00005e10 <__lesf2>:
    5e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e12:	0042      	lsls	r2, r0, #1
    5e14:	024d      	lsls	r5, r1, #9
    5e16:	004c      	lsls	r4, r1, #1
    5e18:	0246      	lsls	r6, r0, #9
    5e1a:	0a76      	lsrs	r6, r6, #9
    5e1c:	0e12      	lsrs	r2, r2, #24
    5e1e:	0fc3      	lsrs	r3, r0, #31
    5e20:	0a6d      	lsrs	r5, r5, #9
    5e22:	0e24      	lsrs	r4, r4, #24
    5e24:	0fc9      	lsrs	r1, r1, #31
    5e26:	2aff      	cmp	r2, #255	; 0xff
    5e28:	d016      	beq.n	5e58 <__lesf2+0x48>
    5e2a:	2cff      	cmp	r4, #255	; 0xff
    5e2c:	d018      	beq.n	5e60 <__lesf2+0x50>
    5e2e:	2a00      	cmp	r2, #0
    5e30:	d10a      	bne.n	5e48 <__lesf2+0x38>
    5e32:	4270      	negs	r0, r6
    5e34:	4170      	adcs	r0, r6
    5e36:	b2c0      	uxtb	r0, r0
    5e38:	2c00      	cmp	r4, #0
    5e3a:	d015      	beq.n	5e68 <__lesf2+0x58>
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d005      	beq.n	5e4c <__lesf2+0x3c>
    5e40:	2001      	movs	r0, #1
    5e42:	3901      	subs	r1, #1
    5e44:	4308      	orrs	r0, r1
    5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e48:	2c00      	cmp	r4, #0
    5e4a:	d013      	beq.n	5e74 <__lesf2+0x64>
    5e4c:	4299      	cmp	r1, r3
    5e4e:	d014      	beq.n	5e7a <__lesf2+0x6a>
    5e50:	2001      	movs	r0, #1
    5e52:	425b      	negs	r3, r3
    5e54:	4318      	orrs	r0, r3
    5e56:	e7f6      	b.n	5e46 <__lesf2+0x36>
    5e58:	2002      	movs	r0, #2
    5e5a:	2e00      	cmp	r6, #0
    5e5c:	d1f3      	bne.n	5e46 <__lesf2+0x36>
    5e5e:	e7e4      	b.n	5e2a <__lesf2+0x1a>
    5e60:	2002      	movs	r0, #2
    5e62:	2d00      	cmp	r5, #0
    5e64:	d1ef      	bne.n	5e46 <__lesf2+0x36>
    5e66:	e7e2      	b.n	5e2e <__lesf2+0x1e>
    5e68:	2d00      	cmp	r5, #0
    5e6a:	d1e7      	bne.n	5e3c <__lesf2+0x2c>
    5e6c:	2000      	movs	r0, #0
    5e6e:	2e00      	cmp	r6, #0
    5e70:	d0e9      	beq.n	5e46 <__lesf2+0x36>
    5e72:	e7ed      	b.n	5e50 <__lesf2+0x40>
    5e74:	2d00      	cmp	r5, #0
    5e76:	d1e9      	bne.n	5e4c <__lesf2+0x3c>
    5e78:	e7ea      	b.n	5e50 <__lesf2+0x40>
    5e7a:	42a2      	cmp	r2, r4
    5e7c:	dc06      	bgt.n	5e8c <__lesf2+0x7c>
    5e7e:	dbdf      	blt.n	5e40 <__lesf2+0x30>
    5e80:	42ae      	cmp	r6, r5
    5e82:	d803      	bhi.n	5e8c <__lesf2+0x7c>
    5e84:	2000      	movs	r0, #0
    5e86:	42ae      	cmp	r6, r5
    5e88:	d3da      	bcc.n	5e40 <__lesf2+0x30>
    5e8a:	e7dc      	b.n	5e46 <__lesf2+0x36>
    5e8c:	2001      	movs	r0, #1
    5e8e:	4249      	negs	r1, r1
    5e90:	4308      	orrs	r0, r1
    5e92:	e7d8      	b.n	5e46 <__lesf2+0x36>

00005e94 <__libc_init_array>:
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	2600      	movs	r6, #0
    5e98:	4d0c      	ldr	r5, [pc, #48]	; (5ecc <__libc_init_array+0x38>)
    5e9a:	4c0d      	ldr	r4, [pc, #52]	; (5ed0 <__libc_init_array+0x3c>)
    5e9c:	1b64      	subs	r4, r4, r5
    5e9e:	10a4      	asrs	r4, r4, #2
    5ea0:	42a6      	cmp	r6, r4
    5ea2:	d109      	bne.n	5eb8 <__libc_init_array+0x24>
    5ea4:	2600      	movs	r6, #0
    5ea6:	f000 f9b5 	bl	6214 <_init>
    5eaa:	4d0a      	ldr	r5, [pc, #40]	; (5ed4 <__libc_init_array+0x40>)
    5eac:	4c0a      	ldr	r4, [pc, #40]	; (5ed8 <__libc_init_array+0x44>)
    5eae:	1b64      	subs	r4, r4, r5
    5eb0:	10a4      	asrs	r4, r4, #2
    5eb2:	42a6      	cmp	r6, r4
    5eb4:	d105      	bne.n	5ec2 <__libc_init_array+0x2e>
    5eb6:	bd70      	pop	{r4, r5, r6, pc}
    5eb8:	00b3      	lsls	r3, r6, #2
    5eba:	58eb      	ldr	r3, [r5, r3]
    5ebc:	4798      	blx	r3
    5ebe:	3601      	adds	r6, #1
    5ec0:	e7ee      	b.n	5ea0 <__libc_init_array+0xc>
    5ec2:	00b3      	lsls	r3, r6, #2
    5ec4:	58eb      	ldr	r3, [r5, r3]
    5ec6:	4798      	blx	r3
    5ec8:	3601      	adds	r6, #1
    5eca:	e7f2      	b.n	5eb2 <__libc_init_array+0x1e>
    5ecc:	00006220 	.word	0x00006220
    5ed0:	00006220 	.word	0x00006220
    5ed4:	00006220 	.word	0x00006220
    5ed8:	00006224 	.word	0x00006224

00005edc <memcpy>:
    5edc:	2300      	movs	r3, #0
    5ede:	b510      	push	{r4, lr}
    5ee0:	429a      	cmp	r2, r3
    5ee2:	d100      	bne.n	5ee6 <memcpy+0xa>
    5ee4:	bd10      	pop	{r4, pc}
    5ee6:	5ccc      	ldrb	r4, [r1, r3]
    5ee8:	54c4      	strb	r4, [r0, r3]
    5eea:	3301      	adds	r3, #1
    5eec:	e7f8      	b.n	5ee0 <memcpy+0x4>
    5eee:	0000      	movs	r0, r0
    5ef0:	000001e0 	.word	0x000001e0
    5ef4:	000001ee 	.word	0x000001ee
    5ef8:	000001fc 	.word	0x000001fc
    5efc:	0000020a 	.word	0x0000020a
    5f00:	00000218 	.word	0x00000218
    5f04:	00000002 	.word	0x00000002
    5f08:	00000003 	.word	0x00000003
    5f0c:	00000028 	.word	0x00000028
    5f10:	00000029 	.word	0x00000029
    5f14:	00000004 	.word	0x00000004
    5f18:	00000005 	.word	0x00000005
    5f1c:	00000006 	.word	0x00000006
    5f20:	00000007 	.word	0x00000007
    5f24:	00000020 	.word	0x00000020
    5f28:	00000021 	.word	0x00000021
    5f2c:	00000022 	.word	0x00000022
    5f30:	00000023 	.word	0x00000023
    5f34:	00000024 	.word	0x00000024
    5f38:	00000025 	.word	0x00000025
    5f3c:	00000026 	.word	0x00000026
    5f40:	00000027 	.word	0x00000027
    5f44:	00000008 	.word	0x00000008
    5f48:	00000009 	.word	0x00000009
    5f4c:	0000000a 	.word	0x0000000a
    5f50:	0000000b 	.word	0x0000000b
    5f54:	0000ffff 	.word	0x0000ffff
    5f58:	0000ffff 	.word	0x0000ffff
    5f5c:	0000ffff 	.word	0x0000ffff
    5f60:	0000ffff 	.word	0x0000ffff
    5f64:	000005c8 	.word	0x000005c8
    5f68:	000005ce 	.word	0x000005ce
    5f6c:	000005ce 	.word	0x000005ce
    5f70:	000005ce 	.word	0x000005ce
    5f74:	000005ce 	.word	0x000005ce
    5f78:	000005ce 	.word	0x000005ce
    5f7c:	000005ce 	.word	0x000005ce
    5f80:	000005ce 	.word	0x000005ce
    5f84:	000005ce 	.word	0x000005ce
    5f88:	000005ce 	.word	0x000005ce
    5f8c:	000005ce 	.word	0x000005ce
    5f90:	000005ce 	.word	0x000005ce
    5f94:	000005ce 	.word	0x000005ce
    5f98:	000005ce 	.word	0x000005ce
    5f9c:	000005ce 	.word	0x000005ce
    5fa0:	000005ce 	.word	0x000005ce
    5fa4:	000005a6 	.word	0x000005a6
    5fa8:	000005ce 	.word	0x000005ce
    5fac:	000005ce 	.word	0x000005ce
    5fb0:	000005ce 	.word	0x000005ce
    5fb4:	000005ce 	.word	0x000005ce
    5fb8:	000005ce 	.word	0x000005ce
    5fbc:	000005ce 	.word	0x000005ce
    5fc0:	000005ce 	.word	0x000005ce
    5fc4:	000005ce 	.word	0x000005ce
    5fc8:	000005ce 	.word	0x000005ce
    5fcc:	000005ce 	.word	0x000005ce
    5fd0:	000005ce 	.word	0x000005ce
    5fd4:	000005ce 	.word	0x000005ce
    5fd8:	000005ce 	.word	0x000005ce
    5fdc:	000005ce 	.word	0x000005ce
    5fe0:	000005ce 	.word	0x000005ce
    5fe4:	000005c2 	.word	0x000005c2
    5fe8:	000005ce 	.word	0x000005ce
    5fec:	000005ce 	.word	0x000005ce
    5ff0:	000005ce 	.word	0x000005ce
    5ff4:	000005ce 	.word	0x000005ce
    5ff8:	000005ce 	.word	0x000005ce
    5ffc:	000005ce 	.word	0x000005ce
    6000:	000005ce 	.word	0x000005ce
    6004:	000005ce 	.word	0x000005ce
    6008:	000005ce 	.word	0x000005ce
    600c:	000005ce 	.word	0x000005ce
    6010:	000005ce 	.word	0x000005ce
    6014:	000005ce 	.word	0x000005ce
    6018:	000005ce 	.word	0x000005ce
    601c:	000005ce 	.word	0x000005ce
    6020:	000005ce 	.word	0x000005ce
    6024:	000005bc 	.word	0x000005bc
    6028:	00000564 	.word	0x00000564
    602c:	0000057a 	.word	0x0000057a
    6030:	00000590 	.word	0x00000590
    6034:	0000054a 	.word	0x0000054a
    6038:	42000000 	.word	0x42000000
    603c:	42000400 	.word	0x42000400
    6040:	42000800 	.word	0x42000800
    6044:	42000c00 	.word	0x42000c00
    6048:	42001000 	.word	0x42001000
    604c:	43000400 	.word	0x43000400
    6050:	0b0a0908 	.word	0x0b0a0908
    6054:	00000d0c 	.word	0x00000d0c
    6058:	0000186c 	.word	0x0000186c
    605c:	0000187a 	.word	0x0000187a
    6060:	00001888 	.word	0x00001888
    6064:	00001896 	.word	0x00001896
    6068:	000018a4 	.word	0x000018a4
    606c:	0000228a 	.word	0x0000228a
    6070:	00002306 	.word	0x00002306
    6074:	00002306 	.word	0x00002306
    6078:	000022aa 	.word	0x000022aa
    607c:	000022a4 	.word	0x000022a4
    6080:	000022b0 	.word	0x000022b0
    6084:	00002290 	.word	0x00002290
    6088:	000022b6 	.word	0x000022b6
    608c:	000022ec 	.word	0x000022ec
    6090:	00002784 	.word	0x00002784
    6094:	00002792 	.word	0x00002792
    6098:	000027a0 	.word	0x000027a0
    609c:	000027ae 	.word	0x000027ae
    60a0:	000027bc 	.word	0x000027bc

000060a4 <tcc_modules>:
    60a4:	42001400 42001800 42001c00              ...B...B...B

000060b0 <_tcc_gclk_ids>:
    60b0:	001a1919                                ....

000060b4 <_tcc_apbcmasks>:
    60b4:	00000020 00000040 00000080               ...@.......

000060c0 <_tcc_maxs>:
    60c0:	00ffffff 00ffffff 0000ffff              ............

000060cc <_tcc_cc_nums>:
    60cc:	00020204                                ....

000060d0 <_tcc_ow_nums>:
    60d0:	00020408 00004794 00004764 00004776     .....G..dG..vG..
    60e0:	000046b8 00004776 0000475a 00004776     .F..vG..ZG..vG..
    60f0:	000046b8 00004764 00004764 0000475a     .F..dG..dG..ZG..
    6100:	000046b8 000046c0 000046c0 000046c0     .F...F...F...F..
    6110:	0000477c 00004764 00004764 00004738     |G..dG..dG..8G..
    6120:	0000481c 00004738 0000475a 00004738     .H..8G..ZG..8G..
    6130:	0000481c 00004764 00004764 0000475a     .H..dG..dG..ZG..
    6140:	0000481c 000046c0 000046c0 000046c0     .H...F...F...F..
    6150:	00004826 000049c4 00004914 00004914     &H...I...I...I..
    6160:	00004912 000049b6 000049b6 000049ac     .I...I...I...I..
    6170:	00004912 000049b6 000049ac 000049b6     .I...I...I...I..
    6180:	00004912 000049bc 000049bc 000049bc     .I...I...I...I..
    6190:	00004a4c 000050e8 000050ca 00005084     LJ...P...P...P..
    61a0:	00004fa2 00005084 000050bc 00005084     .O...P...P...P..
    61b0:	00004fa2 000050ca 000050ca 000050bc     .O...P...P...P..
    61c0:	00004fa2 00004f9a 00004f9a 00004f9a     .O...O...O...O..
    61d0:	00005300 00005748 00005608 00005608     .S..HW...V...V..
    61e0:	00005604 00005720 00005720 00005712     .V.. W.. W...W..
    61f0:	00005604 00005720 00005712 00005720     .V.. W...W.. W..
    6200:	00005604 00005728 00005728 00005728     .V..(W..(W..(W..
    6210:	0000592c                                ,Y..

00006214 <_init>:
    6214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	bcf8      	pop	{r3, r4, r5, r6, r7}
    621a:	bc08      	pop	{r3}
    621c:	469e      	mov	lr, r3
    621e:	4770      	bx	lr

00006220 <__init_array_start>:
    6220:	000000dd 	.word	0x000000dd

00006224 <_fini>:
    6224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	bcf8      	pop	{r3, r4, r5, r6, r7}
    622a:	bc08      	pop	{r3}
    622c:	469e      	mov	lr, r3
    622e:	4770      	bx	lr

00006230 <__fini_array_start>:
    6230:	000000b5 	.word	0x000000b5
